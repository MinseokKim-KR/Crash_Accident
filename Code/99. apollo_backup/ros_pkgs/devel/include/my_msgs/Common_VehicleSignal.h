// Generated by gencpp from file my_msgs/Common_VehicleSignal.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_COMMON_VEHICLESIGNAL_H
#define MY_MSGS_MESSAGE_COMMON_VEHICLESIGNAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <my_msgs/TurnSignal.h>

namespace my_msgs
{
template <class ContainerAllocator>
struct Common_VehicleSignal_
{
  typedef Common_VehicleSignal_<ContainerAllocator> Type;

  Common_VehicleSignal_()
    : turn_signal()
    , high_beam(false)
    , low_beam(false)
    , horn(false)
    , emergency_light(false)  {
    }
  Common_VehicleSignal_(const ContainerAllocator& _alloc)
    : turn_signal(_alloc)
    , high_beam(false)
    , low_beam(false)
    , horn(false)
    , emergency_light(false)  {
  (void)_alloc;
    }



   typedef  ::my_msgs::TurnSignal_<ContainerAllocator>  _turn_signal_type;
  _turn_signal_type turn_signal;

   typedef uint8_t _high_beam_type;
  _high_beam_type high_beam;

   typedef uint8_t _low_beam_type;
  _low_beam_type low_beam;

   typedef uint8_t _horn_type;
  _horn_type horn;

   typedef uint8_t _emergency_light_type;
  _emergency_light_type emergency_light;




  typedef boost::shared_ptr< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> const> ConstPtr;

}; // struct Common_VehicleSignal_

typedef ::my_msgs::Common_VehicleSignal_<std::allocator<void> > Common_VehicleSignal;

typedef boost::shared_ptr< ::my_msgs::Common_VehicleSignal > Common_VehicleSignalPtr;
typedef boost::shared_ptr< ::my_msgs::Common_VehicleSignal const> Common_VehicleSignalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::Common_VehicleSignal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51d715b478bf0e8b0b7b36d8e1b6d5eb";
  }

  static const char* value(const ::my_msgs::Common_VehicleSignal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51d715b478bf0e8bULL;
  static const uint64_t static_value2 = 0x0b7b36d8e1b6d5ebULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Common_VehicleSignal";
  }

  static const char* value(const ::my_msgs::Common_VehicleSignal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/TurnSignal turn_signal\n\
bool high_beam\n\
bool low_beam\n\
bool horn\n\
bool emergency_light\n\
================================================================================\n\
MSG: my_msgs/TurnSignal\n\
int32 TURN_NONE\n\
int32 TURN_LEFT\n\
int32 TURN_RIGHT\n\
";
  }

  static const char* value(const ::my_msgs::Common_VehicleSignal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.turn_signal);
      stream.next(m.high_beam);
      stream.next(m.low_beam);
      stream.next(m.horn);
      stream.next(m.emergency_light);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Common_VehicleSignal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::Common_VehicleSignal_<ContainerAllocator>& v)
  {
    s << indent << "turn_signal: ";
    s << std::endl;
    Printer< ::my_msgs::TurnSignal_<ContainerAllocator> >::stream(s, indent + "  ", v.turn_signal);
    s << indent << "high_beam: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.high_beam);
    s << indent << "low_beam: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.low_beam);
    s << indent << "horn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horn);
    s << indent << "emergency_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_light);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_COMMON_VEHICLESIGNAL_H
