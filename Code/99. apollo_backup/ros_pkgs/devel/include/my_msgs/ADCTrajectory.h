// Generated by gencpp from file my_msgs/ADCTrajectory.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_ADCTRAJECTORY_H
#define MY_MSGS_MESSAGE_ADCTRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <my_msgs/Header.h>
#include <my_msgs/TrajectoryPoint.h>
#include <my_msgs/Estop.h>
#include <my_msgs/PathPoint.h>
#include <my_msgs/Chassis_GearPosition.h>
#include <my_msgs/DecisionResult.h>
#include <my_msgs/LatencyStats.h>
#include <my_msgs/Header.h>
#include <my_msgs/Planning_Debug.h>

namespace my_msgs
{
template <class ContainerAllocator>
struct ADCTrajectory_
{
  typedef ADCTrajectory_<ContainerAllocator> Type;

  ADCTrajectory_()
    : header()
    , total_path_length(0.0)
    , total_path_time(0.0)
    , trajectory_point()
    , estop()
    , path_point()
    , is_replan(false)
    , gear()
    , decision()
    , latency_stats()
    , routing_header()
    , debug()  {
    }
  ADCTrajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , total_path_length(0.0)
    , total_path_time(0.0)
    , trajectory_point(_alloc)
    , estop(_alloc)
    , path_point(_alloc)
    , is_replan(false)
    , gear(_alloc)
    , decision(_alloc)
    , latency_stats(_alloc)
    , routing_header(_alloc)
    , debug(_alloc)  {
  (void)_alloc;
    }



   typedef  ::my_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _total_path_length_type;
  _total_path_length_type total_path_length;

   typedef double _total_path_time_type;
  _total_path_time_type total_path_time;

   typedef std::vector< ::my_msgs::TrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::my_msgs::TrajectoryPoint_<ContainerAllocator> >::other >  _trajectory_point_type;
  _trajectory_point_type trajectory_point;

   typedef  ::my_msgs::Estop_<ContainerAllocator>  _estop_type;
  _estop_type estop;

   typedef  ::my_msgs::PathPoint_<ContainerAllocator>  _path_point_type;
  _path_point_type path_point;

   typedef uint8_t _is_replan_type;
  _is_replan_type is_replan;

   typedef  ::my_msgs::Chassis_GearPosition_<ContainerAllocator>  _gear_type;
  _gear_type gear;

   typedef  ::my_msgs::DecisionResult_<ContainerAllocator>  _decision_type;
  _decision_type decision;

   typedef  ::my_msgs::LatencyStats_<ContainerAllocator>  _latency_stats_type;
  _latency_stats_type latency_stats;

   typedef  ::my_msgs::Header_<ContainerAllocator>  _routing_header_type;
  _routing_header_type routing_header;

   typedef  ::my_msgs::Planning_Debug_<ContainerAllocator>  _debug_type;
  _debug_type debug;




  typedef boost::shared_ptr< ::my_msgs::ADCTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::ADCTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct ADCTrajectory_

typedef ::my_msgs::ADCTrajectory_<std::allocator<void> > ADCTrajectory;

typedef boost::shared_ptr< ::my_msgs::ADCTrajectory > ADCTrajectoryPtr;
typedef boost::shared_ptr< ::my_msgs::ADCTrajectory const> ADCTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::ADCTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::ADCTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ADCTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ADCTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ADCTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ADCTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ADCTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ADCTrajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05ebe3fe80da9ba7d85947b2055d8e92";
  }

  static const char* value(const ::my_msgs::ADCTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05ebe3fe80da9ba7ULL;
  static const uint64_t static_value2 = 0xd85947b2055d8e92ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/ADCTrajectory";
  }

  static const char* value(const ::my_msgs::ADCTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::ADCTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Header header\n\
float64 total_path_length\n\
float64 total_path_time\n\
my_msgs/TrajectoryPoint[] trajectory_point\n\
my_msgs/Estop estop\n\
my_msgs/PathPoint path_point\n\
bool is_replan\n\
my_msgs/Chassis_GearPosition gear \n\
my_msgs/DecisionResult decision\n\
my_msgs/LatencyStats latency_stats\n\
my_msgs/Header routing_header\n\
my_msgs/Planning_Debug debug\n\
================================================================================\n\
MSG: my_msgs/Header\n\
float64 timestamp_sec\n\
string module_name\n\
uint32 sequence_num\n\
uint32 lidar_timestamp\n\
uint32 camera_timestamp\n\
uint32 radar_timestamp\n\
uint32 version\n\
my_msgs/Status status\n\
\n\
================================================================================\n\
MSG: my_msgs/Status\n\
int32 error_code\n\
\n\
================================================================================\n\
MSG: my_msgs/TrajectoryPoint\n\
my_msgs/PathPoint path_point\n\
float64 v\n\
float64 a\n\
float64 relative_time\n\
================================================================================\n\
MSG: my_msgs/PathPoint\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 theta\n\
float64 kappa\n\
float64 s\n\
float64 dkappa\n\
float64 ddkappa\n\
string  lane_id\n\
float64 x_derivative\n\
float64 y_derivative\n\
================================================================================\n\
MSG: my_msgs/Estop\n\
bool is_estop\n\
string  reason\n\
================================================================================\n\
MSG: my_msgs/Chassis_GearPosition\n\
int32 GEAR_NEUTRAL\n\
int32 GEAR_DRIVE\n\
int32 GEAR_REVERSE\n\
int32 GEAR_PARKING\n\
int32 GEAR_LOW\n\
int32 GEAR_INVALID\n\
int32 GEAR_NONE\n\
================================================================================\n\
MSG: my_msgs/DecisionResult\n\
my_msgs/MainDecision main_decision\n\
my_msgs/ObjectDecisions object_decision\n\
my_msgs/Common_VehicleSignal vehicle_signal\n\
================================================================================\n\
MSG: my_msgs/MainDecision\n\
my_msgs/MainMissionComplete mission_complete\n\
my_msgs/MainNotReady not_ready\n\
my_msgs/MainParking parking\n\
================================================================================\n\
MSG: my_msgs/MainMissionComplete\n\
my_msgs/PointENU stop_point32\n\
float64 stop_heading\n\
================================================================================\n\
MSG: my_msgs/PointENU\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: my_msgs/MainNotReady\n\
string reason\n\
================================================================================\n\
MSG: my_msgs/MainParking\n\
\n\
================================================================================\n\
MSG: my_msgs/ObjectDecisions\n\
my_msgs/ObjectDecision[] decisions\n\
================================================================================\n\
MSG: my_msgs/ObjectDecision\n\
string id\n\
int32 perception_id\n\
my_msgs/ObjectDecisionType object_decision\n\
================================================================================\n\
MSG: my_msgs/ObjectDecisionType\n\
my_msgs/ObjectIgnore ignore\n\
my_msgs/ObjectStop stop\n\
my_msgs/ObjectFollow follow\n\
my_msgs/ObjectYield Yield\n\
my_msgs/ObjectOvertake overtake\n\
my_msgs/ObjectNudge nudge\n\
my_msgs/ObjectSidePass sidepass\n\
my_msgs/ObjectAvoid avoid\n\
================================================================================\n\
MSG: my_msgs/ObjectIgnore\n\
\n\
================================================================================\n\
MSG: my_msgs/ObjectStop\n\
my_msgs/StopReasonCode reason_code\n\
float64 distance_s\n\
my_msgs/PointENU stop_point32\n\
float64 stop_heading\n\
byte[] wait_for_obstacle\n\
================================================================================\n\
MSG: my_msgs/StopReasonCode\n\
int32 STOP_REASON_HEAD_VEHICLE\n\
int32 STOP_REASON_DESTINATION\n\
int32 STOP_REASON_PEDESTRIAN\n\
int32 STOP_REASON_OBSTACLE\n\
int32 STOP_REASON_PREPARKING\n\
int32 STOP_REASON_SIGNAL\n\
int32 STOP_REASON_STOP_SIGN\n\
int32 STOP_REASON_YIELD_SIGN\n\
int32 STOP_REASON_CLEAR_ZONE\n\
int32 STOP_REASON_CROSSWALK\n\
int32 STOP_REASON_CREEPER\n\
int32 STOP_REASON_REFERENCE_END\n\
int32 STOP_REASON_YELLOW_SIGNAL\n\
int32 STOP_REASON_PULL_OVER\n\
================================================================================\n\
MSG: my_msgs/ObjectFollow\n\
float64 distance_s\n\
my_msgs/PointENU fence_point32\n\
float64 fence_heading\n\
================================================================================\n\
MSG: my_msgs/ObjectYield\n\
float64 distance_s\n\
my_msgs/PointENU fence_point32\n\
float64 fence_heading\n\
float64 time_buffer\n\
================================================================================\n\
MSG: my_msgs/ObjectOvertake\n\
float64 distance_s\n\
my_msgs/PointENU fence_point32\n\
float64 fence_heading\n\
float64 time_buffer\n\
================================================================================\n\
MSG: my_msgs/ObjectNudge\n\
my_msgs/NudgeType type\n\
float64 distance_l\n\
================================================================================\n\
MSG: my_msgs/NudgeType\n\
int32 LEFT_NUDGE\n\
int32 RIGHT_NUDGE\n\
int32 NO_NUDGE\n\
================================================================================\n\
MSG: my_msgs/ObjectSidePass\n\
my_msgs/SidePassType type\n\
================================================================================\n\
MSG: my_msgs/SidePassType\n\
int32 LEFT\n\
int32 RIGHT\n\
================================================================================\n\
MSG: my_msgs/ObjectAvoid\n\
\n\
================================================================================\n\
MSG: my_msgs/Common_VehicleSignal\n\
my_msgs/TurnSignal turn_signal\n\
bool high_beam\n\
bool low_beam\n\
bool horn\n\
bool emergency_light\n\
================================================================================\n\
MSG: my_msgs/TurnSignal\n\
int32 TURN_NONE\n\
int32 TURN_LEFT\n\
int32 TURN_RIGHT\n\
================================================================================\n\
MSG: my_msgs/LatencyStats\n\
float64 total_time_ms\n\
float64[] controller_time_ms\n\
bool total_time_exceeded\n\
\n\
================================================================================\n\
MSG: my_msgs/Planning_Debug\n\
my_msgs/PlanningData planning_data\n\
================================================================================\n\
MSG: my_msgs/PlanningData\n\
my_msgs/LocalizationEstimate adc_position\n\
my_msgs/Chassis chassis\n\
my_msgs/TrajectoryPoint init_point\n\
\n\
\n\
================================================================================\n\
MSG: my_msgs/LocalizationEstimate\n\
my_msgs/Header header\n\
my_msgs/Pose pose\n\
float64 measurement_time\n\
================================================================================\n\
MSG: my_msgs/Pose\n\
my_msgs/PointENU position\n\
my_msgs/Quaternion orientation\n\
my_msgs/Point3D linear_velocity\n\
my_msgs/Point3D linear_accelration\n\
my_msgs/Point3D angular_velocity\n\
float64 heading\n\
my_msgs/Point3D linear_acceleration_vrf\n\
my_msgs/Point3D angular_velocity_vrf\n\
my_msgs/Point3D euler_angles\n\
================================================================================\n\
MSG: my_msgs/Quaternion\n\
float64 qx\n\
float64 qy\n\
float64 qz\n\
float64 qw\n\
================================================================================\n\
MSG: my_msgs/Point3D\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: my_msgs/Chassis\n\
bool engine_started\n\
float64 engine_rpm\n\
float64 speed_mps\n\
float64 odometer_m\n\
int32 fuel_range_m\n\
float64 throttle_percentage\n\
float64 brake_percentage\n\
float64 steering_percentage\n\
float64 steering_torque_nm\n\
bool parking_brake\n\
bool high_beam_signal\n\
bool low_beam_signal\n\
bool left_turn_signal\n\
bool right_turn_signal\n\
bool horn\n\
bool wiper\n\
bool disengage_status\n\
uint8 driving_mode \n\
uint8 error_code  \n\
uint8 gear_location  \n\
float64 steering_timestamp\n\
my_msgs/Header header\n\
int32 chassis_error_mask\n\
my_msgs/Common_VehicleSignal signal  \n\
my_msgs/Chassis_ChassisGPS chassis_gps  \n\
my_msgs/Common_EngageAdvise engage_advice  \n\
================================================================================\n\
MSG: my_msgs/Chassis_ChassisGPS\n\
float64 latitude\n\
float64 longitude\n\
bool gps_valid\n\
int32 year\n\
int32 month\n\
int32 day\n\
int32 hours\n\
int32 minutes\n\
int32 seconds\n\
float64 compass_direction\n\
float64 pdop\n\
bool is_gps_fault\n\
bool is_inferred\n\
float64 altitude\n\
float64 heading\n\
float64 hdop\n\
float64 vdop\n\
uint8 quality\n\
int32 num_satellites\n\
float64 gps_speed\n\
================================================================================\n\
MSG: my_msgs/Common_EngageAdvise\n\
uint8 advice\n\
string reason\n\
";
  }

  static const char* value(const ::my_msgs::ADCTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::ADCTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.total_path_length);
      stream.next(m.total_path_time);
      stream.next(m.trajectory_point);
      stream.next(m.estop);
      stream.next(m.path_point);
      stream.next(m.is_replan);
      stream.next(m.gear);
      stream.next(m.decision);
      stream.next(m.latency_stats);
      stream.next(m.routing_header);
      stream.next(m.debug);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ADCTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::ADCTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::ADCTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::my_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "total_path_length: ";
    Printer<double>::stream(s, indent + "  ", v.total_path_length);
    s << indent << "total_path_time: ";
    Printer<double>::stream(s, indent + "  ", v.total_path_time);
    s << indent << "trajectory_point[]" << std::endl;
    for (size_t i = 0; i < v.trajectory_point.size(); ++i)
    {
      s << indent << "  trajectory_point[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::my_msgs::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory_point[i]);
    }
    s << indent << "estop: ";
    s << std::endl;
    Printer< ::my_msgs::Estop_<ContainerAllocator> >::stream(s, indent + "  ", v.estop);
    s << indent << "path_point: ";
    s << std::endl;
    Printer< ::my_msgs::PathPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.path_point);
    s << indent << "is_replan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_replan);
    s << indent << "gear: ";
    s << std::endl;
    Printer< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.gear);
    s << indent << "decision: ";
    s << std::endl;
    Printer< ::my_msgs::DecisionResult_<ContainerAllocator> >::stream(s, indent + "  ", v.decision);
    s << indent << "latency_stats: ";
    s << std::endl;
    Printer< ::my_msgs::LatencyStats_<ContainerAllocator> >::stream(s, indent + "  ", v.latency_stats);
    s << indent << "routing_header: ";
    s << std::endl;
    Printer< ::my_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.routing_header);
    s << indent << "debug: ";
    s << std::endl;
    Printer< ::my_msgs::Planning_Debug_<ContainerAllocator> >::stream(s, indent + "  ", v.debug);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_ADCTRAJECTORY_H
