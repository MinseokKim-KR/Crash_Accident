// Generated by gencpp from file my_msgs/Chassis_DrivingMode.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_CHASSIS_DRIVINGMODE_H
#define MY_MSGS_MESSAGE_CHASSIS_DRIVINGMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct Chassis_DrivingMode_
{
  typedef Chassis_DrivingMode_<ContainerAllocator> Type;

  Chassis_DrivingMode_()
    : COMPLETE_MANUAL(0)
    , COMPLETE_AUTO_DRIVE(0)
    , AUTO_STEER_ONLY(0)
    , AUTO_SPEED_ONLY(0)
    , EMERGENCY_MODE(0)  {
    }
  Chassis_DrivingMode_(const ContainerAllocator& _alloc)
    : COMPLETE_MANUAL(0)
    , COMPLETE_AUTO_DRIVE(0)
    , AUTO_STEER_ONLY(0)
    , AUTO_SPEED_ONLY(0)
    , EMERGENCY_MODE(0)  {
  (void)_alloc;
    }



   typedef int32_t _COMPLETE_MANUAL_type;
  _COMPLETE_MANUAL_type COMPLETE_MANUAL;

   typedef int32_t _COMPLETE_AUTO_DRIVE_type;
  _COMPLETE_AUTO_DRIVE_type COMPLETE_AUTO_DRIVE;

   typedef int32_t _AUTO_STEER_ONLY_type;
  _AUTO_STEER_ONLY_type AUTO_STEER_ONLY;

   typedef int32_t _AUTO_SPEED_ONLY_type;
  _AUTO_SPEED_ONLY_type AUTO_SPEED_ONLY;

   typedef int32_t _EMERGENCY_MODE_type;
  _EMERGENCY_MODE_type EMERGENCY_MODE;




  typedef boost::shared_ptr< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> const> ConstPtr;

}; // struct Chassis_DrivingMode_

typedef ::my_msgs::Chassis_DrivingMode_<std::allocator<void> > Chassis_DrivingMode;

typedef boost::shared_ptr< ::my_msgs::Chassis_DrivingMode > Chassis_DrivingModePtr;
typedef boost::shared_ptr< ::my_msgs::Chassis_DrivingMode const> Chassis_DrivingModeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25264c128a7e7f9ed13d6c02e1e8e77f";
  }

  static const char* value(const ::my_msgs::Chassis_DrivingMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25264c128a7e7f9eULL;
  static const uint64_t static_value2 = 0xd13d6c02e1e8e77fULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Chassis_DrivingMode";
  }

  static const char* value(const ::my_msgs::Chassis_DrivingMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 COMPLETE_MANUAL\n\
int32 COMPLETE_AUTO_DRIVE\n\
int32 AUTO_STEER_ONLY\n\
int32 AUTO_SPEED_ONLY\n\
int32 EMERGENCY_MODE\n\
";
  }

  static const char* value(const ::my_msgs::Chassis_DrivingMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.COMPLETE_MANUAL);
      stream.next(m.COMPLETE_AUTO_DRIVE);
      stream.next(m.AUTO_STEER_ONLY);
      stream.next(m.AUTO_SPEED_ONLY);
      stream.next(m.EMERGENCY_MODE);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Chassis_DrivingMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::Chassis_DrivingMode_<ContainerAllocator>& v)
  {
    s << indent << "COMPLETE_MANUAL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.COMPLETE_MANUAL);
    s << indent << "COMPLETE_AUTO_DRIVE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.COMPLETE_AUTO_DRIVE);
    s << indent << "AUTO_STEER_ONLY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.AUTO_STEER_ONLY);
    s << indent << "AUTO_SPEED_ONLY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.AUTO_SPEED_ONLY);
    s << indent << "EMERGENCY_MODE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.EMERGENCY_MODE);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_CHASSIS_DRIVINGMODE_H
