// Generated by gencpp from file my_msgs/StopReasonCode.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_STOPREASONCODE_H
#define MY_MSGS_MESSAGE_STOPREASONCODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct StopReasonCode_
{
  typedef StopReasonCode_<ContainerAllocator> Type;

  StopReasonCode_()
    : STOP_REASON_HEAD_VEHICLE(0)
    , STOP_REASON_DESTINATION(0)
    , STOP_REASON_PEDESTRIAN(0)
    , STOP_REASON_OBSTACLE(0)
    , STOP_REASON_PREPARKING(0)
    , STOP_REASON_SIGNAL(0)
    , STOP_REASON_STOP_SIGN(0)
    , STOP_REASON_YIELD_SIGN(0)
    , STOP_REASON_CLEAR_ZONE(0)
    , STOP_REASON_CROSSWALK(0)
    , STOP_REASON_CREEPER(0)
    , STOP_REASON_REFERENCE_END(0)
    , STOP_REASON_YELLOW_SIGNAL(0)
    , STOP_REASON_PULL_OVER(0)  {
    }
  StopReasonCode_(const ContainerAllocator& _alloc)
    : STOP_REASON_HEAD_VEHICLE(0)
    , STOP_REASON_DESTINATION(0)
    , STOP_REASON_PEDESTRIAN(0)
    , STOP_REASON_OBSTACLE(0)
    , STOP_REASON_PREPARKING(0)
    , STOP_REASON_SIGNAL(0)
    , STOP_REASON_STOP_SIGN(0)
    , STOP_REASON_YIELD_SIGN(0)
    , STOP_REASON_CLEAR_ZONE(0)
    , STOP_REASON_CROSSWALK(0)
    , STOP_REASON_CREEPER(0)
    , STOP_REASON_REFERENCE_END(0)
    , STOP_REASON_YELLOW_SIGNAL(0)
    , STOP_REASON_PULL_OVER(0)  {
  (void)_alloc;
    }



   typedef int32_t _STOP_REASON_HEAD_VEHICLE_type;
  _STOP_REASON_HEAD_VEHICLE_type STOP_REASON_HEAD_VEHICLE;

   typedef int32_t _STOP_REASON_DESTINATION_type;
  _STOP_REASON_DESTINATION_type STOP_REASON_DESTINATION;

   typedef int32_t _STOP_REASON_PEDESTRIAN_type;
  _STOP_REASON_PEDESTRIAN_type STOP_REASON_PEDESTRIAN;

   typedef int32_t _STOP_REASON_OBSTACLE_type;
  _STOP_REASON_OBSTACLE_type STOP_REASON_OBSTACLE;

   typedef int32_t _STOP_REASON_PREPARKING_type;
  _STOP_REASON_PREPARKING_type STOP_REASON_PREPARKING;

   typedef int32_t _STOP_REASON_SIGNAL_type;
  _STOP_REASON_SIGNAL_type STOP_REASON_SIGNAL;

   typedef int32_t _STOP_REASON_STOP_SIGN_type;
  _STOP_REASON_STOP_SIGN_type STOP_REASON_STOP_SIGN;

   typedef int32_t _STOP_REASON_YIELD_SIGN_type;
  _STOP_REASON_YIELD_SIGN_type STOP_REASON_YIELD_SIGN;

   typedef int32_t _STOP_REASON_CLEAR_ZONE_type;
  _STOP_REASON_CLEAR_ZONE_type STOP_REASON_CLEAR_ZONE;

   typedef int32_t _STOP_REASON_CROSSWALK_type;
  _STOP_REASON_CROSSWALK_type STOP_REASON_CROSSWALK;

   typedef int32_t _STOP_REASON_CREEPER_type;
  _STOP_REASON_CREEPER_type STOP_REASON_CREEPER;

   typedef int32_t _STOP_REASON_REFERENCE_END_type;
  _STOP_REASON_REFERENCE_END_type STOP_REASON_REFERENCE_END;

   typedef int32_t _STOP_REASON_YELLOW_SIGNAL_type;
  _STOP_REASON_YELLOW_SIGNAL_type STOP_REASON_YELLOW_SIGNAL;

   typedef int32_t _STOP_REASON_PULL_OVER_type;
  _STOP_REASON_PULL_OVER_type STOP_REASON_PULL_OVER;




  typedef boost::shared_ptr< ::my_msgs::StopReasonCode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::StopReasonCode_<ContainerAllocator> const> ConstPtr;

}; // struct StopReasonCode_

typedef ::my_msgs::StopReasonCode_<std::allocator<void> > StopReasonCode;

typedef boost::shared_ptr< ::my_msgs::StopReasonCode > StopReasonCodePtr;
typedef boost::shared_ptr< ::my_msgs::StopReasonCode const> StopReasonCodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::StopReasonCode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::StopReasonCode_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::StopReasonCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::StopReasonCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::StopReasonCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::StopReasonCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::StopReasonCode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::StopReasonCode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::StopReasonCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89a29d5cca6cc030537f5f616b22288c";
  }

  static const char* value(const ::my_msgs::StopReasonCode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89a29d5cca6cc030ULL;
  static const uint64_t static_value2 = 0x537f5f616b22288cULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::StopReasonCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/StopReasonCode";
  }

  static const char* value(const ::my_msgs::StopReasonCode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::StopReasonCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 STOP_REASON_HEAD_VEHICLE\n\
int32 STOP_REASON_DESTINATION\n\
int32 STOP_REASON_PEDESTRIAN\n\
int32 STOP_REASON_OBSTACLE\n\
int32 STOP_REASON_PREPARKING\n\
int32 STOP_REASON_SIGNAL\n\
int32 STOP_REASON_STOP_SIGN\n\
int32 STOP_REASON_YIELD_SIGN\n\
int32 STOP_REASON_CLEAR_ZONE\n\
int32 STOP_REASON_CROSSWALK\n\
int32 STOP_REASON_CREEPER\n\
int32 STOP_REASON_REFERENCE_END\n\
int32 STOP_REASON_YELLOW_SIGNAL\n\
int32 STOP_REASON_PULL_OVER\n\
";
  }

  static const char* value(const ::my_msgs::StopReasonCode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::StopReasonCode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.STOP_REASON_HEAD_VEHICLE);
      stream.next(m.STOP_REASON_DESTINATION);
      stream.next(m.STOP_REASON_PEDESTRIAN);
      stream.next(m.STOP_REASON_OBSTACLE);
      stream.next(m.STOP_REASON_PREPARKING);
      stream.next(m.STOP_REASON_SIGNAL);
      stream.next(m.STOP_REASON_STOP_SIGN);
      stream.next(m.STOP_REASON_YIELD_SIGN);
      stream.next(m.STOP_REASON_CLEAR_ZONE);
      stream.next(m.STOP_REASON_CROSSWALK);
      stream.next(m.STOP_REASON_CREEPER);
      stream.next(m.STOP_REASON_REFERENCE_END);
      stream.next(m.STOP_REASON_YELLOW_SIGNAL);
      stream.next(m.STOP_REASON_PULL_OVER);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StopReasonCode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::StopReasonCode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::StopReasonCode_<ContainerAllocator>& v)
  {
    s << indent << "STOP_REASON_HEAD_VEHICLE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_HEAD_VEHICLE);
    s << indent << "STOP_REASON_DESTINATION: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_DESTINATION);
    s << indent << "STOP_REASON_PEDESTRIAN: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_PEDESTRIAN);
    s << indent << "STOP_REASON_OBSTACLE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_OBSTACLE);
    s << indent << "STOP_REASON_PREPARKING: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_PREPARKING);
    s << indent << "STOP_REASON_SIGNAL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_SIGNAL);
    s << indent << "STOP_REASON_STOP_SIGN: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_STOP_SIGN);
    s << indent << "STOP_REASON_YIELD_SIGN: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_YIELD_SIGN);
    s << indent << "STOP_REASON_CLEAR_ZONE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_CLEAR_ZONE);
    s << indent << "STOP_REASON_CROSSWALK: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_CROSSWALK);
    s << indent << "STOP_REASON_CREEPER: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_CREEPER);
    s << indent << "STOP_REASON_REFERENCE_END: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_REFERENCE_END);
    s << indent << "STOP_REASON_YELLOW_SIGNAL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_YELLOW_SIGNAL);
    s << indent << "STOP_REASON_PULL_OVER: ";
    Printer<int32_t>::stream(s, indent + "  ", v.STOP_REASON_PULL_OVER);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_STOPREASONCODE_H
