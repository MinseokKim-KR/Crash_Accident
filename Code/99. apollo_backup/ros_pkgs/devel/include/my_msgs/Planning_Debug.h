// Generated by gencpp from file my_msgs/Planning_Debug.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_PLANNING_DEBUG_H
#define MY_MSGS_MESSAGE_PLANNING_DEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <my_msgs/PlanningData.h>

namespace my_msgs
{
template <class ContainerAllocator>
struct Planning_Debug_
{
  typedef Planning_Debug_<ContainerAllocator> Type;

  Planning_Debug_()
    : planning_data()  {
    }
  Planning_Debug_(const ContainerAllocator& _alloc)
    : planning_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::my_msgs::PlanningData_<ContainerAllocator>  _planning_data_type;
  _planning_data_type planning_data;




  typedef boost::shared_ptr< ::my_msgs::Planning_Debug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::Planning_Debug_<ContainerAllocator> const> ConstPtr;

}; // struct Planning_Debug_

typedef ::my_msgs::Planning_Debug_<std::allocator<void> > Planning_Debug;

typedef boost::shared_ptr< ::my_msgs::Planning_Debug > Planning_DebugPtr;
typedef boost::shared_ptr< ::my_msgs::Planning_Debug const> Planning_DebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::Planning_Debug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::Planning_Debug_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Planning_Debug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Planning_Debug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Planning_Debug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Planning_Debug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Planning_Debug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Planning_Debug_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::Planning_Debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94aa46f221d13d08e87fbfabcf6289ee";
  }

  static const char* value(const ::my_msgs::Planning_Debug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94aa46f221d13d08ULL;
  static const uint64_t static_value2 = 0xe87fbfabcf6289eeULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::Planning_Debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Planning_Debug";
  }

  static const char* value(const ::my_msgs::Planning_Debug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::Planning_Debug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/PlanningData planning_data\n\
================================================================================\n\
MSG: my_msgs/PlanningData\n\
my_msgs/LocalizationEstimate adc_position\n\
my_msgs/Chassis chassis\n\
my_msgs/TrajectoryPoint init_point\n\
\n\
\n\
================================================================================\n\
MSG: my_msgs/LocalizationEstimate\n\
my_msgs/Header header\n\
my_msgs/Pose pose\n\
float64 measurement_time\n\
================================================================================\n\
MSG: my_msgs/Header\n\
float64 timestamp_sec\n\
string module_name\n\
uint32 sequence_num\n\
uint32 lidar_timestamp\n\
uint32 camera_timestamp\n\
uint32 radar_timestamp\n\
uint32 version\n\
my_msgs/Status status\n\
\n\
================================================================================\n\
MSG: my_msgs/Status\n\
int32 error_code\n\
\n\
================================================================================\n\
MSG: my_msgs/Pose\n\
my_msgs/PointENU position\n\
my_msgs/Quaternion orientation\n\
my_msgs/Point3D linear_velocity\n\
my_msgs/Point3D linear_accelration\n\
my_msgs/Point3D angular_velocity\n\
float64 heading\n\
my_msgs/Point3D linear_acceleration_vrf\n\
my_msgs/Point3D angular_velocity_vrf\n\
my_msgs/Point3D euler_angles\n\
================================================================================\n\
MSG: my_msgs/PointENU\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: my_msgs/Quaternion\n\
float64 qx\n\
float64 qy\n\
float64 qz\n\
float64 qw\n\
================================================================================\n\
MSG: my_msgs/Point3D\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: my_msgs/Chassis\n\
bool engine_started\n\
float64 engine_rpm\n\
float64 speed_mps\n\
float64 odometer_m\n\
int32 fuel_range_m\n\
float64 throttle_percentage\n\
float64 brake_percentage\n\
float64 steering_percentage\n\
float64 steering_torque_nm\n\
bool parking_brake\n\
bool high_beam_signal\n\
bool low_beam_signal\n\
bool left_turn_signal\n\
bool right_turn_signal\n\
bool horn\n\
bool wiper\n\
bool disengage_status\n\
uint8 driving_mode \n\
uint8 error_code  \n\
uint8 gear_location  \n\
float64 steering_timestamp\n\
my_msgs/Header header\n\
int32 chassis_error_mask\n\
my_msgs/Common_VehicleSignal signal  \n\
my_msgs/Chassis_ChassisGPS chassis_gps  \n\
my_msgs/Common_EngageAdvise engage_advice  \n\
================================================================================\n\
MSG: my_msgs/Common_VehicleSignal\n\
my_msgs/TurnSignal turn_signal\n\
bool high_beam\n\
bool low_beam\n\
bool horn\n\
bool emergency_light\n\
================================================================================\n\
MSG: my_msgs/TurnSignal\n\
int32 TURN_NONE\n\
int32 TURN_LEFT\n\
int32 TURN_RIGHT\n\
================================================================================\n\
MSG: my_msgs/Chassis_ChassisGPS\n\
float64 latitude\n\
float64 longitude\n\
bool gps_valid\n\
int32 year\n\
int32 month\n\
int32 day\n\
int32 hours\n\
int32 minutes\n\
int32 seconds\n\
float64 compass_direction\n\
float64 pdop\n\
bool is_gps_fault\n\
bool is_inferred\n\
float64 altitude\n\
float64 heading\n\
float64 hdop\n\
float64 vdop\n\
uint8 quality\n\
int32 num_satellites\n\
float64 gps_speed\n\
================================================================================\n\
MSG: my_msgs/Common_EngageAdvise\n\
uint8 advice\n\
string reason\n\
================================================================================\n\
MSG: my_msgs/TrajectoryPoint\n\
my_msgs/PathPoint path_point\n\
float64 v\n\
float64 a\n\
float64 relative_time\n\
================================================================================\n\
MSG: my_msgs/PathPoint\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 theta\n\
float64 kappa\n\
float64 s\n\
float64 dkappa\n\
float64 ddkappa\n\
string  lane_id\n\
float64 x_derivative\n\
float64 y_derivative\n\
";
  }

  static const char* value(const ::my_msgs::Planning_Debug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::Planning_Debug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.planning_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Planning_Debug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::Planning_Debug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::Planning_Debug_<ContainerAllocator>& v)
  {
    s << indent << "planning_data: ";
    s << std::endl;
    Printer< ::my_msgs::PlanningData_<ContainerAllocator> >::stream(s, indent + "  ", v.planning_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_PLANNING_DEBUG_H
