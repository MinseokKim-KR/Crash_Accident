// Generated by gencpp from file my_msgs/ContiRadarObs.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_CONTIRADAROBS_H
#define MY_MSGS_MESSAGE_CONTIRADAROBS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <my_msgs/Header.h>

namespace my_msgs
{
template <class ContainerAllocator>
struct ContiRadarObs_
{
  typedef ContiRadarObs_<ContainerAllocator> Type;

  ContiRadarObs_()
    : header()
    , clusterortrack(false)
    , obstacle_id(0)
    , longitude_dist(0.0)
    , lateral_dist(0.0)
    , longitude_vel(0.0)
    , lateral_vel(0.0)
    , rcs(0.0)
    , dynprop(0)
    , longitude_dist_rms(0.0)
    , lateral_dist_rms(0.0)
    , longitude_vel_rms(0.0)
    , lateral_vel_rms(0.0)
    , probexist(0.0)
    , meas_state(0)
    , longitude_accel(0.0)
    , lateral_accel(0.0)
    , oritation_angle(0.0)
    , longitude_accel_rms(0.0)
    , lateral_accel_rms(0.0)
    , oritation_angle_rms(0.0)
    , length(0.0)
    , width(0.0)
    , obstacle_class(0)  {
    }
  ContiRadarObs_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , clusterortrack(false)
    , obstacle_id(0)
    , longitude_dist(0.0)
    , lateral_dist(0.0)
    , longitude_vel(0.0)
    , lateral_vel(0.0)
    , rcs(0.0)
    , dynprop(0)
    , longitude_dist_rms(0.0)
    , lateral_dist_rms(0.0)
    , longitude_vel_rms(0.0)
    , lateral_vel_rms(0.0)
    , probexist(0.0)
    , meas_state(0)
    , longitude_accel(0.0)
    , lateral_accel(0.0)
    , oritation_angle(0.0)
    , longitude_accel_rms(0.0)
    , lateral_accel_rms(0.0)
    , oritation_angle_rms(0.0)
    , length(0.0)
    , width(0.0)
    , obstacle_class(0)  {
  (void)_alloc;
    }



   typedef  ::my_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _clusterortrack_type;
  _clusterortrack_type clusterortrack;

   typedef int32_t _obstacle_id_type;
  _obstacle_id_type obstacle_id;

   typedef double _longitude_dist_type;
  _longitude_dist_type longitude_dist;

   typedef double _lateral_dist_type;
  _lateral_dist_type lateral_dist;

   typedef double _longitude_vel_type;
  _longitude_vel_type longitude_vel;

   typedef double _lateral_vel_type;
  _lateral_vel_type lateral_vel;

   typedef double _rcs_type;
  _rcs_type rcs;

   typedef int32_t _dynprop_type;
  _dynprop_type dynprop;

   typedef double _longitude_dist_rms_type;
  _longitude_dist_rms_type longitude_dist_rms;

   typedef double _lateral_dist_rms_type;
  _lateral_dist_rms_type lateral_dist_rms;

   typedef double _longitude_vel_rms_type;
  _longitude_vel_rms_type longitude_vel_rms;

   typedef double _lateral_vel_rms_type;
  _lateral_vel_rms_type lateral_vel_rms;

   typedef double _probexist_type;
  _probexist_type probexist;

   typedef int32_t _meas_state_type;
  _meas_state_type meas_state;

   typedef double _longitude_accel_type;
  _longitude_accel_type longitude_accel;

   typedef double _lateral_accel_type;
  _lateral_accel_type lateral_accel;

   typedef double _oritation_angle_type;
  _oritation_angle_type oritation_angle;

   typedef double _longitude_accel_rms_type;
  _longitude_accel_rms_type longitude_accel_rms;

   typedef double _lateral_accel_rms_type;
  _lateral_accel_rms_type lateral_accel_rms;

   typedef double _oritation_angle_rms_type;
  _oritation_angle_rms_type oritation_angle_rms;

   typedef double _length_type;
  _length_type length;

   typedef double _width_type;
  _width_type width;

   typedef int32_t _obstacle_class_type;
  _obstacle_class_type obstacle_class;




  typedef boost::shared_ptr< ::my_msgs::ContiRadarObs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::ContiRadarObs_<ContainerAllocator> const> ConstPtr;

}; // struct ContiRadarObs_

typedef ::my_msgs::ContiRadarObs_<std::allocator<void> > ContiRadarObs;

typedef boost::shared_ptr< ::my_msgs::ContiRadarObs > ContiRadarObsPtr;
typedef boost::shared_ptr< ::my_msgs::ContiRadarObs const> ContiRadarObsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::ContiRadarObs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::ContiRadarObs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ContiRadarObs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ContiRadarObs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ContiRadarObs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ContiRadarObs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ContiRadarObs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ContiRadarObs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::ContiRadarObs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f525902e42362ed3d16ddff5af37dd72";
  }

  static const char* value(const ::my_msgs::ContiRadarObs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf525902e42362ed3ULL;
  static const uint64_t static_value2 = 0xd16ddff5af37dd72ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::ContiRadarObs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/ContiRadarObs";
  }

  static const char* value(const ::my_msgs::ContiRadarObs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::ContiRadarObs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Header header\n\
bool clusterortrack\n\
int32 obstacle_id\n\
float64 longitude_dist\n\
float64 lateral_dist\n\
float64 longitude_vel\n\
float64 lateral_vel\n\
float64 rcs\n\
int32 dynprop\n\
float64 longitude_dist_rms\n\
float64 lateral_dist_rms\n\
float64 longitude_vel_rms\n\
float64 lateral_vel_rms\n\
float64 probexist\n\
int32 meas_state\n\
float64 longitude_accel\n\
float64 lateral_accel\n\
float64 oritation_angle\n\
float64 longitude_accel_rms\n\
float64 lateral_accel_rms\n\
float64 oritation_angle_rms\n\
float64 length\n\
float64 width\n\
int32 obstacle_class\n\
================================================================================\n\
MSG: my_msgs/Header\n\
float64 timestamp_sec\n\
string module_name\n\
uint32 sequence_num\n\
uint32 lidar_timestamp\n\
uint32 camera_timestamp\n\
uint32 radar_timestamp\n\
uint32 version\n\
my_msgs/Status status\n\
\n\
================================================================================\n\
MSG: my_msgs/Status\n\
int32 error_code\n\
";
  }

  static const char* value(const ::my_msgs::ContiRadarObs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::ContiRadarObs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.clusterortrack);
      stream.next(m.obstacle_id);
      stream.next(m.longitude_dist);
      stream.next(m.lateral_dist);
      stream.next(m.longitude_vel);
      stream.next(m.lateral_vel);
      stream.next(m.rcs);
      stream.next(m.dynprop);
      stream.next(m.longitude_dist_rms);
      stream.next(m.lateral_dist_rms);
      stream.next(m.longitude_vel_rms);
      stream.next(m.lateral_vel_rms);
      stream.next(m.probexist);
      stream.next(m.meas_state);
      stream.next(m.longitude_accel);
      stream.next(m.lateral_accel);
      stream.next(m.oritation_angle);
      stream.next(m.longitude_accel_rms);
      stream.next(m.lateral_accel_rms);
      stream.next(m.oritation_angle_rms);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.obstacle_class);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ContiRadarObs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::ContiRadarObs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::ContiRadarObs_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::my_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "clusterortrack: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clusterortrack);
    s << indent << "obstacle_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obstacle_id);
    s << indent << "longitude_dist: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_dist);
    s << indent << "lateral_dist: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_dist);
    s << indent << "longitude_vel: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_vel);
    s << indent << "lateral_vel: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_vel);
    s << indent << "rcs: ";
    Printer<double>::stream(s, indent + "  ", v.rcs);
    s << indent << "dynprop: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dynprop);
    s << indent << "longitude_dist_rms: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_dist_rms);
    s << indent << "lateral_dist_rms: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_dist_rms);
    s << indent << "longitude_vel_rms: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_vel_rms);
    s << indent << "lateral_vel_rms: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_vel_rms);
    s << indent << "probexist: ";
    Printer<double>::stream(s, indent + "  ", v.probexist);
    s << indent << "meas_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.meas_state);
    s << indent << "longitude_accel: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_accel);
    s << indent << "lateral_accel: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_accel);
    s << indent << "oritation_angle: ";
    Printer<double>::stream(s, indent + "  ", v.oritation_angle);
    s << indent << "longitude_accel_rms: ";
    Printer<double>::stream(s, indent + "  ", v.longitude_accel_rms);
    s << indent << "lateral_accel_rms: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_accel_rms);
    s << indent << "oritation_angle_rms: ";
    Printer<double>::stream(s, indent + "  ", v.oritation_angle_rms);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "obstacle_class: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obstacle_class);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_CONTIRADAROBS_H
