// Generated by gencpp from file my_msgs/Chassis_ErrorCode.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_CHASSIS_ERRORCODE_H
#define MY_MSGS_MESSAGE_CHASSIS_ERRORCODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct Chassis_ErrorCode_
{
  typedef Chassis_ErrorCode_<ContainerAllocator> Type;

  Chassis_ErrorCode_()
    : NO_ERROR(0)
    , CMD_NOT_IN_PERIOD(0)
    , CHASSIS_ERROR(0)
    , MANUAL_int32ERVENTION(0)
    , CHASSIS_CAN_NOT_IN_PERIOD(0)
    , UNKNOWN_ERROR(0)  {
    }
  Chassis_ErrorCode_(const ContainerAllocator& _alloc)
    : NO_ERROR(0)
    , CMD_NOT_IN_PERIOD(0)
    , CHASSIS_ERROR(0)
    , MANUAL_int32ERVENTION(0)
    , CHASSIS_CAN_NOT_IN_PERIOD(0)
    , UNKNOWN_ERROR(0)  {
  (void)_alloc;
    }



   typedef int32_t _NO_ERROR_type;
  _NO_ERROR_type NO_ERROR;

   typedef int32_t _CMD_NOT_IN_PERIOD_type;
  _CMD_NOT_IN_PERIOD_type CMD_NOT_IN_PERIOD;

   typedef int32_t _CHASSIS_ERROR_type;
  _CHASSIS_ERROR_type CHASSIS_ERROR;

   typedef int32_t _MANUAL_int32ERVENTION_type;
  _MANUAL_int32ERVENTION_type MANUAL_int32ERVENTION;

   typedef int32_t _CHASSIS_CAN_NOT_IN_PERIOD_type;
  _CHASSIS_CAN_NOT_IN_PERIOD_type CHASSIS_CAN_NOT_IN_PERIOD;

   typedef int32_t _UNKNOWN_ERROR_type;
  _UNKNOWN_ERROR_type UNKNOWN_ERROR;




  typedef boost::shared_ptr< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> const> ConstPtr;

}; // struct Chassis_ErrorCode_

typedef ::my_msgs::Chassis_ErrorCode_<std::allocator<void> > Chassis_ErrorCode;

typedef boost::shared_ptr< ::my_msgs::Chassis_ErrorCode > Chassis_ErrorCodePtr;
typedef boost::shared_ptr< ::my_msgs::Chassis_ErrorCode const> Chassis_ErrorCodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef293f4c10de869b0f2bdec79181d3ce";
  }

  static const char* value(const ::my_msgs::Chassis_ErrorCode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef293f4c10de869bULL;
  static const uint64_t static_value2 = 0x0f2bdec79181d3ceULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Chassis_ErrorCode";
  }

  static const char* value(const ::my_msgs::Chassis_ErrorCode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 NO_ERROR\n\
int32 CMD_NOT_IN_PERIOD\n\
int32 CHASSIS_ERROR\n\
int32 MANUAL_int32ERVENTION\n\
int32 CHASSIS_CAN_NOT_IN_PERIOD\n\
int32 UNKNOWN_ERROR\n\
";
  }

  static const char* value(const ::my_msgs::Chassis_ErrorCode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.NO_ERROR);
      stream.next(m.CMD_NOT_IN_PERIOD);
      stream.next(m.CHASSIS_ERROR);
      stream.next(m.MANUAL_int32ERVENTION);
      stream.next(m.CHASSIS_CAN_NOT_IN_PERIOD);
      stream.next(m.UNKNOWN_ERROR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Chassis_ErrorCode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::Chassis_ErrorCode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::Chassis_ErrorCode_<ContainerAllocator>& v)
  {
    s << indent << "NO_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.NO_ERROR);
    s << indent << "CMD_NOT_IN_PERIOD: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CMD_NOT_IN_PERIOD);
    s << indent << "CHASSIS_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CHASSIS_ERROR);
    s << indent << "MANUAL_int32ERVENTION: ";
    Printer<int32_t>::stream(s, indent + "  ", v.MANUAL_int32ERVENTION);
    s << indent << "CHASSIS_CAN_NOT_IN_PERIOD: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CHASSIS_CAN_NOT_IN_PERIOD);
    s << indent << "UNKNOWN_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.UNKNOWN_ERROR);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_CHASSIS_ERRORCODE_H
