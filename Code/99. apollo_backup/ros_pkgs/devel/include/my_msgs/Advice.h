// Generated by gencpp from file my_msgs/Advice.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_ADVICE_H
#define MY_MSGS_MESSAGE_ADVICE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct Advice_
{
  typedef Advice_<ContainerAllocator> Type;

  Advice_()
    : UNKNOWN(0)
    , DISALLOW_ENGAGE(0)
    , READY_TO_ENGAGE(0)
    , KEEP_ENGAGED(0)
    , PREPARE_DISENGAGE(0)  {
    }
  Advice_(const ContainerAllocator& _alloc)
    : UNKNOWN(0)
    , DISALLOW_ENGAGE(0)
    , READY_TO_ENGAGE(0)
    , KEEP_ENGAGED(0)
    , PREPARE_DISENGAGE(0)  {
  (void)_alloc;
    }



   typedef int32_t _UNKNOWN_type;
  _UNKNOWN_type UNKNOWN;

   typedef int32_t _DISALLOW_ENGAGE_type;
  _DISALLOW_ENGAGE_type DISALLOW_ENGAGE;

   typedef int32_t _READY_TO_ENGAGE_type;
  _READY_TO_ENGAGE_type READY_TO_ENGAGE;

   typedef int32_t _KEEP_ENGAGED_type;
  _KEEP_ENGAGED_type KEEP_ENGAGED;

   typedef int32_t _PREPARE_DISENGAGE_type;
  _PREPARE_DISENGAGE_type PREPARE_DISENGAGE;




  typedef boost::shared_ptr< ::my_msgs::Advice_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::Advice_<ContainerAllocator> const> ConstPtr;

}; // struct Advice_

typedef ::my_msgs::Advice_<std::allocator<void> > Advice;

typedef boost::shared_ptr< ::my_msgs::Advice > AdvicePtr;
typedef boost::shared_ptr< ::my_msgs::Advice const> AdviceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::Advice_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::Advice_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Advice_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Advice_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Advice_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Advice_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Advice_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Advice_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::Advice_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e984a93e40568fe4b1c5ee588fc6541e";
  }

  static const char* value(const ::my_msgs::Advice_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe984a93e40568fe4ULL;
  static const uint64_t static_value2 = 0xb1c5ee588fc6541eULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::Advice_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Advice";
  }

  static const char* value(const ::my_msgs::Advice_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::Advice_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 UNKNOWN\n\
int32 DISALLOW_ENGAGE\n\
int32 READY_TO_ENGAGE\n\
int32 KEEP_ENGAGED\n\
int32 PREPARE_DISENGAGE\n\
";
  }

  static const char* value(const ::my_msgs::Advice_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::Advice_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.UNKNOWN);
      stream.next(m.DISALLOW_ENGAGE);
      stream.next(m.READY_TO_ENGAGE);
      stream.next(m.KEEP_ENGAGED);
      stream.next(m.PREPARE_DISENGAGE);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Advice_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::Advice_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::Advice_<ContainerAllocator>& v)
  {
    s << indent << "UNKNOWN: ";
    Printer<int32_t>::stream(s, indent + "  ", v.UNKNOWN);
    s << indent << "DISALLOW_ENGAGE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.DISALLOW_ENGAGE);
    s << indent << "READY_TO_ENGAGE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.READY_TO_ENGAGE);
    s << indent << "KEEP_ENGAGED: ";
    Printer<int32_t>::stream(s, indent + "  ", v.KEEP_ENGAGED);
    s << indent << "PREPARE_DISENGAGE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PREPARE_DISENGAGE);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_ADVICE_H
