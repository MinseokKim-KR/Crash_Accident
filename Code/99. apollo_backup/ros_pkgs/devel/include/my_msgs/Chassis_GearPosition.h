// Generated by gencpp from file my_msgs/Chassis_GearPosition.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_CHASSIS_GEARPOSITION_H
#define MY_MSGS_MESSAGE_CHASSIS_GEARPOSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct Chassis_GearPosition_
{
  typedef Chassis_GearPosition_<ContainerAllocator> Type;

  Chassis_GearPosition_()
    : GEAR_NEUTRAL(0)
    , GEAR_DRIVE(0)
    , GEAR_REVERSE(0)
    , GEAR_PARKING(0)
    , GEAR_LOW(0)
    , GEAR_INVALID(0)
    , GEAR_NONE(0)  {
    }
  Chassis_GearPosition_(const ContainerAllocator& _alloc)
    : GEAR_NEUTRAL(0)
    , GEAR_DRIVE(0)
    , GEAR_REVERSE(0)
    , GEAR_PARKING(0)
    , GEAR_LOW(0)
    , GEAR_INVALID(0)
    , GEAR_NONE(0)  {
  (void)_alloc;
    }



   typedef int32_t _GEAR_NEUTRAL_type;
  _GEAR_NEUTRAL_type GEAR_NEUTRAL;

   typedef int32_t _GEAR_DRIVE_type;
  _GEAR_DRIVE_type GEAR_DRIVE;

   typedef int32_t _GEAR_REVERSE_type;
  _GEAR_REVERSE_type GEAR_REVERSE;

   typedef int32_t _GEAR_PARKING_type;
  _GEAR_PARKING_type GEAR_PARKING;

   typedef int32_t _GEAR_LOW_type;
  _GEAR_LOW_type GEAR_LOW;

   typedef int32_t _GEAR_INVALID_type;
  _GEAR_INVALID_type GEAR_INVALID;

   typedef int32_t _GEAR_NONE_type;
  _GEAR_NONE_type GEAR_NONE;




  typedef boost::shared_ptr< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> const> ConstPtr;

}; // struct Chassis_GearPosition_

typedef ::my_msgs::Chassis_GearPosition_<std::allocator<void> > Chassis_GearPosition;

typedef boost::shared_ptr< ::my_msgs::Chassis_GearPosition > Chassis_GearPositionPtr;
typedef boost::shared_ptr< ::my_msgs::Chassis_GearPosition const> Chassis_GearPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::Chassis_GearPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aee76128e808b5721d637c1ca9ed3389";
  }

  static const char* value(const ::my_msgs::Chassis_GearPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaee76128e808b572ULL;
  static const uint64_t static_value2 = 0x1d637c1ca9ed3389ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Chassis_GearPosition";
  }

  static const char* value(const ::my_msgs::Chassis_GearPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 GEAR_NEUTRAL\n\
int32 GEAR_DRIVE\n\
int32 GEAR_REVERSE\n\
int32 GEAR_PARKING\n\
int32 GEAR_LOW\n\
int32 GEAR_INVALID\n\
int32 GEAR_NONE\n\
";
  }

  static const char* value(const ::my_msgs::Chassis_GearPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.GEAR_NEUTRAL);
      stream.next(m.GEAR_DRIVE);
      stream.next(m.GEAR_REVERSE);
      stream.next(m.GEAR_PARKING);
      stream.next(m.GEAR_LOW);
      stream.next(m.GEAR_INVALID);
      stream.next(m.GEAR_NONE);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Chassis_GearPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::Chassis_GearPosition_<ContainerAllocator>& v)
  {
    s << indent << "GEAR_NEUTRAL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GEAR_NEUTRAL);
    s << indent << "GEAR_DRIVE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GEAR_DRIVE);
    s << indent << "GEAR_REVERSE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GEAR_REVERSE);
    s << indent << "GEAR_PARKING: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GEAR_PARKING);
    s << indent << "GEAR_LOW: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GEAR_LOW);
    s << indent << "GEAR_INVALID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GEAR_INVALID);
    s << indent << "GEAR_NONE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.GEAR_NONE);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_CHASSIS_GEARPOSITION_H
