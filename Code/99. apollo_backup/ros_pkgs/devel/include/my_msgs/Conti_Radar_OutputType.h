// Generated by gencpp from file my_msgs/Conti_Radar_OutputType.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_CONTI_RADAR_OUTPUTTYPE_H
#define MY_MSGS_MESSAGE_CONTI_RADAR_OUTPUTTYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct Conti_Radar_OutputType_
{
  typedef Conti_Radar_OutputType_<ContainerAllocator> Type;

  Conti_Radar_OutputType_()
    : OUTPUT_TYPE_NONE(0)
    , OUTPUT_TYPE_OBJECTS(0)
    , OUTPUT_TYPE_CLUSTERS(0)
    , OUTPUT_TYPE_ERROR(0)  {
    }
  Conti_Radar_OutputType_(const ContainerAllocator& _alloc)
    : OUTPUT_TYPE_NONE(0)
    , OUTPUT_TYPE_OBJECTS(0)
    , OUTPUT_TYPE_CLUSTERS(0)
    , OUTPUT_TYPE_ERROR(0)  {
  (void)_alloc;
    }



   typedef int32_t _OUTPUT_TYPE_NONE_type;
  _OUTPUT_TYPE_NONE_type OUTPUT_TYPE_NONE;

   typedef int32_t _OUTPUT_TYPE_OBJECTS_type;
  _OUTPUT_TYPE_OBJECTS_type OUTPUT_TYPE_OBJECTS;

   typedef int32_t _OUTPUT_TYPE_CLUSTERS_type;
  _OUTPUT_TYPE_CLUSTERS_type OUTPUT_TYPE_CLUSTERS;

   typedef int32_t _OUTPUT_TYPE_ERROR_type;
  _OUTPUT_TYPE_ERROR_type OUTPUT_TYPE_ERROR;




  typedef boost::shared_ptr< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> const> ConstPtr;

}; // struct Conti_Radar_OutputType_

typedef ::my_msgs::Conti_Radar_OutputType_<std::allocator<void> > Conti_Radar_OutputType;

typedef boost::shared_ptr< ::my_msgs::Conti_Radar_OutputType > Conti_Radar_OutputTypePtr;
typedef boost::shared_ptr< ::my_msgs::Conti_Radar_OutputType const> Conti_Radar_OutputTypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b186a45e6dc24069b22002538c1f7c58";
  }

  static const char* value(const ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb186a45e6dc24069ULL;
  static const uint64_t static_value2 = 0xb22002538c1f7c58ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Conti_Radar_OutputType";
  }

  static const char* value(const ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 OUTPUT_TYPE_NONE\n\
int32 OUTPUT_TYPE_OBJECTS\n\
int32 OUTPUT_TYPE_CLUSTERS\n\
int32 OUTPUT_TYPE_ERROR\n\
";
  }

  static const char* value(const ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.OUTPUT_TYPE_NONE);
      stream.next(m.OUTPUT_TYPE_OBJECTS);
      stream.next(m.OUTPUT_TYPE_CLUSTERS);
      stream.next(m.OUTPUT_TYPE_ERROR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Conti_Radar_OutputType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::Conti_Radar_OutputType_<ContainerAllocator>& v)
  {
    s << indent << "OUTPUT_TYPE_NONE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.OUTPUT_TYPE_NONE);
    s << indent << "OUTPUT_TYPE_OBJECTS: ";
    Printer<int32_t>::stream(s, indent + "  ", v.OUTPUT_TYPE_OBJECTS);
    s << indent << "OUTPUT_TYPE_CLUSTERS: ";
    Printer<int32_t>::stream(s, indent + "  ", v.OUTPUT_TYPE_CLUSTERS);
    s << indent << "OUTPUT_TYPE_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.OUTPUT_TYPE_ERROR);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_CONTI_RADAR_OUTPUTTYPE_H
