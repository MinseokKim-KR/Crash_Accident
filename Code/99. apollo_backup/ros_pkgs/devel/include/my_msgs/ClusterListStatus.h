// Generated by gencpp from file my_msgs/ClusterListStatus.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_CLUSTERLISTSTATUS_H
#define MY_MSGS_MESSAGE_CLUSTERLISTSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct ClusterListStatus_
{
  typedef ClusterListStatus_<ContainerAllocator> Type;

  ClusterListStatus_()
    : near(0)
    , far(0)
    , meas_counter(0)
    , interface_version(0)  {
    }
  ClusterListStatus_(const ContainerAllocator& _alloc)
    : near(0)
    , far(0)
    , meas_counter(0)
    , interface_version(0)  {
  (void)_alloc;
    }



   typedef int32_t _near_type;
  _near_type near;

   typedef int32_t _far_type;
  _far_type far;

   typedef int32_t _meas_counter_type;
  _meas_counter_type meas_counter;

   typedef int32_t _interface_version_type;
  _interface_version_type interface_version;




  typedef boost::shared_ptr< ::my_msgs::ClusterListStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::ClusterListStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ClusterListStatus_

typedef ::my_msgs::ClusterListStatus_<std::allocator<void> > ClusterListStatus;

typedef boost::shared_ptr< ::my_msgs::ClusterListStatus > ClusterListStatusPtr;
typedef boost::shared_ptr< ::my_msgs::ClusterListStatus const> ClusterListStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::ClusterListStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::ClusterListStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ClusterListStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ClusterListStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ClusterListStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ClusterListStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ClusterListStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ClusterListStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::ClusterListStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9deb8ffff6fe300cf1708b9550baa429";
  }

  static const char* value(const ::my_msgs::ClusterListStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9deb8ffff6fe300cULL;
  static const uint64_t static_value2 = 0xf1708b9550baa429ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::ClusterListStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/ClusterListStatus";
  }

  static const char* value(const ::my_msgs::ClusterListStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::ClusterListStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 near\n\
int32 far\n\
int32 meas_counter\n\
int32 interface_version\n\
";
  }

  static const char* value(const ::my_msgs::ClusterListStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::ClusterListStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.near);
      stream.next(m.far);
      stream.next(m.meas_counter);
      stream.next(m.interface_version);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClusterListStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::ClusterListStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::ClusterListStatus_<ContainerAllocator>& v)
  {
    s << indent << "near: ";
    Printer<int32_t>::stream(s, indent + "  ", v.near);
    s << indent << "far: ";
    Printer<int32_t>::stream(s, indent + "  ", v.far);
    s << indent << "meas_counter: ";
    Printer<int32_t>::stream(s, indent + "  ", v.meas_counter);
    s << indent << "interface_version: ";
    Printer<int32_t>::stream(s, indent + "  ", v.interface_version);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_CLUSTERLISTSTATUS_H
