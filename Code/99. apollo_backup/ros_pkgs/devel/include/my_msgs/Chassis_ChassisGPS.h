// Generated by gencpp from file my_msgs/Chassis_ChassisGPS.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_CHASSIS_CHASSISGPS_H
#define MY_MSGS_MESSAGE_CHASSIS_CHASSISGPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct Chassis_ChassisGPS_
{
  typedef Chassis_ChassisGPS_<ContainerAllocator> Type;

  Chassis_ChassisGPS_()
    : latitude(0.0)
    , longitude(0.0)
    , gps_valid(false)
    , year(0)
    , month(0)
    , day(0)
    , hours(0)
    , minutes(0)
    , seconds(0)
    , compass_direction(0.0)
    , pdop(0.0)
    , is_gps_fault(false)
    , is_inferred(false)
    , altitude(0.0)
    , heading(0.0)
    , hdop(0.0)
    , vdop(0.0)
    , quality(0)
    , num_satellites(0)
    , gps_speed(0.0)  {
    }
  Chassis_ChassisGPS_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , gps_valid(false)
    , year(0)
    , month(0)
    , day(0)
    , hours(0)
    , minutes(0)
    , seconds(0)
    , compass_direction(0.0)
    , pdop(0.0)
    , is_gps_fault(false)
    , is_inferred(false)
    , altitude(0.0)
    , heading(0.0)
    , hdop(0.0)
    , vdop(0.0)
    , quality(0)
    , num_satellites(0)
    , gps_speed(0.0)  {
  (void)_alloc;
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef uint8_t _gps_valid_type;
  _gps_valid_type gps_valid;

   typedef int32_t _year_type;
  _year_type year;

   typedef int32_t _month_type;
  _month_type month;

   typedef int32_t _day_type;
  _day_type day;

   typedef int32_t _hours_type;
  _hours_type hours;

   typedef int32_t _minutes_type;
  _minutes_type minutes;

   typedef int32_t _seconds_type;
  _seconds_type seconds;

   typedef double _compass_direction_type;
  _compass_direction_type compass_direction;

   typedef double _pdop_type;
  _pdop_type pdop;

   typedef uint8_t _is_gps_fault_type;
  _is_gps_fault_type is_gps_fault;

   typedef uint8_t _is_inferred_type;
  _is_inferred_type is_inferred;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _hdop_type;
  _hdop_type hdop;

   typedef double _vdop_type;
  _vdop_type vdop;

   typedef uint8_t _quality_type;
  _quality_type quality;

   typedef int32_t _num_satellites_type;
  _num_satellites_type num_satellites;

   typedef double _gps_speed_type;
  _gps_speed_type gps_speed;




  typedef boost::shared_ptr< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> const> ConstPtr;

}; // struct Chassis_ChassisGPS_

typedef ::my_msgs::Chassis_ChassisGPS_<std::allocator<void> > Chassis_ChassisGPS;

typedef boost::shared_ptr< ::my_msgs::Chassis_ChassisGPS > Chassis_ChassisGPSPtr;
typedef boost::shared_ptr< ::my_msgs::Chassis_ChassisGPS const> Chassis_ChassisGPSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff1ff95e6766ab93750064e15813fe58";
  }

  static const char* value(const ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff1ff95e6766ab93ULL;
  static const uint64_t static_value2 = 0x750064e15813fe58ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Chassis_ChassisGPS";
  }

  static const char* value(const ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 latitude\n\
float64 longitude\n\
bool gps_valid\n\
int32 year\n\
int32 month\n\
int32 day\n\
int32 hours\n\
int32 minutes\n\
int32 seconds\n\
float64 compass_direction\n\
float64 pdop\n\
bool is_gps_fault\n\
bool is_inferred\n\
float64 altitude\n\
float64 heading\n\
float64 hdop\n\
float64 vdop\n\
uint8 quality\n\
int32 num_satellites\n\
float64 gps_speed\n\
";
  }

  static const char* value(const ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.gps_valid);
      stream.next(m.year);
      stream.next(m.month);
      stream.next(m.day);
      stream.next(m.hours);
      stream.next(m.minutes);
      stream.next(m.seconds);
      stream.next(m.compass_direction);
      stream.next(m.pdop);
      stream.next(m.is_gps_fault);
      stream.next(m.is_inferred);
      stream.next(m.altitude);
      stream.next(m.heading);
      stream.next(m.hdop);
      stream.next(m.vdop);
      stream.next(m.quality);
      stream.next(m.num_satellites);
      stream.next(m.gps_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Chassis_ChassisGPS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::Chassis_ChassisGPS_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "gps_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_valid);
    s << indent << "year: ";
    Printer<int32_t>::stream(s, indent + "  ", v.year);
    s << indent << "month: ";
    Printer<int32_t>::stream(s, indent + "  ", v.month);
    s << indent << "day: ";
    Printer<int32_t>::stream(s, indent + "  ", v.day);
    s << indent << "hours: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hours);
    s << indent << "minutes: ";
    Printer<int32_t>::stream(s, indent + "  ", v.minutes);
    s << indent << "seconds: ";
    Printer<int32_t>::stream(s, indent + "  ", v.seconds);
    s << indent << "compass_direction: ";
    Printer<double>::stream(s, indent + "  ", v.compass_direction);
    s << indent << "pdop: ";
    Printer<double>::stream(s, indent + "  ", v.pdop);
    s << indent << "is_gps_fault: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_gps_fault);
    s << indent << "is_inferred: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_inferred);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "hdop: ";
    Printer<double>::stream(s, indent + "  ", v.hdop);
    s << indent << "vdop: ";
    Printer<double>::stream(s, indent + "  ", v.vdop);
    s << indent << "quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quality);
    s << indent << "num_satellites: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_satellites);
    s << indent << "gps_speed: ";
    Printer<double>::stream(s, indent + "  ", v.gps_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_CHASSIS_CHASSISGPS_H
