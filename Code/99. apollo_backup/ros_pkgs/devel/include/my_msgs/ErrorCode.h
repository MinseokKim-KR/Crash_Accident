// Generated by gencpp from file my_msgs/ErrorCode.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_ERRORCODE_H
#define MY_MSGS_MESSAGE_ERRORCODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct ErrorCode_
{
  typedef ErrorCode_<ContainerAllocator> Type;

  ErrorCode_()
    : OK(0)
    , CONTROL_ERROR(0)
    , CONTROL_INIT_ERROR(0)
    , CONTROL_COMPUTE_ERROR(0)
    , CANBUS_ERROR(0)
    , CAN_CLIENT_ERROR_BASE(0)
    , CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED(0)
    , CAN_CLIENT_ERROR_FRAME_NUM(0)
    , CAN_CLIENT_ERROR_SEND_FAILED(0)
    , CAN_CLIENT_ERROR_RECV_FAILED(0)
    , LOCALIZATION_ERROR(0)
    , LOCALIZATION_ERROR_MSG(0)
    , LOCALIZATION_ERROR_LIDAR(0)
    , LOCALIZATION_ERROR_int32EG(0)
    , LOCALIZATION_ERROR_GNSS(0)
    , PERCEPTION_ERROR(0)
    , PERCEPTION_ERROR_TF(0)
    , PERCEPTION_ERROR_PROCESS(0)
    , PERCEPTION_FATAL(0)
    , PREDICTION_ERROR(0)
    , PLANNING_ERROR(0)
    , HDMAP_DATA_ERROR(0)
    , ROUTING_ERROR(0)
    , ROUTING_ERROR_REQUEST(0)
    , ROUTING_ERROR_RESPONSE(0)
    , ROUTING_ERROR_NOT_READY(0)
    , END_OF_INPUT(0)
    , HTTP_LOGIC_ERROR(0)
    , HTTP_RUNTIME_ERROR(0)
    , RELATIVE_MAP_ERROR(0)
    , RELATIVE_MAP_NOT_READY(0)
    , DRIVER_ERROR_GNSS(0)
    , DRIVER_ERROR_VELODYNE(0)  {
    }
  ErrorCode_(const ContainerAllocator& _alloc)
    : OK(0)
    , CONTROL_ERROR(0)
    , CONTROL_INIT_ERROR(0)
    , CONTROL_COMPUTE_ERROR(0)
    , CANBUS_ERROR(0)
    , CAN_CLIENT_ERROR_BASE(0)
    , CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED(0)
    , CAN_CLIENT_ERROR_FRAME_NUM(0)
    , CAN_CLIENT_ERROR_SEND_FAILED(0)
    , CAN_CLIENT_ERROR_RECV_FAILED(0)
    , LOCALIZATION_ERROR(0)
    , LOCALIZATION_ERROR_MSG(0)
    , LOCALIZATION_ERROR_LIDAR(0)
    , LOCALIZATION_ERROR_int32EG(0)
    , LOCALIZATION_ERROR_GNSS(0)
    , PERCEPTION_ERROR(0)
    , PERCEPTION_ERROR_TF(0)
    , PERCEPTION_ERROR_PROCESS(0)
    , PERCEPTION_FATAL(0)
    , PREDICTION_ERROR(0)
    , PLANNING_ERROR(0)
    , HDMAP_DATA_ERROR(0)
    , ROUTING_ERROR(0)
    , ROUTING_ERROR_REQUEST(0)
    , ROUTING_ERROR_RESPONSE(0)
    , ROUTING_ERROR_NOT_READY(0)
    , END_OF_INPUT(0)
    , HTTP_LOGIC_ERROR(0)
    , HTTP_RUNTIME_ERROR(0)
    , RELATIVE_MAP_ERROR(0)
    , RELATIVE_MAP_NOT_READY(0)
    , DRIVER_ERROR_GNSS(0)
    , DRIVER_ERROR_VELODYNE(0)  {
  (void)_alloc;
    }



   typedef int32_t _OK_type;
  _OK_type OK;

   typedef int32_t _CONTROL_ERROR_type;
  _CONTROL_ERROR_type CONTROL_ERROR;

   typedef int32_t _CONTROL_INIT_ERROR_type;
  _CONTROL_INIT_ERROR_type CONTROL_INIT_ERROR;

   typedef int32_t _CONTROL_COMPUTE_ERROR_type;
  _CONTROL_COMPUTE_ERROR_type CONTROL_COMPUTE_ERROR;

   typedef int32_t _CANBUS_ERROR_type;
  _CANBUS_ERROR_type CANBUS_ERROR;

   typedef int32_t _CAN_CLIENT_ERROR_BASE_type;
  _CAN_CLIENT_ERROR_BASE_type CAN_CLIENT_ERROR_BASE;

   typedef int32_t _CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED_type;
  _CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED_type CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED;

   typedef int32_t _CAN_CLIENT_ERROR_FRAME_NUM_type;
  _CAN_CLIENT_ERROR_FRAME_NUM_type CAN_CLIENT_ERROR_FRAME_NUM;

   typedef int32_t _CAN_CLIENT_ERROR_SEND_FAILED_type;
  _CAN_CLIENT_ERROR_SEND_FAILED_type CAN_CLIENT_ERROR_SEND_FAILED;

   typedef int32_t _CAN_CLIENT_ERROR_RECV_FAILED_type;
  _CAN_CLIENT_ERROR_RECV_FAILED_type CAN_CLIENT_ERROR_RECV_FAILED;

   typedef int32_t _LOCALIZATION_ERROR_type;
  _LOCALIZATION_ERROR_type LOCALIZATION_ERROR;

   typedef int32_t _LOCALIZATION_ERROR_MSG_type;
  _LOCALIZATION_ERROR_MSG_type LOCALIZATION_ERROR_MSG;

   typedef int32_t _LOCALIZATION_ERROR_LIDAR_type;
  _LOCALIZATION_ERROR_LIDAR_type LOCALIZATION_ERROR_LIDAR;

   typedef int32_t _LOCALIZATION_ERROR_int32EG_type;
  _LOCALIZATION_ERROR_int32EG_type LOCALIZATION_ERROR_int32EG;

   typedef int32_t _LOCALIZATION_ERROR_GNSS_type;
  _LOCALIZATION_ERROR_GNSS_type LOCALIZATION_ERROR_GNSS;

   typedef int32_t _PERCEPTION_ERROR_type;
  _PERCEPTION_ERROR_type PERCEPTION_ERROR;

   typedef int32_t _PERCEPTION_ERROR_TF_type;
  _PERCEPTION_ERROR_TF_type PERCEPTION_ERROR_TF;

   typedef int32_t _PERCEPTION_ERROR_PROCESS_type;
  _PERCEPTION_ERROR_PROCESS_type PERCEPTION_ERROR_PROCESS;

   typedef int32_t _PERCEPTION_FATAL_type;
  _PERCEPTION_FATAL_type PERCEPTION_FATAL;

   typedef int32_t _PREDICTION_ERROR_type;
  _PREDICTION_ERROR_type PREDICTION_ERROR;

   typedef int32_t _PLANNING_ERROR_type;
  _PLANNING_ERROR_type PLANNING_ERROR;

   typedef int32_t _HDMAP_DATA_ERROR_type;
  _HDMAP_DATA_ERROR_type HDMAP_DATA_ERROR;

   typedef int32_t _ROUTING_ERROR_type;
  _ROUTING_ERROR_type ROUTING_ERROR;

   typedef int32_t _ROUTING_ERROR_REQUEST_type;
  _ROUTING_ERROR_REQUEST_type ROUTING_ERROR_REQUEST;

   typedef int32_t _ROUTING_ERROR_RESPONSE_type;
  _ROUTING_ERROR_RESPONSE_type ROUTING_ERROR_RESPONSE;

   typedef int32_t _ROUTING_ERROR_NOT_READY_type;
  _ROUTING_ERROR_NOT_READY_type ROUTING_ERROR_NOT_READY;

   typedef int32_t _END_OF_INPUT_type;
  _END_OF_INPUT_type END_OF_INPUT;

   typedef int32_t _HTTP_LOGIC_ERROR_type;
  _HTTP_LOGIC_ERROR_type HTTP_LOGIC_ERROR;

   typedef int32_t _HTTP_RUNTIME_ERROR_type;
  _HTTP_RUNTIME_ERROR_type HTTP_RUNTIME_ERROR;

   typedef int32_t _RELATIVE_MAP_ERROR_type;
  _RELATIVE_MAP_ERROR_type RELATIVE_MAP_ERROR;

   typedef int32_t _RELATIVE_MAP_NOT_READY_type;
  _RELATIVE_MAP_NOT_READY_type RELATIVE_MAP_NOT_READY;

   typedef int32_t _DRIVER_ERROR_GNSS_type;
  _DRIVER_ERROR_GNSS_type DRIVER_ERROR_GNSS;

   typedef int32_t _DRIVER_ERROR_VELODYNE_type;
  _DRIVER_ERROR_VELODYNE_type DRIVER_ERROR_VELODYNE;




  typedef boost::shared_ptr< ::my_msgs::ErrorCode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::ErrorCode_<ContainerAllocator> const> ConstPtr;

}; // struct ErrorCode_

typedef ::my_msgs::ErrorCode_<std::allocator<void> > ErrorCode;

typedef boost::shared_ptr< ::my_msgs::ErrorCode > ErrorCodePtr;
typedef boost::shared_ptr< ::my_msgs::ErrorCode const> ErrorCodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::ErrorCode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::ErrorCode_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ErrorCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ErrorCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ErrorCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ErrorCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ErrorCode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ErrorCode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::ErrorCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ab8eda953e2a96917c92d24c0e44554";
  }

  static const char* value(const ::my_msgs::ErrorCode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ab8eda953e2a969ULL;
  static const uint64_t static_value2 = 0x17c92d24c0e44554ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::ErrorCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/ErrorCode";
  }

  static const char* value(const ::my_msgs::ErrorCode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::ErrorCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 OK\n\
\n\
int32 CONTROL_ERROR\n\
int32 CONTROL_INIT_ERROR\n\
int32 CONTROL_COMPUTE_ERROR\n\
\n\
int32 CANBUS_ERROR\n\
int32 CAN_CLIENT_ERROR_BASE\n\
int32 CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED\n\
int32 CAN_CLIENT_ERROR_FRAME_NUM\n\
int32 CAN_CLIENT_ERROR_SEND_FAILED\n\
int32 CAN_CLIENT_ERROR_RECV_FAILED\n\
\n\
int32 LOCALIZATION_ERROR\n\
int32 LOCALIZATION_ERROR_MSG\n\
int32 LOCALIZATION_ERROR_LIDAR\n\
int32 LOCALIZATION_ERROR_int32EG\n\
int32 LOCALIZATION_ERROR_GNSS\n\
\n\
int32 PERCEPTION_ERROR\n\
int32 PERCEPTION_ERROR_TF\n\
int32 PERCEPTION_ERROR_PROCESS\n\
int32 PERCEPTION_FATAL\n\
\n\
int32 PREDICTION_ERROR\n\
\n\
int32 PLANNING_ERROR\n\
\n\
int32 HDMAP_DATA_ERROR\n\
\n\
int32 ROUTING_ERROR\n\
int32 ROUTING_ERROR_REQUEST\n\
int32 ROUTING_ERROR_RESPONSE\n\
int32 ROUTING_ERROR_NOT_READY\n\
\n\
int32 END_OF_INPUT\n\
\n\
int32 HTTP_LOGIC_ERROR\n\
int32 HTTP_RUNTIME_ERROR\n\
\n\
int32 RELATIVE_MAP_ERROR\n\
int32 RELATIVE_MAP_NOT_READY\n\
\n\
\n\
int32 DRIVER_ERROR_GNSS\n\
int32 DRIVER_ERROR_VELODYNE\n\
";
  }

  static const char* value(const ::my_msgs::ErrorCode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::ErrorCode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.OK);
      stream.next(m.CONTROL_ERROR);
      stream.next(m.CONTROL_INIT_ERROR);
      stream.next(m.CONTROL_COMPUTE_ERROR);
      stream.next(m.CANBUS_ERROR);
      stream.next(m.CAN_CLIENT_ERROR_BASE);
      stream.next(m.CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED);
      stream.next(m.CAN_CLIENT_ERROR_FRAME_NUM);
      stream.next(m.CAN_CLIENT_ERROR_SEND_FAILED);
      stream.next(m.CAN_CLIENT_ERROR_RECV_FAILED);
      stream.next(m.LOCALIZATION_ERROR);
      stream.next(m.LOCALIZATION_ERROR_MSG);
      stream.next(m.LOCALIZATION_ERROR_LIDAR);
      stream.next(m.LOCALIZATION_ERROR_int32EG);
      stream.next(m.LOCALIZATION_ERROR_GNSS);
      stream.next(m.PERCEPTION_ERROR);
      stream.next(m.PERCEPTION_ERROR_TF);
      stream.next(m.PERCEPTION_ERROR_PROCESS);
      stream.next(m.PERCEPTION_FATAL);
      stream.next(m.PREDICTION_ERROR);
      stream.next(m.PLANNING_ERROR);
      stream.next(m.HDMAP_DATA_ERROR);
      stream.next(m.ROUTING_ERROR);
      stream.next(m.ROUTING_ERROR_REQUEST);
      stream.next(m.ROUTING_ERROR_RESPONSE);
      stream.next(m.ROUTING_ERROR_NOT_READY);
      stream.next(m.END_OF_INPUT);
      stream.next(m.HTTP_LOGIC_ERROR);
      stream.next(m.HTTP_RUNTIME_ERROR);
      stream.next(m.RELATIVE_MAP_ERROR);
      stream.next(m.RELATIVE_MAP_NOT_READY);
      stream.next(m.DRIVER_ERROR_GNSS);
      stream.next(m.DRIVER_ERROR_VELODYNE);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ErrorCode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::ErrorCode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::ErrorCode_<ContainerAllocator>& v)
  {
    s << indent << "OK: ";
    Printer<int32_t>::stream(s, indent + "  ", v.OK);
    s << indent << "CONTROL_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CONTROL_ERROR);
    s << indent << "CONTROL_INIT_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CONTROL_INIT_ERROR);
    s << indent << "CONTROL_COMPUTE_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CONTROL_COMPUTE_ERROR);
    s << indent << "CANBUS_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CANBUS_ERROR);
    s << indent << "CAN_CLIENT_ERROR_BASE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CAN_CLIENT_ERROR_BASE);
    s << indent << "CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED);
    s << indent << "CAN_CLIENT_ERROR_FRAME_NUM: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CAN_CLIENT_ERROR_FRAME_NUM);
    s << indent << "CAN_CLIENT_ERROR_SEND_FAILED: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CAN_CLIENT_ERROR_SEND_FAILED);
    s << indent << "CAN_CLIENT_ERROR_RECV_FAILED: ";
    Printer<int32_t>::stream(s, indent + "  ", v.CAN_CLIENT_ERROR_RECV_FAILED);
    s << indent << "LOCALIZATION_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LOCALIZATION_ERROR);
    s << indent << "LOCALIZATION_ERROR_MSG: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LOCALIZATION_ERROR_MSG);
    s << indent << "LOCALIZATION_ERROR_LIDAR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LOCALIZATION_ERROR_LIDAR);
    s << indent << "LOCALIZATION_ERROR_int32EG: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LOCALIZATION_ERROR_int32EG);
    s << indent << "LOCALIZATION_ERROR_GNSS: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LOCALIZATION_ERROR_GNSS);
    s << indent << "PERCEPTION_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PERCEPTION_ERROR);
    s << indent << "PERCEPTION_ERROR_TF: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PERCEPTION_ERROR_TF);
    s << indent << "PERCEPTION_ERROR_PROCESS: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PERCEPTION_ERROR_PROCESS);
    s << indent << "PERCEPTION_FATAL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PERCEPTION_FATAL);
    s << indent << "PREDICTION_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PREDICTION_ERROR);
    s << indent << "PLANNING_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.PLANNING_ERROR);
    s << indent << "HDMAP_DATA_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.HDMAP_DATA_ERROR);
    s << indent << "ROUTING_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ROUTING_ERROR);
    s << indent << "ROUTING_ERROR_REQUEST: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ROUTING_ERROR_REQUEST);
    s << indent << "ROUTING_ERROR_RESPONSE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ROUTING_ERROR_RESPONSE);
    s << indent << "ROUTING_ERROR_NOT_READY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ROUTING_ERROR_NOT_READY);
    s << indent << "END_OF_INPUT: ";
    Printer<int32_t>::stream(s, indent + "  ", v.END_OF_INPUT);
    s << indent << "HTTP_LOGIC_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.HTTP_LOGIC_ERROR);
    s << indent << "HTTP_RUNTIME_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.HTTP_RUNTIME_ERROR);
    s << indent << "RELATIVE_MAP_ERROR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.RELATIVE_MAP_ERROR);
    s << indent << "RELATIVE_MAP_NOT_READY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.RELATIVE_MAP_NOT_READY);
    s << indent << "DRIVER_ERROR_GNSS: ";
    Printer<int32_t>::stream(s, indent + "  ", v.DRIVER_ERROR_GNSS);
    s << indent << "DRIVER_ERROR_VELODYNE: ";
    Printer<int32_t>::stream(s, indent + "  ", v.DRIVER_ERROR_VELODYNE);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_ERRORCODE_H
