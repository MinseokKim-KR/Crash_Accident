// Generated by gencpp from file my_msgs/ObjectYield.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_OBJECTYIELD_H
#define MY_MSGS_MESSAGE_OBJECTYIELD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <my_msgs/PointENU.h>

namespace my_msgs
{
template <class ContainerAllocator>
struct ObjectYield_
{
  typedef ObjectYield_<ContainerAllocator> Type;

  ObjectYield_()
    : distance_s(0.0)
    , fence_point32()
    , fence_heading(0.0)
    , time_buffer(0.0)  {
    }
  ObjectYield_(const ContainerAllocator& _alloc)
    : distance_s(0.0)
    , fence_point32(_alloc)
    , fence_heading(0.0)
    , time_buffer(0.0)  {
  (void)_alloc;
    }



   typedef double _distance_s_type;
  _distance_s_type distance_s;

   typedef  ::my_msgs::PointENU_<ContainerAllocator>  _fence_point32_type;
  _fence_point32_type fence_point32;

   typedef double _fence_heading_type;
  _fence_heading_type fence_heading;

   typedef double _time_buffer_type;
  _time_buffer_type time_buffer;




  typedef boost::shared_ptr< ::my_msgs::ObjectYield_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::ObjectYield_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectYield_

typedef ::my_msgs::ObjectYield_<std::allocator<void> > ObjectYield;

typedef boost::shared_ptr< ::my_msgs::ObjectYield > ObjectYieldPtr;
typedef boost::shared_ptr< ::my_msgs::ObjectYield const> ObjectYieldConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::ObjectYield_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::ObjectYield_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ObjectYield_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ObjectYield_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ObjectYield_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ObjectYield_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ObjectYield_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ObjectYield_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::ObjectYield_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ee7ec5a155dda88fb9f6f62b140a4cc";
  }

  static const char* value(const ::my_msgs::ObjectYield_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ee7ec5a155dda88ULL;
  static const uint64_t static_value2 = 0xfb9f6f62b140a4ccULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::ObjectYield_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/ObjectYield";
  }

  static const char* value(const ::my_msgs::ObjectYield_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::ObjectYield_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 distance_s\n\
my_msgs/PointENU fence_point32\n\
float64 fence_heading\n\
float64 time_buffer\n\
================================================================================\n\
MSG: my_msgs/PointENU\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::my_msgs::ObjectYield_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::ObjectYield_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance_s);
      stream.next(m.fence_point32);
      stream.next(m.fence_heading);
      stream.next(m.time_buffer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectYield_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::ObjectYield_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::ObjectYield_<ContainerAllocator>& v)
  {
    s << indent << "distance_s: ";
    Printer<double>::stream(s, indent + "  ", v.distance_s);
    s << indent << "fence_point32: ";
    s << std::endl;
    Printer< ::my_msgs::PointENU_<ContainerAllocator> >::stream(s, indent + "  ", v.fence_point32);
    s << indent << "fence_heading: ";
    Printer<double>::stream(s, indent + "  ", v.fence_heading);
    s << indent << "time_buffer: ";
    Printer<double>::stream(s, indent + "  ", v.time_buffer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_OBJECTYIELD_H
