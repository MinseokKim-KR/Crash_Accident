// Generated by gencpp from file my_msgs/ObjectStop.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_OBJECTSTOP_H
#define MY_MSGS_MESSAGE_OBJECTSTOP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <my_msgs/StopReasonCode.h>
#include <my_msgs/PointENU.h>

namespace my_msgs
{
template <class ContainerAllocator>
struct ObjectStop_
{
  typedef ObjectStop_<ContainerAllocator> Type;

  ObjectStop_()
    : reason_code()
    , distance_s(0.0)
    , stop_point32()
    , stop_heading(0.0)
    , wait_for_obstacle()  {
    }
  ObjectStop_(const ContainerAllocator& _alloc)
    : reason_code(_alloc)
    , distance_s(0.0)
    , stop_point32(_alloc)
    , stop_heading(0.0)
    , wait_for_obstacle(_alloc)  {
  (void)_alloc;
    }



   typedef  ::my_msgs::StopReasonCode_<ContainerAllocator>  _reason_code_type;
  _reason_code_type reason_code;

   typedef double _distance_s_type;
  _distance_s_type distance_s;

   typedef  ::my_msgs::PointENU_<ContainerAllocator>  _stop_point32_type;
  _stop_point32_type stop_point32;

   typedef double _stop_heading_type;
  _stop_heading_type stop_heading;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _wait_for_obstacle_type;
  _wait_for_obstacle_type wait_for_obstacle;




  typedef boost::shared_ptr< ::my_msgs::ObjectStop_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::ObjectStop_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectStop_

typedef ::my_msgs::ObjectStop_<std::allocator<void> > ObjectStop;

typedef boost::shared_ptr< ::my_msgs::ObjectStop > ObjectStopPtr;
typedef boost::shared_ptr< ::my_msgs::ObjectStop const> ObjectStopConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::ObjectStop_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::ObjectStop_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ObjectStop_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ObjectStop_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ObjectStop_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ObjectStop_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ObjectStop_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ObjectStop_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::ObjectStop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1679d28807e1b864311070144e4b5fa8";
  }

  static const char* value(const ::my_msgs::ObjectStop_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1679d28807e1b864ULL;
  static const uint64_t static_value2 = 0x311070144e4b5fa8ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::ObjectStop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/ObjectStop";
  }

  static const char* value(const ::my_msgs::ObjectStop_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::ObjectStop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/StopReasonCode reason_code\n\
float64 distance_s\n\
my_msgs/PointENU stop_point32\n\
float64 stop_heading\n\
byte[] wait_for_obstacle\n\
================================================================================\n\
MSG: my_msgs/StopReasonCode\n\
int32 STOP_REASON_HEAD_VEHICLE\n\
int32 STOP_REASON_DESTINATION\n\
int32 STOP_REASON_PEDESTRIAN\n\
int32 STOP_REASON_OBSTACLE\n\
int32 STOP_REASON_PREPARKING\n\
int32 STOP_REASON_SIGNAL\n\
int32 STOP_REASON_STOP_SIGN\n\
int32 STOP_REASON_YIELD_SIGN\n\
int32 STOP_REASON_CLEAR_ZONE\n\
int32 STOP_REASON_CROSSWALK\n\
int32 STOP_REASON_CREEPER\n\
int32 STOP_REASON_REFERENCE_END\n\
int32 STOP_REASON_YELLOW_SIGNAL\n\
int32 STOP_REASON_PULL_OVER\n\
================================================================================\n\
MSG: my_msgs/PointENU\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::my_msgs::ObjectStop_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::ObjectStop_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reason_code);
      stream.next(m.distance_s);
      stream.next(m.stop_point32);
      stream.next(m.stop_heading);
      stream.next(m.wait_for_obstacle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectStop_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::ObjectStop_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::ObjectStop_<ContainerAllocator>& v)
  {
    s << indent << "reason_code: ";
    s << std::endl;
    Printer< ::my_msgs::StopReasonCode_<ContainerAllocator> >::stream(s, indent + "  ", v.reason_code);
    s << indent << "distance_s: ";
    Printer<double>::stream(s, indent + "  ", v.distance_s);
    s << indent << "stop_point32: ";
    s << std::endl;
    Printer< ::my_msgs::PointENU_<ContainerAllocator> >::stream(s, indent + "  ", v.stop_point32);
    s << indent << "stop_heading: ";
    Printer<double>::stream(s, indent + "  ", v.stop_heading);
    s << indent << "wait_for_obstacle[]" << std::endl;
    for (size_t i = 0; i < v.wait_for_obstacle.size(); ++i)
    {
      s << indent << "  wait_for_obstacle[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.wait_for_obstacle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_OBJECTSTOP_H
