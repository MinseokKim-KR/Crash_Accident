// Generated by gencpp from file my_msgs/ControlCommand.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_CONTROLCOMMAND_H
#define MY_MSGS_MESSAGE_CONTROLCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <my_msgs/Header.h>
#include <my_msgs/Chassis_DrivingMode.h>
#include <my_msgs/Chassis_GearPosition.h>
#include <my_msgs/Common_VehicleSignal.h>
#include <my_msgs/LatencyStats.h>
#include <my_msgs/PadMessage.h>
#include <my_msgs/Common_EngageAdvise.h>
#include <my_msgs/TurnSignal.h>
#include <my_msgs/LatencyStats.h>
#include <my_msgs/Debug.h>

namespace my_msgs
{
template <class ContainerAllocator>
struct ControlCommand_
{
  typedef ControlCommand_<ContainerAllocator> Type;

  ControlCommand_()
    : header()
    , throttle(0.0)
    , brake(0.0)
    , steering_rate(0.0)
    , steering_target(0.0)
    , parking_brake(false)
    , speed(0.0)
    , acceleration(0.0)
    , reset_model(false)
    , engine_on_off(false)
    , gear_location(0)
    , trajectory_fraction(0.0)
    , driving_mode()
    , gear_position()
    , signal()
    , latency_stats()
    , pad_msg()
    , engage_advice()
    , is_in_safe_mode(false)
    , left_turn(false)
    , right_turn(false)
    , high_beam(false)
    , low_beam(false)
    , horn(false)
    , turn_signal()
    , LatencyStatus()
    , debug()  {
    }
  ControlCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , throttle(0.0)
    , brake(0.0)
    , steering_rate(0.0)
    , steering_target(0.0)
    , parking_brake(false)
    , speed(0.0)
    , acceleration(0.0)
    , reset_model(false)
    , engine_on_off(false)
    , gear_location(0)
    , trajectory_fraction(0.0)
    , driving_mode(_alloc)
    , gear_position(_alloc)
    , signal(_alloc)
    , latency_stats(_alloc)
    , pad_msg(_alloc)
    , engage_advice(_alloc)
    , is_in_safe_mode(false)
    , left_turn(false)
    , right_turn(false)
    , high_beam(false)
    , low_beam(false)
    , horn(false)
    , turn_signal(_alloc)
    , LatencyStatus(_alloc)
    , debug(_alloc)  {
  (void)_alloc;
    }



   typedef  ::my_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _throttle_type;
  _throttle_type throttle;

   typedef double _brake_type;
  _brake_type brake;

   typedef double _steering_rate_type;
  _steering_rate_type steering_rate;

   typedef double _steering_target_type;
  _steering_target_type steering_target;

   typedef uint8_t _parking_brake_type;
  _parking_brake_type parking_brake;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _acceleration_type;
  _acceleration_type acceleration;

   typedef uint8_t _reset_model_type;
  _reset_model_type reset_model;

   typedef uint8_t _engine_on_off_type;
  _engine_on_off_type engine_on_off;

   typedef int32_t _gear_location_type;
  _gear_location_type gear_location;

   typedef double _trajectory_fraction_type;
  _trajectory_fraction_type trajectory_fraction;

   typedef  ::my_msgs::Chassis_DrivingMode_<ContainerAllocator>  _driving_mode_type;
  _driving_mode_type driving_mode;

   typedef  ::my_msgs::Chassis_GearPosition_<ContainerAllocator>  _gear_position_type;
  _gear_position_type gear_position;

   typedef  ::my_msgs::Common_VehicleSignal_<ContainerAllocator>  _signal_type;
  _signal_type signal;

   typedef  ::my_msgs::LatencyStats_<ContainerAllocator>  _latency_stats_type;
  _latency_stats_type latency_stats;

   typedef  ::my_msgs::PadMessage_<ContainerAllocator>  _pad_msg_type;
  _pad_msg_type pad_msg;

   typedef  ::my_msgs::Common_EngageAdvise_<ContainerAllocator>  _engage_advice_type;
  _engage_advice_type engage_advice;

   typedef uint8_t _is_in_safe_mode_type;
  _is_in_safe_mode_type is_in_safe_mode;

   typedef uint8_t _left_turn_type;
  _left_turn_type left_turn;

   typedef uint8_t _right_turn_type;
  _right_turn_type right_turn;

   typedef uint8_t _high_beam_type;
  _high_beam_type high_beam;

   typedef uint8_t _low_beam_type;
  _low_beam_type low_beam;

   typedef uint8_t _horn_type;
  _horn_type horn;

   typedef  ::my_msgs::TurnSignal_<ContainerAllocator>  _turn_signal_type;
  _turn_signal_type turn_signal;

   typedef  ::my_msgs::LatencyStats_<ContainerAllocator>  _LatencyStatus_type;
  _LatencyStatus_type LatencyStatus;

   typedef  ::my_msgs::Debug_<ContainerAllocator>  _debug_type;
  _debug_type debug;




  typedef boost::shared_ptr< ::my_msgs::ControlCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::ControlCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ControlCommand_

typedef ::my_msgs::ControlCommand_<std::allocator<void> > ControlCommand;

typedef boost::shared_ptr< ::my_msgs::ControlCommand > ControlCommandPtr;
typedef boost::shared_ptr< ::my_msgs::ControlCommand const> ControlCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::ControlCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::ControlCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/tmp/ros/share/std_msgs/cmake/../msg'], 'my_msgs': ['/apollo/ros_pkgs/src/my_msgs/msg', '/apollo/ros_pkgs/src/my_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ControlCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::ControlCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ControlCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::ControlCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ControlCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::ControlCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::ControlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3101652dddb789970831cac2eed24e54";
  }

  static const char* value(const ::my_msgs::ControlCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3101652dddb78997ULL;
  static const uint64_t static_value2 = 0x0831cac2eed24e54ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::ControlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/ControlCommand";
  }

  static const char* value(const ::my_msgs::ControlCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::ControlCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Header header\n\
float64 throttle\n\
float64 brake\n\
float64 steering_rate\n\
float64 steering_target\n\
bool parking_brake\n\
float64 speed\n\
float64 acceleration\n\
bool reset_model\n\
bool engine_on_off\n\
int32 gear_location\n\
float64 trajectory_fraction\n\
my_msgs/Chassis_DrivingMode driving_mode \n\
my_msgs/Chassis_GearPosition gear_position\n\
my_msgs/Common_VehicleSignal signal\n\
my_msgs/LatencyStats latency_stats\n\
my_msgs/PadMessage pad_msg\n\
my_msgs/Common_EngageAdvise engage_advice\n\
bool is_in_safe_mode\n\
bool left_turn\n\
bool right_turn\n\
bool high_beam\n\
bool low_beam\n\
bool horn\n\
my_msgs/TurnSignal turn_signal\n\
my_msgs/LatencyStats LatencyStatus\n\
my_msgs/Debug debug\n\
\n\
================================================================================\n\
MSG: my_msgs/Header\n\
float64 timestamp_sec\n\
string module_name\n\
uint32 sequence_num\n\
uint32 lidar_timestamp\n\
uint32 camera_timestamp\n\
uint32 radar_timestamp\n\
uint32 version\n\
my_msgs/Status status\n\
\n\
================================================================================\n\
MSG: my_msgs/Status\n\
int32 error_code\n\
\n\
================================================================================\n\
MSG: my_msgs/Chassis_DrivingMode\n\
int32 COMPLETE_MANUAL\n\
int32 COMPLETE_AUTO_DRIVE\n\
int32 AUTO_STEER_ONLY\n\
int32 AUTO_SPEED_ONLY\n\
int32 EMERGENCY_MODE\n\
================================================================================\n\
MSG: my_msgs/Chassis_GearPosition\n\
int32 GEAR_NEUTRAL\n\
int32 GEAR_DRIVE\n\
int32 GEAR_REVERSE\n\
int32 GEAR_PARKING\n\
int32 GEAR_LOW\n\
int32 GEAR_INVALID\n\
int32 GEAR_NONE\n\
================================================================================\n\
MSG: my_msgs/Common_VehicleSignal\n\
my_msgs/TurnSignal turn_signal\n\
bool high_beam\n\
bool low_beam\n\
bool horn\n\
bool emergency_light\n\
================================================================================\n\
MSG: my_msgs/TurnSignal\n\
int32 TURN_NONE\n\
int32 TURN_LEFT\n\
int32 TURN_RIGHT\n\
================================================================================\n\
MSG: my_msgs/LatencyStats\n\
float64 total_time_ms\n\
float64[] controller_time_ms\n\
bool total_time_exceeded\n\
\n\
================================================================================\n\
MSG: my_msgs/PadMessage\n\
my_msgs/Header header\n\
my_msgs/Chassis_DrivingMode driving_mode\n\
my_msgs/DrivingAction action\n\
================================================================================\n\
MSG: my_msgs/DrivingAction\n\
int32 STOP\n\
int32 START\n\
int32 RESET\n\
================================================================================\n\
MSG: my_msgs/Common_EngageAdvise\n\
uint8 advice\n\
string reason\n\
================================================================================\n\
MSG: my_msgs/Debug\n\
my_msgs/SimpleLongitudinalDebug simple_lon_debug\n\
my_msgs/SimpleLateralDebug simple_lat_debug\n\
my_msgs/InputDebug input_debug\n\
my_msgs/SimpleMPCDebug simple_mpc_debug\n\
================================================================================\n\
MSG: my_msgs/SimpleLongitudinalDebug\n\
float64 station_reference\n\
float64 station_error\n\
float64 station_error_limited\n\
float64 preview_station_error\n\
float64 speed_reference\n\
float64 speed_error\n\
float64 speed_controller_input_limited\n\
float64 preview_speed_reference\n\
float64 preview_speed_error\n\
float64 preview_acceleration_reference\n\
float64 acceleration_cmd_closeloop\n\
float64 acceleration_cmd\n\
float64 acceleration_lookup\n\
float64 speed_lookup\n\
float64 calibration_value\n\
float64 throttle_cmd\n\
float64 brake_cmd\n\
bool is_full_stop\n\
float64 slope_offset_compensation\n\
float64 current_station\n\
float64 path_remain\n\
================================================================================\n\
MSG: my_msgs/SimpleLateralDebug\n\
float64 lateral_error\n\
float64 ref_heading\n\
float64 heading\n\
float64 heading_error\n\
float64 heading_error_rate\n\
float64 lateral_error_rate\n\
float64 curvature\n\
float64 steer_angle\n\
float64 steer_angle_feedforward\n\
float64 steer_angle_lateral_contribution\n\
float64 steer_angle_lateral_rate_contribution\n\
float64 steer_angle_heading_contribution\n\
float64 steer_angle_heading_rate_contribution\n\
float64 steer_angle_feedback\n\
float64 steering_position\n\
float64 ref_speed\n\
float64 steer_angle_limited   \n\
================================================================================\n\
MSG: my_msgs/InputDebug\n\
my_msgs/Header localization_header\n\
my_msgs/Header canbus_header\n\
my_msgs/Header trajectory_header\n\
================================================================================\n\
MSG: my_msgs/SimpleMPCDebug\n\
float64 lateral_error\n\
float64 ref_heading\n\
float64 heading\n\
float64 heading_error\n\
float64 heading_error_rate\n\
float64 lateral_error_rate\n\
float64 curvature\n\
float64 steer_angle\n\
float64 steer_angle_feedforward\n\
float64 steer_angle_lateral_contribution\n\
float64 steer_angle_lateral_rate_contribution\n\
float64 steer_angle_heading_contribution\n\
float64 steer_angle_heading_rate_contribution\n\
float64 steer_angle_feedback\n\
float64 steering_position\n\
float64 ref_speed\n\
float64 steer_angle_limited\n\
float64 station_reference\n\
float64 station_error\n\
float64 speed_reference\n\
float64 speed_error\n\
float64 acceleration_reference\n\
bool is_full_stop\n\
float64 station_feedback\n\
float64 speed_feedback\n\
float64 acceleration_cmd_closeloop\n\
float64 acceleration_cmd\n\
float64 acceleration_lookup\n\
float64 speed_lookup\n\
float64 calibration_value\n\
float64[] matrix_q_updated    \n\
float64[] matrix_r_updated   \n\
";
  }

  static const char* value(const ::my_msgs::ControlCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::ControlCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.throttle);
      stream.next(m.brake);
      stream.next(m.steering_rate);
      stream.next(m.steering_target);
      stream.next(m.parking_brake);
      stream.next(m.speed);
      stream.next(m.acceleration);
      stream.next(m.reset_model);
      stream.next(m.engine_on_off);
      stream.next(m.gear_location);
      stream.next(m.trajectory_fraction);
      stream.next(m.driving_mode);
      stream.next(m.gear_position);
      stream.next(m.signal);
      stream.next(m.latency_stats);
      stream.next(m.pad_msg);
      stream.next(m.engage_advice);
      stream.next(m.is_in_safe_mode);
      stream.next(m.left_turn);
      stream.next(m.right_turn);
      stream.next(m.high_beam);
      stream.next(m.low_beam);
      stream.next(m.horn);
      stream.next(m.turn_signal);
      stream.next(m.LatencyStatus);
      stream.next(m.debug);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::ControlCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::ControlCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::my_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<double>::stream(s, indent + "  ", v.brake);
    s << indent << "steering_rate: ";
    Printer<double>::stream(s, indent + "  ", v.steering_rate);
    s << indent << "steering_target: ";
    Printer<double>::stream(s, indent + "  ", v.steering_target);
    s << indent << "parking_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.parking_brake);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
    s << indent << "reset_model: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_model);
    s << indent << "engine_on_off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.engine_on_off);
    s << indent << "gear_location: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear_location);
    s << indent << "trajectory_fraction: ";
    Printer<double>::stream(s, indent + "  ", v.trajectory_fraction);
    s << indent << "driving_mode: ";
    s << std::endl;
    Printer< ::my_msgs::Chassis_DrivingMode_<ContainerAllocator> >::stream(s, indent + "  ", v.driving_mode);
    s << indent << "gear_position: ";
    s << std::endl;
    Printer< ::my_msgs::Chassis_GearPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.gear_position);
    s << indent << "signal: ";
    s << std::endl;
    Printer< ::my_msgs::Common_VehicleSignal_<ContainerAllocator> >::stream(s, indent + "  ", v.signal);
    s << indent << "latency_stats: ";
    s << std::endl;
    Printer< ::my_msgs::LatencyStats_<ContainerAllocator> >::stream(s, indent + "  ", v.latency_stats);
    s << indent << "pad_msg: ";
    s << std::endl;
    Printer< ::my_msgs::PadMessage_<ContainerAllocator> >::stream(s, indent + "  ", v.pad_msg);
    s << indent << "engage_advice: ";
    s << std::endl;
    Printer< ::my_msgs::Common_EngageAdvise_<ContainerAllocator> >::stream(s, indent + "  ", v.engage_advice);
    s << indent << "is_in_safe_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_in_safe_mode);
    s << indent << "left_turn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_turn);
    s << indent << "right_turn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_turn);
    s << indent << "high_beam: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.high_beam);
    s << indent << "low_beam: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.low_beam);
    s << indent << "horn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horn);
    s << indent << "turn_signal: ";
    s << std::endl;
    Printer< ::my_msgs::TurnSignal_<ContainerAllocator> >::stream(s, indent + "  ", v.turn_signal);
    s << indent << "LatencyStatus: ";
    s << std::endl;
    Printer< ::my_msgs::LatencyStats_<ContainerAllocator> >::stream(s, indent + "  ", v.LatencyStatus);
    s << indent << "debug: ";
    s << std::endl;
    Printer< ::my_msgs::Debug_<ContainerAllocator> >::stream(s, indent + "  ", v.debug);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_CONTROLCOMMAND_H
