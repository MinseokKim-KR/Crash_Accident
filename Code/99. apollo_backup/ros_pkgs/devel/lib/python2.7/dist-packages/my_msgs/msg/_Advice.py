# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/Advice.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Advice(genpy.Message):
  _md5sum = "e984a93e40568fe4b1c5ee588fc6541e"
  _type = "my_msgs/Advice"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 UNKNOWN
int32 DISALLOW_ENGAGE
int32 READY_TO_ENGAGE
int32 KEEP_ENGAGED
int32 PREPARE_DISENGAGE"""
  __slots__ = ['UNKNOWN','DISALLOW_ENGAGE','READY_TO_ENGAGE','KEEP_ENGAGED','PREPARE_DISENGAGE']
  _slot_types = ['int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       UNKNOWN,DISALLOW_ENGAGE,READY_TO_ENGAGE,KEEP_ENGAGED,PREPARE_DISENGAGE

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Advice, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.UNKNOWN is None:
        self.UNKNOWN = 0
      if self.DISALLOW_ENGAGE is None:
        self.DISALLOW_ENGAGE = 0
      if self.READY_TO_ENGAGE is None:
        self.READY_TO_ENGAGE = 0
      if self.KEEP_ENGAGED is None:
        self.KEEP_ENGAGED = 0
      if self.PREPARE_DISENGAGE is None:
        self.PREPARE_DISENGAGE = 0
    else:
      self.UNKNOWN = 0
      self.DISALLOW_ENGAGE = 0
      self.READY_TO_ENGAGE = 0
      self.KEEP_ENGAGED = 0
      self.PREPARE_DISENGAGE = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5i.pack(_x.UNKNOWN, _x.DISALLOW_ENGAGE, _x.READY_TO_ENGAGE, _x.KEEP_ENGAGED, _x.PREPARE_DISENGAGE))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.UNKNOWN, _x.DISALLOW_ENGAGE, _x.READY_TO_ENGAGE, _x.KEEP_ENGAGED, _x.PREPARE_DISENGAGE,) = _struct_5i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5i.pack(_x.UNKNOWN, _x.DISALLOW_ENGAGE, _x.READY_TO_ENGAGE, _x.KEEP_ENGAGED, _x.PREPARE_DISENGAGE))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.UNKNOWN, _x.DISALLOW_ENGAGE, _x.READY_TO_ENGAGE, _x.KEEP_ENGAGED, _x.PREPARE_DISENGAGE,) = _struct_5i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5i = struct.Struct("<5i")
