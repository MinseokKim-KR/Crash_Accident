# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/ErrorCode.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ErrorCode(genpy.Message):
  _md5sum = "7ab8eda953e2a96917c92d24c0e44554"
  _type = "my_msgs/ErrorCode"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 OK

int32 CONTROL_ERROR
int32 CONTROL_INIT_ERROR
int32 CONTROL_COMPUTE_ERROR

int32 CANBUS_ERROR
int32 CAN_CLIENT_ERROR_BASE
int32 CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED
int32 CAN_CLIENT_ERROR_FRAME_NUM
int32 CAN_CLIENT_ERROR_SEND_FAILED
int32 CAN_CLIENT_ERROR_RECV_FAILED

int32 LOCALIZATION_ERROR
int32 LOCALIZATION_ERROR_MSG
int32 LOCALIZATION_ERROR_LIDAR
int32 LOCALIZATION_ERROR_int32EG
int32 LOCALIZATION_ERROR_GNSS

int32 PERCEPTION_ERROR
int32 PERCEPTION_ERROR_TF
int32 PERCEPTION_ERROR_PROCESS
int32 PERCEPTION_FATAL

int32 PREDICTION_ERROR

int32 PLANNING_ERROR

int32 HDMAP_DATA_ERROR

int32 ROUTING_ERROR
int32 ROUTING_ERROR_REQUEST
int32 ROUTING_ERROR_RESPONSE
int32 ROUTING_ERROR_NOT_READY

int32 END_OF_INPUT

int32 HTTP_LOGIC_ERROR
int32 HTTP_RUNTIME_ERROR

int32 RELATIVE_MAP_ERROR
int32 RELATIVE_MAP_NOT_READY


int32 DRIVER_ERROR_GNSS
int32 DRIVER_ERROR_VELODYNE"""
  __slots__ = ['OK','CONTROL_ERROR','CONTROL_INIT_ERROR','CONTROL_COMPUTE_ERROR','CANBUS_ERROR','CAN_CLIENT_ERROR_BASE','CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED','CAN_CLIENT_ERROR_FRAME_NUM','CAN_CLIENT_ERROR_SEND_FAILED','CAN_CLIENT_ERROR_RECV_FAILED','LOCALIZATION_ERROR','LOCALIZATION_ERROR_MSG','LOCALIZATION_ERROR_LIDAR','LOCALIZATION_ERROR_int32EG','LOCALIZATION_ERROR_GNSS','PERCEPTION_ERROR','PERCEPTION_ERROR_TF','PERCEPTION_ERROR_PROCESS','PERCEPTION_FATAL','PREDICTION_ERROR','PLANNING_ERROR','HDMAP_DATA_ERROR','ROUTING_ERROR','ROUTING_ERROR_REQUEST','ROUTING_ERROR_RESPONSE','ROUTING_ERROR_NOT_READY','END_OF_INPUT','HTTP_LOGIC_ERROR','HTTP_RUNTIME_ERROR','RELATIVE_MAP_ERROR','RELATIVE_MAP_NOT_READY','DRIVER_ERROR_GNSS','DRIVER_ERROR_VELODYNE']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       OK,CONTROL_ERROR,CONTROL_INIT_ERROR,CONTROL_COMPUTE_ERROR,CANBUS_ERROR,CAN_CLIENT_ERROR_BASE,CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED,CAN_CLIENT_ERROR_FRAME_NUM,CAN_CLIENT_ERROR_SEND_FAILED,CAN_CLIENT_ERROR_RECV_FAILED,LOCALIZATION_ERROR,LOCALIZATION_ERROR_MSG,LOCALIZATION_ERROR_LIDAR,LOCALIZATION_ERROR_int32EG,LOCALIZATION_ERROR_GNSS,PERCEPTION_ERROR,PERCEPTION_ERROR_TF,PERCEPTION_ERROR_PROCESS,PERCEPTION_FATAL,PREDICTION_ERROR,PLANNING_ERROR,HDMAP_DATA_ERROR,ROUTING_ERROR,ROUTING_ERROR_REQUEST,ROUTING_ERROR_RESPONSE,ROUTING_ERROR_NOT_READY,END_OF_INPUT,HTTP_LOGIC_ERROR,HTTP_RUNTIME_ERROR,RELATIVE_MAP_ERROR,RELATIVE_MAP_NOT_READY,DRIVER_ERROR_GNSS,DRIVER_ERROR_VELODYNE

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ErrorCode, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.OK is None:
        self.OK = 0
      if self.CONTROL_ERROR is None:
        self.CONTROL_ERROR = 0
      if self.CONTROL_INIT_ERROR is None:
        self.CONTROL_INIT_ERROR = 0
      if self.CONTROL_COMPUTE_ERROR is None:
        self.CONTROL_COMPUTE_ERROR = 0
      if self.CANBUS_ERROR is None:
        self.CANBUS_ERROR = 0
      if self.CAN_CLIENT_ERROR_BASE is None:
        self.CAN_CLIENT_ERROR_BASE = 0
      if self.CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED is None:
        self.CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED = 0
      if self.CAN_CLIENT_ERROR_FRAME_NUM is None:
        self.CAN_CLIENT_ERROR_FRAME_NUM = 0
      if self.CAN_CLIENT_ERROR_SEND_FAILED is None:
        self.CAN_CLIENT_ERROR_SEND_FAILED = 0
      if self.CAN_CLIENT_ERROR_RECV_FAILED is None:
        self.CAN_CLIENT_ERROR_RECV_FAILED = 0
      if self.LOCALIZATION_ERROR is None:
        self.LOCALIZATION_ERROR = 0
      if self.LOCALIZATION_ERROR_MSG is None:
        self.LOCALIZATION_ERROR_MSG = 0
      if self.LOCALIZATION_ERROR_LIDAR is None:
        self.LOCALIZATION_ERROR_LIDAR = 0
      if self.LOCALIZATION_ERROR_int32EG is None:
        self.LOCALIZATION_ERROR_int32EG = 0
      if self.LOCALIZATION_ERROR_GNSS is None:
        self.LOCALIZATION_ERROR_GNSS = 0
      if self.PERCEPTION_ERROR is None:
        self.PERCEPTION_ERROR = 0
      if self.PERCEPTION_ERROR_TF is None:
        self.PERCEPTION_ERROR_TF = 0
      if self.PERCEPTION_ERROR_PROCESS is None:
        self.PERCEPTION_ERROR_PROCESS = 0
      if self.PERCEPTION_FATAL is None:
        self.PERCEPTION_FATAL = 0
      if self.PREDICTION_ERROR is None:
        self.PREDICTION_ERROR = 0
      if self.PLANNING_ERROR is None:
        self.PLANNING_ERROR = 0
      if self.HDMAP_DATA_ERROR is None:
        self.HDMAP_DATA_ERROR = 0
      if self.ROUTING_ERROR is None:
        self.ROUTING_ERROR = 0
      if self.ROUTING_ERROR_REQUEST is None:
        self.ROUTING_ERROR_REQUEST = 0
      if self.ROUTING_ERROR_RESPONSE is None:
        self.ROUTING_ERROR_RESPONSE = 0
      if self.ROUTING_ERROR_NOT_READY is None:
        self.ROUTING_ERROR_NOT_READY = 0
      if self.END_OF_INPUT is None:
        self.END_OF_INPUT = 0
      if self.HTTP_LOGIC_ERROR is None:
        self.HTTP_LOGIC_ERROR = 0
      if self.HTTP_RUNTIME_ERROR is None:
        self.HTTP_RUNTIME_ERROR = 0
      if self.RELATIVE_MAP_ERROR is None:
        self.RELATIVE_MAP_ERROR = 0
      if self.RELATIVE_MAP_NOT_READY is None:
        self.RELATIVE_MAP_NOT_READY = 0
      if self.DRIVER_ERROR_GNSS is None:
        self.DRIVER_ERROR_GNSS = 0
      if self.DRIVER_ERROR_VELODYNE is None:
        self.DRIVER_ERROR_VELODYNE = 0
    else:
      self.OK = 0
      self.CONTROL_ERROR = 0
      self.CONTROL_INIT_ERROR = 0
      self.CONTROL_COMPUTE_ERROR = 0
      self.CANBUS_ERROR = 0
      self.CAN_CLIENT_ERROR_BASE = 0
      self.CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED = 0
      self.CAN_CLIENT_ERROR_FRAME_NUM = 0
      self.CAN_CLIENT_ERROR_SEND_FAILED = 0
      self.CAN_CLIENT_ERROR_RECV_FAILED = 0
      self.LOCALIZATION_ERROR = 0
      self.LOCALIZATION_ERROR_MSG = 0
      self.LOCALIZATION_ERROR_LIDAR = 0
      self.LOCALIZATION_ERROR_int32EG = 0
      self.LOCALIZATION_ERROR_GNSS = 0
      self.PERCEPTION_ERROR = 0
      self.PERCEPTION_ERROR_TF = 0
      self.PERCEPTION_ERROR_PROCESS = 0
      self.PERCEPTION_FATAL = 0
      self.PREDICTION_ERROR = 0
      self.PLANNING_ERROR = 0
      self.HDMAP_DATA_ERROR = 0
      self.ROUTING_ERROR = 0
      self.ROUTING_ERROR_REQUEST = 0
      self.ROUTING_ERROR_RESPONSE = 0
      self.ROUTING_ERROR_NOT_READY = 0
      self.END_OF_INPUT = 0
      self.HTTP_LOGIC_ERROR = 0
      self.HTTP_RUNTIME_ERROR = 0
      self.RELATIVE_MAP_ERROR = 0
      self.RELATIVE_MAP_NOT_READY = 0
      self.DRIVER_ERROR_GNSS = 0
      self.DRIVER_ERROR_VELODYNE = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_33i.pack(_x.OK, _x.CONTROL_ERROR, _x.CONTROL_INIT_ERROR, _x.CONTROL_COMPUTE_ERROR, _x.CANBUS_ERROR, _x.CAN_CLIENT_ERROR_BASE, _x.CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED, _x.CAN_CLIENT_ERROR_FRAME_NUM, _x.CAN_CLIENT_ERROR_SEND_FAILED, _x.CAN_CLIENT_ERROR_RECV_FAILED, _x.LOCALIZATION_ERROR, _x.LOCALIZATION_ERROR_MSG, _x.LOCALIZATION_ERROR_LIDAR, _x.LOCALIZATION_ERROR_int32EG, _x.LOCALIZATION_ERROR_GNSS, _x.PERCEPTION_ERROR, _x.PERCEPTION_ERROR_TF, _x.PERCEPTION_ERROR_PROCESS, _x.PERCEPTION_FATAL, _x.PREDICTION_ERROR, _x.PLANNING_ERROR, _x.HDMAP_DATA_ERROR, _x.ROUTING_ERROR, _x.ROUTING_ERROR_REQUEST, _x.ROUTING_ERROR_RESPONSE, _x.ROUTING_ERROR_NOT_READY, _x.END_OF_INPUT, _x.HTTP_LOGIC_ERROR, _x.HTTP_RUNTIME_ERROR, _x.RELATIVE_MAP_ERROR, _x.RELATIVE_MAP_NOT_READY, _x.DRIVER_ERROR_GNSS, _x.DRIVER_ERROR_VELODYNE))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 132
      (_x.OK, _x.CONTROL_ERROR, _x.CONTROL_INIT_ERROR, _x.CONTROL_COMPUTE_ERROR, _x.CANBUS_ERROR, _x.CAN_CLIENT_ERROR_BASE, _x.CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED, _x.CAN_CLIENT_ERROR_FRAME_NUM, _x.CAN_CLIENT_ERROR_SEND_FAILED, _x.CAN_CLIENT_ERROR_RECV_FAILED, _x.LOCALIZATION_ERROR, _x.LOCALIZATION_ERROR_MSG, _x.LOCALIZATION_ERROR_LIDAR, _x.LOCALIZATION_ERROR_int32EG, _x.LOCALIZATION_ERROR_GNSS, _x.PERCEPTION_ERROR, _x.PERCEPTION_ERROR_TF, _x.PERCEPTION_ERROR_PROCESS, _x.PERCEPTION_FATAL, _x.PREDICTION_ERROR, _x.PLANNING_ERROR, _x.HDMAP_DATA_ERROR, _x.ROUTING_ERROR, _x.ROUTING_ERROR_REQUEST, _x.ROUTING_ERROR_RESPONSE, _x.ROUTING_ERROR_NOT_READY, _x.END_OF_INPUT, _x.HTTP_LOGIC_ERROR, _x.HTTP_RUNTIME_ERROR, _x.RELATIVE_MAP_ERROR, _x.RELATIVE_MAP_NOT_READY, _x.DRIVER_ERROR_GNSS, _x.DRIVER_ERROR_VELODYNE,) = _struct_33i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_33i.pack(_x.OK, _x.CONTROL_ERROR, _x.CONTROL_INIT_ERROR, _x.CONTROL_COMPUTE_ERROR, _x.CANBUS_ERROR, _x.CAN_CLIENT_ERROR_BASE, _x.CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED, _x.CAN_CLIENT_ERROR_FRAME_NUM, _x.CAN_CLIENT_ERROR_SEND_FAILED, _x.CAN_CLIENT_ERROR_RECV_FAILED, _x.LOCALIZATION_ERROR, _x.LOCALIZATION_ERROR_MSG, _x.LOCALIZATION_ERROR_LIDAR, _x.LOCALIZATION_ERROR_int32EG, _x.LOCALIZATION_ERROR_GNSS, _x.PERCEPTION_ERROR, _x.PERCEPTION_ERROR_TF, _x.PERCEPTION_ERROR_PROCESS, _x.PERCEPTION_FATAL, _x.PREDICTION_ERROR, _x.PLANNING_ERROR, _x.HDMAP_DATA_ERROR, _x.ROUTING_ERROR, _x.ROUTING_ERROR_REQUEST, _x.ROUTING_ERROR_RESPONSE, _x.ROUTING_ERROR_NOT_READY, _x.END_OF_INPUT, _x.HTTP_LOGIC_ERROR, _x.HTTP_RUNTIME_ERROR, _x.RELATIVE_MAP_ERROR, _x.RELATIVE_MAP_NOT_READY, _x.DRIVER_ERROR_GNSS, _x.DRIVER_ERROR_VELODYNE))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 132
      (_x.OK, _x.CONTROL_ERROR, _x.CONTROL_INIT_ERROR, _x.CONTROL_COMPUTE_ERROR, _x.CANBUS_ERROR, _x.CAN_CLIENT_ERROR_BASE, _x.CAN_CLIENT_ERROR_OPEN_DEVICE_FAILED, _x.CAN_CLIENT_ERROR_FRAME_NUM, _x.CAN_CLIENT_ERROR_SEND_FAILED, _x.CAN_CLIENT_ERROR_RECV_FAILED, _x.LOCALIZATION_ERROR, _x.LOCALIZATION_ERROR_MSG, _x.LOCALIZATION_ERROR_LIDAR, _x.LOCALIZATION_ERROR_int32EG, _x.LOCALIZATION_ERROR_GNSS, _x.PERCEPTION_ERROR, _x.PERCEPTION_ERROR_TF, _x.PERCEPTION_ERROR_PROCESS, _x.PERCEPTION_FATAL, _x.PREDICTION_ERROR, _x.PLANNING_ERROR, _x.HDMAP_DATA_ERROR, _x.ROUTING_ERROR, _x.ROUTING_ERROR_REQUEST, _x.ROUTING_ERROR_RESPONSE, _x.ROUTING_ERROR_NOT_READY, _x.END_OF_INPUT, _x.HTTP_LOGIC_ERROR, _x.HTTP_RUNTIME_ERROR, _x.RELATIVE_MAP_ERROR, _x.RELATIVE_MAP_NOT_READY, _x.DRIVER_ERROR_GNSS, _x.DRIVER_ERROR_VELODYNE,) = _struct_33i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_33i = struct.Struct("<33i")
