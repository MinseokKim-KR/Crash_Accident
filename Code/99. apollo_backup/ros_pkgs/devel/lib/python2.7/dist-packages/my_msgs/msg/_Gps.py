# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/Gps.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_msgs.msg

class Gps(genpy.Message):
  _md5sum = "7421f1c8ecd8692b4016d6b02830e202"
  _type = "my_msgs/Gps"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """my_msgs/Header header
my_msgs/Pose localization
================================================================================
MSG: my_msgs/Header
float64 timestamp_sec
string module_name
uint32 sequence_num
uint32 lidar_timestamp
uint32 camera_timestamp
uint32 radar_timestamp
uint32 version
my_msgs/Status status

================================================================================
MSG: my_msgs/Status
int32 error_code

================================================================================
MSG: my_msgs/Pose
my_msgs/PointENU position
my_msgs/Quaternion orientation
my_msgs/Point3D linear_velocity
my_msgs/Point3D linear_accelration
my_msgs/Point3D angular_velocity
float64 heading
my_msgs/Point3D linear_acceleration_vrf
my_msgs/Point3D angular_velocity_vrf
my_msgs/Point3D euler_angles
================================================================================
MSG: my_msgs/PointENU
float64 x
float64 y
float64 z

================================================================================
MSG: my_msgs/Quaternion
float64 qx
float64 qy
float64 qz
float64 qw
================================================================================
MSG: my_msgs/Point3D
float64 x
float64 y
float64 z"""
  __slots__ = ['header','localization']
  _slot_types = ['my_msgs/Header','my_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,localization

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gps, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = my_msgs.msg.Header()
      if self.localization is None:
        self.localization = my_msgs.msg.Pose()
    else:
      self.header = my_msgs.msg.Header()
      self.localization = my_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Ii26d.pack(_x.header.sequence_num, _x.header.lidar_timestamp, _x.header.camera_timestamp, _x.header.radar_timestamp, _x.header.version, _x.header.status.error_code, _x.localization.position.x, _x.localization.position.y, _x.localization.position.z, _x.localization.orientation.qx, _x.localization.orientation.qy, _x.localization.orientation.qz, _x.localization.orientation.qw, _x.localization.linear_velocity.x, _x.localization.linear_velocity.y, _x.localization.linear_velocity.z, _x.localization.linear_accelration.x, _x.localization.linear_accelration.y, _x.localization.linear_accelration.z, _x.localization.angular_velocity.x, _x.localization.angular_velocity.y, _x.localization.angular_velocity.z, _x.localization.heading, _x.localization.linear_acceleration_vrf.x, _x.localization.linear_acceleration_vrf.y, _x.localization.linear_acceleration_vrf.z, _x.localization.angular_velocity_vrf.x, _x.localization.angular_velocity_vrf.y, _x.localization.angular_velocity_vrf.z, _x.localization.euler_angles.x, _x.localization.euler_angles.y, _x.localization.euler_angles.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = my_msgs.msg.Header()
      if self.localization is None:
        self.localization = my_msgs.msg.Pose()
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      _x = self
      start = end
      end += 232
      (_x.header.sequence_num, _x.header.lidar_timestamp, _x.header.camera_timestamp, _x.header.radar_timestamp, _x.header.version, _x.header.status.error_code, _x.localization.position.x, _x.localization.position.y, _x.localization.position.z, _x.localization.orientation.qx, _x.localization.orientation.qy, _x.localization.orientation.qz, _x.localization.orientation.qw, _x.localization.linear_velocity.x, _x.localization.linear_velocity.y, _x.localization.linear_velocity.z, _x.localization.linear_accelration.x, _x.localization.linear_accelration.y, _x.localization.linear_accelration.z, _x.localization.angular_velocity.x, _x.localization.angular_velocity.y, _x.localization.angular_velocity.z, _x.localization.heading, _x.localization.linear_acceleration_vrf.x, _x.localization.linear_acceleration_vrf.y, _x.localization.linear_acceleration_vrf.z, _x.localization.angular_velocity_vrf.x, _x.localization.angular_velocity_vrf.y, _x.localization.angular_velocity_vrf.z, _x.localization.euler_angles.x, _x.localization.euler_angles.y, _x.localization.euler_angles.z,) = _struct_5Ii26d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Ii26d.pack(_x.header.sequence_num, _x.header.lidar_timestamp, _x.header.camera_timestamp, _x.header.radar_timestamp, _x.header.version, _x.header.status.error_code, _x.localization.position.x, _x.localization.position.y, _x.localization.position.z, _x.localization.orientation.qx, _x.localization.orientation.qy, _x.localization.orientation.qz, _x.localization.orientation.qw, _x.localization.linear_velocity.x, _x.localization.linear_velocity.y, _x.localization.linear_velocity.z, _x.localization.linear_accelration.x, _x.localization.linear_accelration.y, _x.localization.linear_accelration.z, _x.localization.angular_velocity.x, _x.localization.angular_velocity.y, _x.localization.angular_velocity.z, _x.localization.heading, _x.localization.linear_acceleration_vrf.x, _x.localization.linear_acceleration_vrf.y, _x.localization.linear_acceleration_vrf.z, _x.localization.angular_velocity_vrf.x, _x.localization.angular_velocity_vrf.y, _x.localization.angular_velocity_vrf.z, _x.localization.euler_angles.x, _x.localization.euler_angles.y, _x.localization.euler_angles.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = my_msgs.msg.Header()
      if self.localization is None:
        self.localization = my_msgs.msg.Pose()
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      _x = self
      start = end
      end += 232
      (_x.header.sequence_num, _x.header.lidar_timestamp, _x.header.camera_timestamp, _x.header.radar_timestamp, _x.header.version, _x.header.status.error_code, _x.localization.position.x, _x.localization.position.y, _x.localization.position.z, _x.localization.orientation.qx, _x.localization.orientation.qy, _x.localization.orientation.qz, _x.localization.orientation.qw, _x.localization.linear_velocity.x, _x.localization.linear_velocity.y, _x.localization.linear_velocity.z, _x.localization.linear_accelration.x, _x.localization.linear_accelration.y, _x.localization.linear_accelration.z, _x.localization.angular_velocity.x, _x.localization.angular_velocity.y, _x.localization.angular_velocity.z, _x.localization.heading, _x.localization.linear_acceleration_vrf.x, _x.localization.linear_acceleration_vrf.y, _x.localization.linear_acceleration_vrf.z, _x.localization.angular_velocity_vrf.x, _x.localization.angular_velocity_vrf.y, _x.localization.angular_velocity_vrf.z, _x.localization.euler_angles.x, _x.localization.euler_angles.y, _x.localization.euler_angles.z,) = _struct_5Ii26d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
_struct_5Ii26d = struct.Struct("<5Ii26d")
