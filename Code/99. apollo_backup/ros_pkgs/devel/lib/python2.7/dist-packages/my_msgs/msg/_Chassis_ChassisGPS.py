# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/Chassis_ChassisGPS.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Chassis_ChassisGPS(genpy.Message):
  _md5sum = "ff1ff95e6766ab93750064e15813fe58"
  _type = "my_msgs/Chassis_ChassisGPS"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 latitude
float64 longitude
bool gps_valid
int32 year
int32 month
int32 day
int32 hours
int32 minutes
int32 seconds
float64 compass_direction
float64 pdop
bool is_gps_fault
bool is_inferred
float64 altitude
float64 heading
float64 hdop
float64 vdop
uint8 quality
int32 num_satellites
float64 gps_speed"""
  __slots__ = ['latitude','longitude','gps_valid','year','month','day','hours','minutes','seconds','compass_direction','pdop','is_gps_fault','is_inferred','altitude','heading','hdop','vdop','quality','num_satellites','gps_speed']
  _slot_types = ['float64','float64','bool','int32','int32','int32','int32','int32','int32','float64','float64','bool','bool','float64','float64','float64','float64','uint8','int32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       latitude,longitude,gps_valid,year,month,day,hours,minutes,seconds,compass_direction,pdop,is_gps_fault,is_inferred,altitude,heading,hdop,vdop,quality,num_satellites,gps_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Chassis_ChassisGPS, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.gps_valid is None:
        self.gps_valid = False
      if self.year is None:
        self.year = 0
      if self.month is None:
        self.month = 0
      if self.day is None:
        self.day = 0
      if self.hours is None:
        self.hours = 0
      if self.minutes is None:
        self.minutes = 0
      if self.seconds is None:
        self.seconds = 0
      if self.compass_direction is None:
        self.compass_direction = 0.
      if self.pdop is None:
        self.pdop = 0.
      if self.is_gps_fault is None:
        self.is_gps_fault = False
      if self.is_inferred is None:
        self.is_inferred = False
      if self.altitude is None:
        self.altitude = 0.
      if self.heading is None:
        self.heading = 0.
      if self.hdop is None:
        self.hdop = 0.
      if self.vdop is None:
        self.vdop = 0.
      if self.quality is None:
        self.quality = 0
      if self.num_satellites is None:
        self.num_satellites = 0
      if self.gps_speed is None:
        self.gps_speed = 0.
    else:
      self.latitude = 0.
      self.longitude = 0.
      self.gps_valid = False
      self.year = 0
      self.month = 0
      self.day = 0
      self.hours = 0
      self.minutes = 0
      self.seconds = 0
      self.compass_direction = 0.
      self.pdop = 0.
      self.is_gps_fault = False
      self.is_inferred = False
      self.altitude = 0.
      self.heading = 0.
      self.hdop = 0.
      self.vdop = 0.
      self.quality = 0
      self.num_satellites = 0
      self.gps_speed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2dB6i2d2B4dBid.pack(_x.latitude, _x.longitude, _x.gps_valid, _x.year, _x.month, _x.day, _x.hours, _x.minutes, _x.seconds, _x.compass_direction, _x.pdop, _x.is_gps_fault, _x.is_inferred, _x.altitude, _x.heading, _x.hdop, _x.vdop, _x.quality, _x.num_satellites, _x.gps_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 104
      (_x.latitude, _x.longitude, _x.gps_valid, _x.year, _x.month, _x.day, _x.hours, _x.minutes, _x.seconds, _x.compass_direction, _x.pdop, _x.is_gps_fault, _x.is_inferred, _x.altitude, _x.heading, _x.hdop, _x.vdop, _x.quality, _x.num_satellites, _x.gps_speed,) = _struct_2dB6i2d2B4dBid.unpack(str[start:end])
      self.gps_valid = bool(self.gps_valid)
      self.is_gps_fault = bool(self.is_gps_fault)
      self.is_inferred = bool(self.is_inferred)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2dB6i2d2B4dBid.pack(_x.latitude, _x.longitude, _x.gps_valid, _x.year, _x.month, _x.day, _x.hours, _x.minutes, _x.seconds, _x.compass_direction, _x.pdop, _x.is_gps_fault, _x.is_inferred, _x.altitude, _x.heading, _x.hdop, _x.vdop, _x.quality, _x.num_satellites, _x.gps_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 104
      (_x.latitude, _x.longitude, _x.gps_valid, _x.year, _x.month, _x.day, _x.hours, _x.minutes, _x.seconds, _x.compass_direction, _x.pdop, _x.is_gps_fault, _x.is_inferred, _x.altitude, _x.heading, _x.hdop, _x.vdop, _x.quality, _x.num_satellites, _x.gps_speed,) = _struct_2dB6i2d2B4dBid.unpack(str[start:end])
      self.gps_valid = bool(self.gps_valid)
      self.is_gps_fault = bool(self.is_gps_fault)
      self.is_inferred = bool(self.is_inferred)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2dB6i2d2B4dBid = struct.Struct("<2dB6i2d2B4dBid")
