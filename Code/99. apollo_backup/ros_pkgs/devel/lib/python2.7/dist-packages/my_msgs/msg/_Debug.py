# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/Debug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_msgs.msg

class Debug(genpy.Message):
  _md5sum = "8e99488c7d55ccb3ef1d01dcfee346dc"
  _type = "my_msgs/Debug"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """my_msgs/SimpleLongitudinalDebug simple_lon_debug
my_msgs/SimpleLateralDebug simple_lat_debug
my_msgs/InputDebug input_debug
my_msgs/SimpleMPCDebug simple_mpc_debug
================================================================================
MSG: my_msgs/SimpleLongitudinalDebug
float64 station_reference
float64 station_error
float64 station_error_limited
float64 preview_station_error
float64 speed_reference
float64 speed_error
float64 speed_controller_input_limited
float64 preview_speed_reference
float64 preview_speed_error
float64 preview_acceleration_reference
float64 acceleration_cmd_closeloop
float64 acceleration_cmd
float64 acceleration_lookup
float64 speed_lookup
float64 calibration_value
float64 throttle_cmd
float64 brake_cmd
bool is_full_stop
float64 slope_offset_compensation
float64 current_station
float64 path_remain
================================================================================
MSG: my_msgs/SimpleLateralDebug
float64 lateral_error
float64 ref_heading
float64 heading
float64 heading_error
float64 heading_error_rate
float64 lateral_error_rate
float64 curvature
float64 steer_angle
float64 steer_angle_feedforward
float64 steer_angle_lateral_contribution
float64 steer_angle_lateral_rate_contribution
float64 steer_angle_heading_contribution
float64 steer_angle_heading_rate_contribution
float64 steer_angle_feedback
float64 steering_position
float64 ref_speed
float64 steer_angle_limited   
================================================================================
MSG: my_msgs/InputDebug
my_msgs/Header localization_header
my_msgs/Header canbus_header
my_msgs/Header trajectory_header
================================================================================
MSG: my_msgs/Header
float64 timestamp_sec
string module_name
uint32 sequence_num
uint32 lidar_timestamp
uint32 camera_timestamp
uint32 radar_timestamp
uint32 version
my_msgs/Status status

================================================================================
MSG: my_msgs/Status
int32 error_code

================================================================================
MSG: my_msgs/SimpleMPCDebug
float64 lateral_error
float64 ref_heading
float64 heading
float64 heading_error
float64 heading_error_rate
float64 lateral_error_rate
float64 curvature
float64 steer_angle
float64 steer_angle_feedforward
float64 steer_angle_lateral_contribution
float64 steer_angle_lateral_rate_contribution
float64 steer_angle_heading_contribution
float64 steer_angle_heading_rate_contribution
float64 steer_angle_feedback
float64 steering_position
float64 ref_speed
float64 steer_angle_limited
float64 station_reference
float64 station_error
float64 speed_reference
float64 speed_error
float64 acceleration_reference
bool is_full_stop
float64 station_feedback
float64 speed_feedback
float64 acceleration_cmd_closeloop
float64 acceleration_cmd
float64 acceleration_lookup
float64 speed_lookup
float64 calibration_value
float64[] matrix_q_updated    
float64[] matrix_r_updated   """
  __slots__ = ['simple_lon_debug','simple_lat_debug','input_debug','simple_mpc_debug']
  _slot_types = ['my_msgs/SimpleLongitudinalDebug','my_msgs/SimpleLateralDebug','my_msgs/InputDebug','my_msgs/SimpleMPCDebug']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       simple_lon_debug,simple_lat_debug,input_debug,simple_mpc_debug

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Debug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.simple_lon_debug is None:
        self.simple_lon_debug = my_msgs.msg.SimpleLongitudinalDebug()
      if self.simple_lat_debug is None:
        self.simple_lat_debug = my_msgs.msg.SimpleLateralDebug()
      if self.input_debug is None:
        self.input_debug = my_msgs.msg.InputDebug()
      if self.simple_mpc_debug is None:
        self.simple_mpc_debug = my_msgs.msg.SimpleMPCDebug()
    else:
      self.simple_lon_debug = my_msgs.msg.SimpleLongitudinalDebug()
      self.simple_lat_debug = my_msgs.msg.SimpleLateralDebug()
      self.input_debug = my_msgs.msg.InputDebug()
      self.simple_mpc_debug = my_msgs.msg.SimpleMPCDebug()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_17dB21d.pack(_x.simple_lon_debug.station_reference, _x.simple_lon_debug.station_error, _x.simple_lon_debug.station_error_limited, _x.simple_lon_debug.preview_station_error, _x.simple_lon_debug.speed_reference, _x.simple_lon_debug.speed_error, _x.simple_lon_debug.speed_controller_input_limited, _x.simple_lon_debug.preview_speed_reference, _x.simple_lon_debug.preview_speed_error, _x.simple_lon_debug.preview_acceleration_reference, _x.simple_lon_debug.acceleration_cmd_closeloop, _x.simple_lon_debug.acceleration_cmd, _x.simple_lon_debug.acceleration_lookup, _x.simple_lon_debug.speed_lookup, _x.simple_lon_debug.calibration_value, _x.simple_lon_debug.throttle_cmd, _x.simple_lon_debug.brake_cmd, _x.simple_lon_debug.is_full_stop, _x.simple_lon_debug.slope_offset_compensation, _x.simple_lon_debug.current_station, _x.simple_lon_debug.path_remain, _x.simple_lat_debug.lateral_error, _x.simple_lat_debug.ref_heading, _x.simple_lat_debug.heading, _x.simple_lat_debug.heading_error, _x.simple_lat_debug.heading_error_rate, _x.simple_lat_debug.lateral_error_rate, _x.simple_lat_debug.curvature, _x.simple_lat_debug.steer_angle, _x.simple_lat_debug.steer_angle_feedforward, _x.simple_lat_debug.steer_angle_lateral_contribution, _x.simple_lat_debug.steer_angle_lateral_rate_contribution, _x.simple_lat_debug.steer_angle_heading_contribution, _x.simple_lat_debug.steer_angle_heading_rate_contribution, _x.simple_lat_debug.steer_angle_feedback, _x.simple_lat_debug.steering_position, _x.simple_lat_debug.ref_speed, _x.simple_lat_debug.steer_angle_limited, _x.input_debug.localization_header.timestamp_sec))
      _x = self.input_debug.localization_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid.pack(_x.input_debug.localization_header.sequence_num, _x.input_debug.localization_header.lidar_timestamp, _x.input_debug.localization_header.camera_timestamp, _x.input_debug.localization_header.radar_timestamp, _x.input_debug.localization_header.version, _x.input_debug.localization_header.status.error_code, _x.input_debug.canbus_header.timestamp_sec))
      _x = self.input_debug.canbus_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid.pack(_x.input_debug.canbus_header.sequence_num, _x.input_debug.canbus_header.lidar_timestamp, _x.input_debug.canbus_header.camera_timestamp, _x.input_debug.canbus_header.radar_timestamp, _x.input_debug.canbus_header.version, _x.input_debug.canbus_header.status.error_code, _x.input_debug.trajectory_header.timestamp_sec))
      _x = self.input_debug.trajectory_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Ii22dB7d.pack(_x.input_debug.trajectory_header.sequence_num, _x.input_debug.trajectory_header.lidar_timestamp, _x.input_debug.trajectory_header.camera_timestamp, _x.input_debug.trajectory_header.radar_timestamp, _x.input_debug.trajectory_header.version, _x.input_debug.trajectory_header.status.error_code, _x.simple_mpc_debug.lateral_error, _x.simple_mpc_debug.ref_heading, _x.simple_mpc_debug.heading, _x.simple_mpc_debug.heading_error, _x.simple_mpc_debug.heading_error_rate, _x.simple_mpc_debug.lateral_error_rate, _x.simple_mpc_debug.curvature, _x.simple_mpc_debug.steer_angle, _x.simple_mpc_debug.steer_angle_feedforward, _x.simple_mpc_debug.steer_angle_lateral_contribution, _x.simple_mpc_debug.steer_angle_lateral_rate_contribution, _x.simple_mpc_debug.steer_angle_heading_contribution, _x.simple_mpc_debug.steer_angle_heading_rate_contribution, _x.simple_mpc_debug.steer_angle_feedback, _x.simple_mpc_debug.steering_position, _x.simple_mpc_debug.ref_speed, _x.simple_mpc_debug.steer_angle_limited, _x.simple_mpc_debug.station_reference, _x.simple_mpc_debug.station_error, _x.simple_mpc_debug.speed_reference, _x.simple_mpc_debug.speed_error, _x.simple_mpc_debug.acceleration_reference, _x.simple_mpc_debug.is_full_stop, _x.simple_mpc_debug.station_feedback, _x.simple_mpc_debug.speed_feedback, _x.simple_mpc_debug.acceleration_cmd_closeloop, _x.simple_mpc_debug.acceleration_cmd, _x.simple_mpc_debug.acceleration_lookup, _x.simple_mpc_debug.speed_lookup, _x.simple_mpc_debug.calibration_value))
      length = len(self.simple_mpc_debug.matrix_q_updated)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.simple_mpc_debug.matrix_q_updated))
      length = len(self.simple_mpc_debug.matrix_r_updated)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.simple_mpc_debug.matrix_r_updated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.simple_lon_debug is None:
        self.simple_lon_debug = my_msgs.msg.SimpleLongitudinalDebug()
      if self.simple_lat_debug is None:
        self.simple_lat_debug = my_msgs.msg.SimpleLateralDebug()
      if self.input_debug is None:
        self.input_debug = my_msgs.msg.InputDebug()
      if self.simple_mpc_debug is None:
        self.simple_mpc_debug = my_msgs.msg.SimpleMPCDebug()
      end = 0
      _x = self
      start = end
      end += 305
      (_x.simple_lon_debug.station_reference, _x.simple_lon_debug.station_error, _x.simple_lon_debug.station_error_limited, _x.simple_lon_debug.preview_station_error, _x.simple_lon_debug.speed_reference, _x.simple_lon_debug.speed_error, _x.simple_lon_debug.speed_controller_input_limited, _x.simple_lon_debug.preview_speed_reference, _x.simple_lon_debug.preview_speed_error, _x.simple_lon_debug.preview_acceleration_reference, _x.simple_lon_debug.acceleration_cmd_closeloop, _x.simple_lon_debug.acceleration_cmd, _x.simple_lon_debug.acceleration_lookup, _x.simple_lon_debug.speed_lookup, _x.simple_lon_debug.calibration_value, _x.simple_lon_debug.throttle_cmd, _x.simple_lon_debug.brake_cmd, _x.simple_lon_debug.is_full_stop, _x.simple_lon_debug.slope_offset_compensation, _x.simple_lon_debug.current_station, _x.simple_lon_debug.path_remain, _x.simple_lat_debug.lateral_error, _x.simple_lat_debug.ref_heading, _x.simple_lat_debug.heading, _x.simple_lat_debug.heading_error, _x.simple_lat_debug.heading_error_rate, _x.simple_lat_debug.lateral_error_rate, _x.simple_lat_debug.curvature, _x.simple_lat_debug.steer_angle, _x.simple_lat_debug.steer_angle_feedforward, _x.simple_lat_debug.steer_angle_lateral_contribution, _x.simple_lat_debug.steer_angle_lateral_rate_contribution, _x.simple_lat_debug.steer_angle_heading_contribution, _x.simple_lat_debug.steer_angle_heading_rate_contribution, _x.simple_lat_debug.steer_angle_feedback, _x.simple_lat_debug.steering_position, _x.simple_lat_debug.ref_speed, _x.simple_lat_debug.steer_angle_limited, _x.input_debug.localization_header.timestamp_sec,) = _struct_17dB21d.unpack(str[start:end])
      self.simple_lon_debug.is_full_stop = bool(self.simple_lon_debug.is_full_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.localization_header.module_name = str[start:end].decode('utf-8')
      else:
        self.input_debug.localization_header.module_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.input_debug.localization_header.sequence_num, _x.input_debug.localization_header.lidar_timestamp, _x.input_debug.localization_header.camera_timestamp, _x.input_debug.localization_header.radar_timestamp, _x.input_debug.localization_header.version, _x.input_debug.localization_header.status.error_code, _x.input_debug.canbus_header.timestamp_sec,) = _struct_5Iid.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.canbus_header.module_name = str[start:end].decode('utf-8')
      else:
        self.input_debug.canbus_header.module_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.input_debug.canbus_header.sequence_num, _x.input_debug.canbus_header.lidar_timestamp, _x.input_debug.canbus_header.camera_timestamp, _x.input_debug.canbus_header.radar_timestamp, _x.input_debug.canbus_header.version, _x.input_debug.canbus_header.status.error_code, _x.input_debug.trajectory_header.timestamp_sec,) = _struct_5Iid.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.trajectory_header.module_name = str[start:end].decode('utf-8')
      else:
        self.input_debug.trajectory_header.module_name = str[start:end]
      _x = self
      start = end
      end += 257
      (_x.input_debug.trajectory_header.sequence_num, _x.input_debug.trajectory_header.lidar_timestamp, _x.input_debug.trajectory_header.camera_timestamp, _x.input_debug.trajectory_header.radar_timestamp, _x.input_debug.trajectory_header.version, _x.input_debug.trajectory_header.status.error_code, _x.simple_mpc_debug.lateral_error, _x.simple_mpc_debug.ref_heading, _x.simple_mpc_debug.heading, _x.simple_mpc_debug.heading_error, _x.simple_mpc_debug.heading_error_rate, _x.simple_mpc_debug.lateral_error_rate, _x.simple_mpc_debug.curvature, _x.simple_mpc_debug.steer_angle, _x.simple_mpc_debug.steer_angle_feedforward, _x.simple_mpc_debug.steer_angle_lateral_contribution, _x.simple_mpc_debug.steer_angle_lateral_rate_contribution, _x.simple_mpc_debug.steer_angle_heading_contribution, _x.simple_mpc_debug.steer_angle_heading_rate_contribution, _x.simple_mpc_debug.steer_angle_feedback, _x.simple_mpc_debug.steering_position, _x.simple_mpc_debug.ref_speed, _x.simple_mpc_debug.steer_angle_limited, _x.simple_mpc_debug.station_reference, _x.simple_mpc_debug.station_error, _x.simple_mpc_debug.speed_reference, _x.simple_mpc_debug.speed_error, _x.simple_mpc_debug.acceleration_reference, _x.simple_mpc_debug.is_full_stop, _x.simple_mpc_debug.station_feedback, _x.simple_mpc_debug.speed_feedback, _x.simple_mpc_debug.acceleration_cmd_closeloop, _x.simple_mpc_debug.acceleration_cmd, _x.simple_mpc_debug.acceleration_lookup, _x.simple_mpc_debug.speed_lookup, _x.simple_mpc_debug.calibration_value,) = _struct_5Ii22dB7d.unpack(str[start:end])
      self.simple_mpc_debug.is_full_stop = bool(self.simple_mpc_debug.is_full_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.simple_mpc_debug.matrix_q_updated = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.simple_mpc_debug.matrix_r_updated = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_17dB21d.pack(_x.simple_lon_debug.station_reference, _x.simple_lon_debug.station_error, _x.simple_lon_debug.station_error_limited, _x.simple_lon_debug.preview_station_error, _x.simple_lon_debug.speed_reference, _x.simple_lon_debug.speed_error, _x.simple_lon_debug.speed_controller_input_limited, _x.simple_lon_debug.preview_speed_reference, _x.simple_lon_debug.preview_speed_error, _x.simple_lon_debug.preview_acceleration_reference, _x.simple_lon_debug.acceleration_cmd_closeloop, _x.simple_lon_debug.acceleration_cmd, _x.simple_lon_debug.acceleration_lookup, _x.simple_lon_debug.speed_lookup, _x.simple_lon_debug.calibration_value, _x.simple_lon_debug.throttle_cmd, _x.simple_lon_debug.brake_cmd, _x.simple_lon_debug.is_full_stop, _x.simple_lon_debug.slope_offset_compensation, _x.simple_lon_debug.current_station, _x.simple_lon_debug.path_remain, _x.simple_lat_debug.lateral_error, _x.simple_lat_debug.ref_heading, _x.simple_lat_debug.heading, _x.simple_lat_debug.heading_error, _x.simple_lat_debug.heading_error_rate, _x.simple_lat_debug.lateral_error_rate, _x.simple_lat_debug.curvature, _x.simple_lat_debug.steer_angle, _x.simple_lat_debug.steer_angle_feedforward, _x.simple_lat_debug.steer_angle_lateral_contribution, _x.simple_lat_debug.steer_angle_lateral_rate_contribution, _x.simple_lat_debug.steer_angle_heading_contribution, _x.simple_lat_debug.steer_angle_heading_rate_contribution, _x.simple_lat_debug.steer_angle_feedback, _x.simple_lat_debug.steering_position, _x.simple_lat_debug.ref_speed, _x.simple_lat_debug.steer_angle_limited, _x.input_debug.localization_header.timestamp_sec))
      _x = self.input_debug.localization_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid.pack(_x.input_debug.localization_header.sequence_num, _x.input_debug.localization_header.lidar_timestamp, _x.input_debug.localization_header.camera_timestamp, _x.input_debug.localization_header.radar_timestamp, _x.input_debug.localization_header.version, _x.input_debug.localization_header.status.error_code, _x.input_debug.canbus_header.timestamp_sec))
      _x = self.input_debug.canbus_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid.pack(_x.input_debug.canbus_header.sequence_num, _x.input_debug.canbus_header.lidar_timestamp, _x.input_debug.canbus_header.camera_timestamp, _x.input_debug.canbus_header.radar_timestamp, _x.input_debug.canbus_header.version, _x.input_debug.canbus_header.status.error_code, _x.input_debug.trajectory_header.timestamp_sec))
      _x = self.input_debug.trajectory_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Ii22dB7d.pack(_x.input_debug.trajectory_header.sequence_num, _x.input_debug.trajectory_header.lidar_timestamp, _x.input_debug.trajectory_header.camera_timestamp, _x.input_debug.trajectory_header.radar_timestamp, _x.input_debug.trajectory_header.version, _x.input_debug.trajectory_header.status.error_code, _x.simple_mpc_debug.lateral_error, _x.simple_mpc_debug.ref_heading, _x.simple_mpc_debug.heading, _x.simple_mpc_debug.heading_error, _x.simple_mpc_debug.heading_error_rate, _x.simple_mpc_debug.lateral_error_rate, _x.simple_mpc_debug.curvature, _x.simple_mpc_debug.steer_angle, _x.simple_mpc_debug.steer_angle_feedforward, _x.simple_mpc_debug.steer_angle_lateral_contribution, _x.simple_mpc_debug.steer_angle_lateral_rate_contribution, _x.simple_mpc_debug.steer_angle_heading_contribution, _x.simple_mpc_debug.steer_angle_heading_rate_contribution, _x.simple_mpc_debug.steer_angle_feedback, _x.simple_mpc_debug.steering_position, _x.simple_mpc_debug.ref_speed, _x.simple_mpc_debug.steer_angle_limited, _x.simple_mpc_debug.station_reference, _x.simple_mpc_debug.station_error, _x.simple_mpc_debug.speed_reference, _x.simple_mpc_debug.speed_error, _x.simple_mpc_debug.acceleration_reference, _x.simple_mpc_debug.is_full_stop, _x.simple_mpc_debug.station_feedback, _x.simple_mpc_debug.speed_feedback, _x.simple_mpc_debug.acceleration_cmd_closeloop, _x.simple_mpc_debug.acceleration_cmd, _x.simple_mpc_debug.acceleration_lookup, _x.simple_mpc_debug.speed_lookup, _x.simple_mpc_debug.calibration_value))
      length = len(self.simple_mpc_debug.matrix_q_updated)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.simple_mpc_debug.matrix_q_updated.tostring())
      length = len(self.simple_mpc_debug.matrix_r_updated)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.simple_mpc_debug.matrix_r_updated.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.simple_lon_debug is None:
        self.simple_lon_debug = my_msgs.msg.SimpleLongitudinalDebug()
      if self.simple_lat_debug is None:
        self.simple_lat_debug = my_msgs.msg.SimpleLateralDebug()
      if self.input_debug is None:
        self.input_debug = my_msgs.msg.InputDebug()
      if self.simple_mpc_debug is None:
        self.simple_mpc_debug = my_msgs.msg.SimpleMPCDebug()
      end = 0
      _x = self
      start = end
      end += 305
      (_x.simple_lon_debug.station_reference, _x.simple_lon_debug.station_error, _x.simple_lon_debug.station_error_limited, _x.simple_lon_debug.preview_station_error, _x.simple_lon_debug.speed_reference, _x.simple_lon_debug.speed_error, _x.simple_lon_debug.speed_controller_input_limited, _x.simple_lon_debug.preview_speed_reference, _x.simple_lon_debug.preview_speed_error, _x.simple_lon_debug.preview_acceleration_reference, _x.simple_lon_debug.acceleration_cmd_closeloop, _x.simple_lon_debug.acceleration_cmd, _x.simple_lon_debug.acceleration_lookup, _x.simple_lon_debug.speed_lookup, _x.simple_lon_debug.calibration_value, _x.simple_lon_debug.throttle_cmd, _x.simple_lon_debug.brake_cmd, _x.simple_lon_debug.is_full_stop, _x.simple_lon_debug.slope_offset_compensation, _x.simple_lon_debug.current_station, _x.simple_lon_debug.path_remain, _x.simple_lat_debug.lateral_error, _x.simple_lat_debug.ref_heading, _x.simple_lat_debug.heading, _x.simple_lat_debug.heading_error, _x.simple_lat_debug.heading_error_rate, _x.simple_lat_debug.lateral_error_rate, _x.simple_lat_debug.curvature, _x.simple_lat_debug.steer_angle, _x.simple_lat_debug.steer_angle_feedforward, _x.simple_lat_debug.steer_angle_lateral_contribution, _x.simple_lat_debug.steer_angle_lateral_rate_contribution, _x.simple_lat_debug.steer_angle_heading_contribution, _x.simple_lat_debug.steer_angle_heading_rate_contribution, _x.simple_lat_debug.steer_angle_feedback, _x.simple_lat_debug.steering_position, _x.simple_lat_debug.ref_speed, _x.simple_lat_debug.steer_angle_limited, _x.input_debug.localization_header.timestamp_sec,) = _struct_17dB21d.unpack(str[start:end])
      self.simple_lon_debug.is_full_stop = bool(self.simple_lon_debug.is_full_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.localization_header.module_name = str[start:end].decode('utf-8')
      else:
        self.input_debug.localization_header.module_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.input_debug.localization_header.sequence_num, _x.input_debug.localization_header.lidar_timestamp, _x.input_debug.localization_header.camera_timestamp, _x.input_debug.localization_header.radar_timestamp, _x.input_debug.localization_header.version, _x.input_debug.localization_header.status.error_code, _x.input_debug.canbus_header.timestamp_sec,) = _struct_5Iid.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.canbus_header.module_name = str[start:end].decode('utf-8')
      else:
        self.input_debug.canbus_header.module_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.input_debug.canbus_header.sequence_num, _x.input_debug.canbus_header.lidar_timestamp, _x.input_debug.canbus_header.camera_timestamp, _x.input_debug.canbus_header.radar_timestamp, _x.input_debug.canbus_header.version, _x.input_debug.canbus_header.status.error_code, _x.input_debug.trajectory_header.timestamp_sec,) = _struct_5Iid.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.input_debug.trajectory_header.module_name = str[start:end].decode('utf-8')
      else:
        self.input_debug.trajectory_header.module_name = str[start:end]
      _x = self
      start = end
      end += 257
      (_x.input_debug.trajectory_header.sequence_num, _x.input_debug.trajectory_header.lidar_timestamp, _x.input_debug.trajectory_header.camera_timestamp, _x.input_debug.trajectory_header.radar_timestamp, _x.input_debug.trajectory_header.version, _x.input_debug.trajectory_header.status.error_code, _x.simple_mpc_debug.lateral_error, _x.simple_mpc_debug.ref_heading, _x.simple_mpc_debug.heading, _x.simple_mpc_debug.heading_error, _x.simple_mpc_debug.heading_error_rate, _x.simple_mpc_debug.lateral_error_rate, _x.simple_mpc_debug.curvature, _x.simple_mpc_debug.steer_angle, _x.simple_mpc_debug.steer_angle_feedforward, _x.simple_mpc_debug.steer_angle_lateral_contribution, _x.simple_mpc_debug.steer_angle_lateral_rate_contribution, _x.simple_mpc_debug.steer_angle_heading_contribution, _x.simple_mpc_debug.steer_angle_heading_rate_contribution, _x.simple_mpc_debug.steer_angle_feedback, _x.simple_mpc_debug.steering_position, _x.simple_mpc_debug.ref_speed, _x.simple_mpc_debug.steer_angle_limited, _x.simple_mpc_debug.station_reference, _x.simple_mpc_debug.station_error, _x.simple_mpc_debug.speed_reference, _x.simple_mpc_debug.speed_error, _x.simple_mpc_debug.acceleration_reference, _x.simple_mpc_debug.is_full_stop, _x.simple_mpc_debug.station_feedback, _x.simple_mpc_debug.speed_feedback, _x.simple_mpc_debug.acceleration_cmd_closeloop, _x.simple_mpc_debug.acceleration_cmd, _x.simple_mpc_debug.acceleration_lookup, _x.simple_mpc_debug.speed_lookup, _x.simple_mpc_debug.calibration_value,) = _struct_5Ii22dB7d.unpack(str[start:end])
      self.simple_mpc_debug.is_full_stop = bool(self.simple_mpc_debug.is_full_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.simple_mpc_debug.matrix_q_updated = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.simple_mpc_debug.matrix_r_updated = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5Iid = struct.Struct("<5Iid")
_struct_17dB21d = struct.Struct("<17dB21d")
_struct_5Ii22dB7d = struct.Struct("<5Ii22dB7d")
