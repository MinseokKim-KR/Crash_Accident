# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/Chassis_ErrorCode.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Chassis_ErrorCode(genpy.Message):
  _md5sum = "ef293f4c10de869b0f2bdec79181d3ce"
  _type = "my_msgs/Chassis_ErrorCode"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 NO_ERROR
int32 CMD_NOT_IN_PERIOD
int32 CHASSIS_ERROR
int32 MANUAL_int32ERVENTION
int32 CHASSIS_CAN_NOT_IN_PERIOD
int32 UNKNOWN_ERROR"""
  __slots__ = ['NO_ERROR','CMD_NOT_IN_PERIOD','CHASSIS_ERROR','MANUAL_int32ERVENTION','CHASSIS_CAN_NOT_IN_PERIOD','UNKNOWN_ERROR']
  _slot_types = ['int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       NO_ERROR,CMD_NOT_IN_PERIOD,CHASSIS_ERROR,MANUAL_int32ERVENTION,CHASSIS_CAN_NOT_IN_PERIOD,UNKNOWN_ERROR

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Chassis_ErrorCode, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.NO_ERROR is None:
        self.NO_ERROR = 0
      if self.CMD_NOT_IN_PERIOD is None:
        self.CMD_NOT_IN_PERIOD = 0
      if self.CHASSIS_ERROR is None:
        self.CHASSIS_ERROR = 0
      if self.MANUAL_int32ERVENTION is None:
        self.MANUAL_int32ERVENTION = 0
      if self.CHASSIS_CAN_NOT_IN_PERIOD is None:
        self.CHASSIS_CAN_NOT_IN_PERIOD = 0
      if self.UNKNOWN_ERROR is None:
        self.UNKNOWN_ERROR = 0
    else:
      self.NO_ERROR = 0
      self.CMD_NOT_IN_PERIOD = 0
      self.CHASSIS_ERROR = 0
      self.MANUAL_int32ERVENTION = 0
      self.CHASSIS_CAN_NOT_IN_PERIOD = 0
      self.UNKNOWN_ERROR = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6i.pack(_x.NO_ERROR, _x.CMD_NOT_IN_PERIOD, _x.CHASSIS_ERROR, _x.MANUAL_int32ERVENTION, _x.CHASSIS_CAN_NOT_IN_PERIOD, _x.UNKNOWN_ERROR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.NO_ERROR, _x.CMD_NOT_IN_PERIOD, _x.CHASSIS_ERROR, _x.MANUAL_int32ERVENTION, _x.CHASSIS_CAN_NOT_IN_PERIOD, _x.UNKNOWN_ERROR,) = _struct_6i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6i.pack(_x.NO_ERROR, _x.CMD_NOT_IN_PERIOD, _x.CHASSIS_ERROR, _x.MANUAL_int32ERVENTION, _x.CHASSIS_CAN_NOT_IN_PERIOD, _x.UNKNOWN_ERROR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.NO_ERROR, _x.CMD_NOT_IN_PERIOD, _x.CHASSIS_ERROR, _x.MANUAL_int32ERVENTION, _x.CHASSIS_CAN_NOT_IN_PERIOD, _x.UNKNOWN_ERROR,) = _struct_6i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6i = struct.Struct("<6i")
