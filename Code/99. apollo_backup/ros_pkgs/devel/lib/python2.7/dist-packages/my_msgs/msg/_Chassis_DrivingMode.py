# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/Chassis_DrivingMode.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Chassis_DrivingMode(genpy.Message):
  _md5sum = "25264c128a7e7f9ed13d6c02e1e8e77f"
  _type = "my_msgs/Chassis_DrivingMode"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 COMPLETE_MANUAL
int32 COMPLETE_AUTO_DRIVE
int32 AUTO_STEER_ONLY
int32 AUTO_SPEED_ONLY
int32 EMERGENCY_MODE"""
  __slots__ = ['COMPLETE_MANUAL','COMPLETE_AUTO_DRIVE','AUTO_STEER_ONLY','AUTO_SPEED_ONLY','EMERGENCY_MODE']
  _slot_types = ['int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       COMPLETE_MANUAL,COMPLETE_AUTO_DRIVE,AUTO_STEER_ONLY,AUTO_SPEED_ONLY,EMERGENCY_MODE

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Chassis_DrivingMode, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.COMPLETE_MANUAL is None:
        self.COMPLETE_MANUAL = 0
      if self.COMPLETE_AUTO_DRIVE is None:
        self.COMPLETE_AUTO_DRIVE = 0
      if self.AUTO_STEER_ONLY is None:
        self.AUTO_STEER_ONLY = 0
      if self.AUTO_SPEED_ONLY is None:
        self.AUTO_SPEED_ONLY = 0
      if self.EMERGENCY_MODE is None:
        self.EMERGENCY_MODE = 0
    else:
      self.COMPLETE_MANUAL = 0
      self.COMPLETE_AUTO_DRIVE = 0
      self.AUTO_STEER_ONLY = 0
      self.AUTO_SPEED_ONLY = 0
      self.EMERGENCY_MODE = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5i.pack(_x.COMPLETE_MANUAL, _x.COMPLETE_AUTO_DRIVE, _x.AUTO_STEER_ONLY, _x.AUTO_SPEED_ONLY, _x.EMERGENCY_MODE))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.COMPLETE_MANUAL, _x.COMPLETE_AUTO_DRIVE, _x.AUTO_STEER_ONLY, _x.AUTO_SPEED_ONLY, _x.EMERGENCY_MODE,) = _struct_5i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5i.pack(_x.COMPLETE_MANUAL, _x.COMPLETE_AUTO_DRIVE, _x.AUTO_STEER_ONLY, _x.AUTO_SPEED_ONLY, _x.EMERGENCY_MODE))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.COMPLETE_MANUAL, _x.COMPLETE_AUTO_DRIVE, _x.AUTO_STEER_ONLY, _x.AUTO_SPEED_ONLY, _x.EMERGENCY_MODE,) = _struct_5i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5i = struct.Struct("<5i")
