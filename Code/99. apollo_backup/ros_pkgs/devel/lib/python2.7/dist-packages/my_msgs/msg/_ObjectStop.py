# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/ObjectStop.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_msgs.msg

class ObjectStop(genpy.Message):
  _md5sum = "1679d28807e1b864311070144e4b5fa8"
  _type = "my_msgs/ObjectStop"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """my_msgs/StopReasonCode reason_code
float64 distance_s
my_msgs/PointENU stop_point32
float64 stop_heading
byte[] wait_for_obstacle
================================================================================
MSG: my_msgs/StopReasonCode
int32 STOP_REASON_HEAD_VEHICLE
int32 STOP_REASON_DESTINATION
int32 STOP_REASON_PEDESTRIAN
int32 STOP_REASON_OBSTACLE
int32 STOP_REASON_PREPARKING
int32 STOP_REASON_SIGNAL
int32 STOP_REASON_STOP_SIGN
int32 STOP_REASON_YIELD_SIGN
int32 STOP_REASON_CLEAR_ZONE
int32 STOP_REASON_CROSSWALK
int32 STOP_REASON_CREEPER
int32 STOP_REASON_REFERENCE_END
int32 STOP_REASON_YELLOW_SIGNAL
int32 STOP_REASON_PULL_OVER
================================================================================
MSG: my_msgs/PointENU
float64 x
float64 y
float64 z
"""
  __slots__ = ['reason_code','distance_s','stop_point32','stop_heading','wait_for_obstacle']
  _slot_types = ['my_msgs/StopReasonCode','float64','my_msgs/PointENU','float64','byte[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reason_code,distance_s,stop_point32,stop_heading,wait_for_obstacle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectStop, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.reason_code is None:
        self.reason_code = my_msgs.msg.StopReasonCode()
      if self.distance_s is None:
        self.distance_s = 0.
      if self.stop_point32 is None:
        self.stop_point32 = my_msgs.msg.PointENU()
      if self.stop_heading is None:
        self.stop_heading = 0.
      if self.wait_for_obstacle is None:
        self.wait_for_obstacle = []
    else:
      self.reason_code = my_msgs.msg.StopReasonCode()
      self.distance_s = 0.
      self.stop_point32 = my_msgs.msg.PointENU()
      self.stop_heading = 0.
      self.wait_for_obstacle = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_14i5d.pack(_x.reason_code.STOP_REASON_HEAD_VEHICLE, _x.reason_code.STOP_REASON_DESTINATION, _x.reason_code.STOP_REASON_PEDESTRIAN, _x.reason_code.STOP_REASON_OBSTACLE, _x.reason_code.STOP_REASON_PREPARKING, _x.reason_code.STOP_REASON_SIGNAL, _x.reason_code.STOP_REASON_STOP_SIGN, _x.reason_code.STOP_REASON_YIELD_SIGN, _x.reason_code.STOP_REASON_CLEAR_ZONE, _x.reason_code.STOP_REASON_CROSSWALK, _x.reason_code.STOP_REASON_CREEPER, _x.reason_code.STOP_REASON_REFERENCE_END, _x.reason_code.STOP_REASON_YELLOW_SIGNAL, _x.reason_code.STOP_REASON_PULL_OVER, _x.distance_s, _x.stop_point32.x, _x.stop_point32.y, _x.stop_point32.z, _x.stop_heading))
      length = len(self.wait_for_obstacle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.wait_for_obstacle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.reason_code is None:
        self.reason_code = my_msgs.msg.StopReasonCode()
      if self.stop_point32 is None:
        self.stop_point32 = my_msgs.msg.PointENU()
      end = 0
      _x = self
      start = end
      end += 96
      (_x.reason_code.STOP_REASON_HEAD_VEHICLE, _x.reason_code.STOP_REASON_DESTINATION, _x.reason_code.STOP_REASON_PEDESTRIAN, _x.reason_code.STOP_REASON_OBSTACLE, _x.reason_code.STOP_REASON_PREPARKING, _x.reason_code.STOP_REASON_SIGNAL, _x.reason_code.STOP_REASON_STOP_SIGN, _x.reason_code.STOP_REASON_YIELD_SIGN, _x.reason_code.STOP_REASON_CLEAR_ZONE, _x.reason_code.STOP_REASON_CROSSWALK, _x.reason_code.STOP_REASON_CREEPER, _x.reason_code.STOP_REASON_REFERENCE_END, _x.reason_code.STOP_REASON_YELLOW_SIGNAL, _x.reason_code.STOP_REASON_PULL_OVER, _x.distance_s, _x.stop_point32.x, _x.stop_point32.y, _x.stop_point32.z, _x.stop_heading,) = _struct_14i5d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.wait_for_obstacle = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_14i5d.pack(_x.reason_code.STOP_REASON_HEAD_VEHICLE, _x.reason_code.STOP_REASON_DESTINATION, _x.reason_code.STOP_REASON_PEDESTRIAN, _x.reason_code.STOP_REASON_OBSTACLE, _x.reason_code.STOP_REASON_PREPARKING, _x.reason_code.STOP_REASON_SIGNAL, _x.reason_code.STOP_REASON_STOP_SIGN, _x.reason_code.STOP_REASON_YIELD_SIGN, _x.reason_code.STOP_REASON_CLEAR_ZONE, _x.reason_code.STOP_REASON_CROSSWALK, _x.reason_code.STOP_REASON_CREEPER, _x.reason_code.STOP_REASON_REFERENCE_END, _x.reason_code.STOP_REASON_YELLOW_SIGNAL, _x.reason_code.STOP_REASON_PULL_OVER, _x.distance_s, _x.stop_point32.x, _x.stop_point32.y, _x.stop_point32.z, _x.stop_heading))
      length = len(self.wait_for_obstacle)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.wait_for_obstacle.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.reason_code is None:
        self.reason_code = my_msgs.msg.StopReasonCode()
      if self.stop_point32 is None:
        self.stop_point32 = my_msgs.msg.PointENU()
      end = 0
      _x = self
      start = end
      end += 96
      (_x.reason_code.STOP_REASON_HEAD_VEHICLE, _x.reason_code.STOP_REASON_DESTINATION, _x.reason_code.STOP_REASON_PEDESTRIAN, _x.reason_code.STOP_REASON_OBSTACLE, _x.reason_code.STOP_REASON_PREPARKING, _x.reason_code.STOP_REASON_SIGNAL, _x.reason_code.STOP_REASON_STOP_SIGN, _x.reason_code.STOP_REASON_YIELD_SIGN, _x.reason_code.STOP_REASON_CLEAR_ZONE, _x.reason_code.STOP_REASON_CROSSWALK, _x.reason_code.STOP_REASON_CREEPER, _x.reason_code.STOP_REASON_REFERENCE_END, _x.reason_code.STOP_REASON_YELLOW_SIGNAL, _x.reason_code.STOP_REASON_PULL_OVER, _x.distance_s, _x.stop_point32.x, _x.stop_point32.y, _x.stop_point32.z, _x.stop_heading,) = _struct_14i5d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.wait_for_obstacle = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_14i5d = struct.Struct("<14i5d")
