# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/SimpleMPCDebug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SimpleMPCDebug(genpy.Message):
  _md5sum = "531bd1d10cd522eae2cb578b48394674"
  _type = "my_msgs/SimpleMPCDebug"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 lateral_error
float64 ref_heading
float64 heading
float64 heading_error
float64 heading_error_rate
float64 lateral_error_rate
float64 curvature
float64 steer_angle
float64 steer_angle_feedforward
float64 steer_angle_lateral_contribution
float64 steer_angle_lateral_rate_contribution
float64 steer_angle_heading_contribution
float64 steer_angle_heading_rate_contribution
float64 steer_angle_feedback
float64 steering_position
float64 ref_speed
float64 steer_angle_limited
float64 station_reference
float64 station_error
float64 speed_reference
float64 speed_error
float64 acceleration_reference
bool is_full_stop
float64 station_feedback
float64 speed_feedback
float64 acceleration_cmd_closeloop
float64 acceleration_cmd
float64 acceleration_lookup
float64 speed_lookup
float64 calibration_value
float64[] matrix_q_updated    
float64[] matrix_r_updated   """
  __slots__ = ['lateral_error','ref_heading','heading','heading_error','heading_error_rate','lateral_error_rate','curvature','steer_angle','steer_angle_feedforward','steer_angle_lateral_contribution','steer_angle_lateral_rate_contribution','steer_angle_heading_contribution','steer_angle_heading_rate_contribution','steer_angle_feedback','steering_position','ref_speed','steer_angle_limited','station_reference','station_error','speed_reference','speed_error','acceleration_reference','is_full_stop','station_feedback','speed_feedback','acceleration_cmd_closeloop','acceleration_cmd','acceleration_lookup','speed_lookup','calibration_value','matrix_q_updated','matrix_r_updated']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','bool','float64','float64','float64','float64','float64','float64','float64','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lateral_error,ref_heading,heading,heading_error,heading_error_rate,lateral_error_rate,curvature,steer_angle,steer_angle_feedforward,steer_angle_lateral_contribution,steer_angle_lateral_rate_contribution,steer_angle_heading_contribution,steer_angle_heading_rate_contribution,steer_angle_feedback,steering_position,ref_speed,steer_angle_limited,station_reference,station_error,speed_reference,speed_error,acceleration_reference,is_full_stop,station_feedback,speed_feedback,acceleration_cmd_closeloop,acceleration_cmd,acceleration_lookup,speed_lookup,calibration_value,matrix_q_updated,matrix_r_updated

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimpleMPCDebug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lateral_error is None:
        self.lateral_error = 0.
      if self.ref_heading is None:
        self.ref_heading = 0.
      if self.heading is None:
        self.heading = 0.
      if self.heading_error is None:
        self.heading_error = 0.
      if self.heading_error_rate is None:
        self.heading_error_rate = 0.
      if self.lateral_error_rate is None:
        self.lateral_error_rate = 0.
      if self.curvature is None:
        self.curvature = 0.
      if self.steer_angle is None:
        self.steer_angle = 0.
      if self.steer_angle_feedforward is None:
        self.steer_angle_feedforward = 0.
      if self.steer_angle_lateral_contribution is None:
        self.steer_angle_lateral_contribution = 0.
      if self.steer_angle_lateral_rate_contribution is None:
        self.steer_angle_lateral_rate_contribution = 0.
      if self.steer_angle_heading_contribution is None:
        self.steer_angle_heading_contribution = 0.
      if self.steer_angle_heading_rate_contribution is None:
        self.steer_angle_heading_rate_contribution = 0.
      if self.steer_angle_feedback is None:
        self.steer_angle_feedback = 0.
      if self.steering_position is None:
        self.steering_position = 0.
      if self.ref_speed is None:
        self.ref_speed = 0.
      if self.steer_angle_limited is None:
        self.steer_angle_limited = 0.
      if self.station_reference is None:
        self.station_reference = 0.
      if self.station_error is None:
        self.station_error = 0.
      if self.speed_reference is None:
        self.speed_reference = 0.
      if self.speed_error is None:
        self.speed_error = 0.
      if self.acceleration_reference is None:
        self.acceleration_reference = 0.
      if self.is_full_stop is None:
        self.is_full_stop = False
      if self.station_feedback is None:
        self.station_feedback = 0.
      if self.speed_feedback is None:
        self.speed_feedback = 0.
      if self.acceleration_cmd_closeloop is None:
        self.acceleration_cmd_closeloop = 0.
      if self.acceleration_cmd is None:
        self.acceleration_cmd = 0.
      if self.acceleration_lookup is None:
        self.acceleration_lookup = 0.
      if self.speed_lookup is None:
        self.speed_lookup = 0.
      if self.calibration_value is None:
        self.calibration_value = 0.
      if self.matrix_q_updated is None:
        self.matrix_q_updated = []
      if self.matrix_r_updated is None:
        self.matrix_r_updated = []
    else:
      self.lateral_error = 0.
      self.ref_heading = 0.
      self.heading = 0.
      self.heading_error = 0.
      self.heading_error_rate = 0.
      self.lateral_error_rate = 0.
      self.curvature = 0.
      self.steer_angle = 0.
      self.steer_angle_feedforward = 0.
      self.steer_angle_lateral_contribution = 0.
      self.steer_angle_lateral_rate_contribution = 0.
      self.steer_angle_heading_contribution = 0.
      self.steer_angle_heading_rate_contribution = 0.
      self.steer_angle_feedback = 0.
      self.steering_position = 0.
      self.ref_speed = 0.
      self.steer_angle_limited = 0.
      self.station_reference = 0.
      self.station_error = 0.
      self.speed_reference = 0.
      self.speed_error = 0.
      self.acceleration_reference = 0.
      self.is_full_stop = False
      self.station_feedback = 0.
      self.speed_feedback = 0.
      self.acceleration_cmd_closeloop = 0.
      self.acceleration_cmd = 0.
      self.acceleration_lookup = 0.
      self.speed_lookup = 0.
      self.calibration_value = 0.
      self.matrix_q_updated = []
      self.matrix_r_updated = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_22dB7d.pack(_x.lateral_error, _x.ref_heading, _x.heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error_rate, _x.curvature, _x.steer_angle, _x.steer_angle_feedforward, _x.steer_angle_lateral_contribution, _x.steer_angle_lateral_rate_contribution, _x.steer_angle_heading_contribution, _x.steer_angle_heading_rate_contribution, _x.steer_angle_feedback, _x.steering_position, _x.ref_speed, _x.steer_angle_limited, _x.station_reference, _x.station_error, _x.speed_reference, _x.speed_error, _x.acceleration_reference, _x.is_full_stop, _x.station_feedback, _x.speed_feedback, _x.acceleration_cmd_closeloop, _x.acceleration_cmd, _x.acceleration_lookup, _x.speed_lookup, _x.calibration_value))
      length = len(self.matrix_q_updated)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.matrix_q_updated))
      length = len(self.matrix_r_updated)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.matrix_r_updated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 233
      (_x.lateral_error, _x.ref_heading, _x.heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error_rate, _x.curvature, _x.steer_angle, _x.steer_angle_feedforward, _x.steer_angle_lateral_contribution, _x.steer_angle_lateral_rate_contribution, _x.steer_angle_heading_contribution, _x.steer_angle_heading_rate_contribution, _x.steer_angle_feedback, _x.steering_position, _x.ref_speed, _x.steer_angle_limited, _x.station_reference, _x.station_error, _x.speed_reference, _x.speed_error, _x.acceleration_reference, _x.is_full_stop, _x.station_feedback, _x.speed_feedback, _x.acceleration_cmd_closeloop, _x.acceleration_cmd, _x.acceleration_lookup, _x.speed_lookup, _x.calibration_value,) = _struct_22dB7d.unpack(str[start:end])
      self.is_full_stop = bool(self.is_full_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.matrix_q_updated = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.matrix_r_updated = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_22dB7d.pack(_x.lateral_error, _x.ref_heading, _x.heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error_rate, _x.curvature, _x.steer_angle, _x.steer_angle_feedforward, _x.steer_angle_lateral_contribution, _x.steer_angle_lateral_rate_contribution, _x.steer_angle_heading_contribution, _x.steer_angle_heading_rate_contribution, _x.steer_angle_feedback, _x.steering_position, _x.ref_speed, _x.steer_angle_limited, _x.station_reference, _x.station_error, _x.speed_reference, _x.speed_error, _x.acceleration_reference, _x.is_full_stop, _x.station_feedback, _x.speed_feedback, _x.acceleration_cmd_closeloop, _x.acceleration_cmd, _x.acceleration_lookup, _x.speed_lookup, _x.calibration_value))
      length = len(self.matrix_q_updated)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.matrix_q_updated.tostring())
      length = len(self.matrix_r_updated)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.matrix_r_updated.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 233
      (_x.lateral_error, _x.ref_heading, _x.heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error_rate, _x.curvature, _x.steer_angle, _x.steer_angle_feedforward, _x.steer_angle_lateral_contribution, _x.steer_angle_lateral_rate_contribution, _x.steer_angle_heading_contribution, _x.steer_angle_heading_rate_contribution, _x.steer_angle_feedback, _x.steering_position, _x.ref_speed, _x.steer_angle_limited, _x.station_reference, _x.station_error, _x.speed_reference, _x.speed_error, _x.acceleration_reference, _x.is_full_stop, _x.station_feedback, _x.speed_feedback, _x.acceleration_cmd_closeloop, _x.acceleration_cmd, _x.acceleration_lookup, _x.speed_lookup, _x.calibration_value,) = _struct_22dB7d.unpack(str[start:end])
      self.is_full_stop = bool(self.is_full_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.matrix_q_updated = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.matrix_r_updated = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_22dB7d = struct.Struct("<22dB7d")
