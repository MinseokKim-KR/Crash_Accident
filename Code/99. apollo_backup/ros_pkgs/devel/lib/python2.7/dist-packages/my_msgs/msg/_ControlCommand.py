# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/ControlCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_msgs.msg

class ControlCommand(genpy.Message):
  _md5sum = "3101652dddb789970831cac2eed24e54"
  _type = "my_msgs/ControlCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """my_msgs/Header header
float64 throttle
float64 brake
float64 steering_rate
float64 steering_target
bool parking_brake
float64 speed
float64 acceleration
bool reset_model
bool engine_on_off
int32 gear_location
float64 trajectory_fraction
my_msgs/Chassis_DrivingMode driving_mode 
my_msgs/Chassis_GearPosition gear_position
my_msgs/Common_VehicleSignal signal
my_msgs/LatencyStats latency_stats
my_msgs/PadMessage pad_msg
my_msgs/Common_EngageAdvise engage_advice
bool is_in_safe_mode
bool left_turn
bool right_turn
bool high_beam
bool low_beam
bool horn
my_msgs/TurnSignal turn_signal
my_msgs/LatencyStats LatencyStatus
my_msgs/Debug debug

================================================================================
MSG: my_msgs/Header
float64 timestamp_sec
string module_name
uint32 sequence_num
uint32 lidar_timestamp
uint32 camera_timestamp
uint32 radar_timestamp
uint32 version
my_msgs/Status status

================================================================================
MSG: my_msgs/Status
int32 error_code

================================================================================
MSG: my_msgs/Chassis_DrivingMode
int32 COMPLETE_MANUAL
int32 COMPLETE_AUTO_DRIVE
int32 AUTO_STEER_ONLY
int32 AUTO_SPEED_ONLY
int32 EMERGENCY_MODE
================================================================================
MSG: my_msgs/Chassis_GearPosition
int32 GEAR_NEUTRAL
int32 GEAR_DRIVE
int32 GEAR_REVERSE
int32 GEAR_PARKING
int32 GEAR_LOW
int32 GEAR_INVALID
int32 GEAR_NONE
================================================================================
MSG: my_msgs/Common_VehicleSignal
my_msgs/TurnSignal turn_signal
bool high_beam
bool low_beam
bool horn
bool emergency_light
================================================================================
MSG: my_msgs/TurnSignal
int32 TURN_NONE
int32 TURN_LEFT
int32 TURN_RIGHT
================================================================================
MSG: my_msgs/LatencyStats
float64 total_time_ms
float64[] controller_time_ms
bool total_time_exceeded

================================================================================
MSG: my_msgs/PadMessage
my_msgs/Header header
my_msgs/Chassis_DrivingMode driving_mode
my_msgs/DrivingAction action
================================================================================
MSG: my_msgs/DrivingAction
int32 STOP
int32 START
int32 RESET
================================================================================
MSG: my_msgs/Common_EngageAdvise
uint8 advice
string reason
================================================================================
MSG: my_msgs/Debug
my_msgs/SimpleLongitudinalDebug simple_lon_debug
my_msgs/SimpleLateralDebug simple_lat_debug
my_msgs/InputDebug input_debug
my_msgs/SimpleMPCDebug simple_mpc_debug
================================================================================
MSG: my_msgs/SimpleLongitudinalDebug
float64 station_reference
float64 station_error
float64 station_error_limited
float64 preview_station_error
float64 speed_reference
float64 speed_error
float64 speed_controller_input_limited
float64 preview_speed_reference
float64 preview_speed_error
float64 preview_acceleration_reference
float64 acceleration_cmd_closeloop
float64 acceleration_cmd
float64 acceleration_lookup
float64 speed_lookup
float64 calibration_value
float64 throttle_cmd
float64 brake_cmd
bool is_full_stop
float64 slope_offset_compensation
float64 current_station
float64 path_remain
================================================================================
MSG: my_msgs/SimpleLateralDebug
float64 lateral_error
float64 ref_heading
float64 heading
float64 heading_error
float64 heading_error_rate
float64 lateral_error_rate
float64 curvature
float64 steer_angle
float64 steer_angle_feedforward
float64 steer_angle_lateral_contribution
float64 steer_angle_lateral_rate_contribution
float64 steer_angle_heading_contribution
float64 steer_angle_heading_rate_contribution
float64 steer_angle_feedback
float64 steering_position
float64 ref_speed
float64 steer_angle_limited   
================================================================================
MSG: my_msgs/InputDebug
my_msgs/Header localization_header
my_msgs/Header canbus_header
my_msgs/Header trajectory_header
================================================================================
MSG: my_msgs/SimpleMPCDebug
float64 lateral_error
float64 ref_heading
float64 heading
float64 heading_error
float64 heading_error_rate
float64 lateral_error_rate
float64 curvature
float64 steer_angle
float64 steer_angle_feedforward
float64 steer_angle_lateral_contribution
float64 steer_angle_lateral_rate_contribution
float64 steer_angle_heading_contribution
float64 steer_angle_heading_rate_contribution
float64 steer_angle_feedback
float64 steering_position
float64 ref_speed
float64 steer_angle_limited
float64 station_reference
float64 station_error
float64 speed_reference
float64 speed_error
float64 acceleration_reference
bool is_full_stop
float64 station_feedback
float64 speed_feedback
float64 acceleration_cmd_closeloop
float64 acceleration_cmd
float64 acceleration_lookup
float64 speed_lookup
float64 calibration_value
float64[] matrix_q_updated    
float64[] matrix_r_updated   """
  __slots__ = ['header','throttle','brake','steering_rate','steering_target','parking_brake','speed','acceleration','reset_model','engine_on_off','gear_location','trajectory_fraction','driving_mode','gear_position','signal','latency_stats','pad_msg','engage_advice','is_in_safe_mode','left_turn','right_turn','high_beam','low_beam','horn','turn_signal','LatencyStatus','debug']
  _slot_types = ['my_msgs/Header','float64','float64','float64','float64','bool','float64','float64','bool','bool','int32','float64','my_msgs/Chassis_DrivingMode','my_msgs/Chassis_GearPosition','my_msgs/Common_VehicleSignal','my_msgs/LatencyStats','my_msgs/PadMessage','my_msgs/Common_EngageAdvise','bool','bool','bool','bool','bool','bool','my_msgs/TurnSignal','my_msgs/LatencyStats','my_msgs/Debug']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,throttle,brake,steering_rate,steering_target,parking_brake,speed,acceleration,reset_model,engine_on_off,gear_location,trajectory_fraction,driving_mode,gear_position,signal,latency_stats,pad_msg,engage_advice,is_in_safe_mode,left_turn,right_turn,high_beam,low_beam,horn,turn_signal,LatencyStatus,debug

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = my_msgs.msg.Header()
      if self.throttle is None:
        self.throttle = 0.
      if self.brake is None:
        self.brake = 0.
      if self.steering_rate is None:
        self.steering_rate = 0.
      if self.steering_target is None:
        self.steering_target = 0.
      if self.parking_brake is None:
        self.parking_brake = False
      if self.speed is None:
        self.speed = 0.
      if self.acceleration is None:
        self.acceleration = 0.
      if self.reset_model is None:
        self.reset_model = False
      if self.engine_on_off is None:
        self.engine_on_off = False
      if self.gear_location is None:
        self.gear_location = 0
      if self.trajectory_fraction is None:
        self.trajectory_fraction = 0.
      if self.driving_mode is None:
        self.driving_mode = my_msgs.msg.Chassis_DrivingMode()
      if self.gear_position is None:
        self.gear_position = my_msgs.msg.Chassis_GearPosition()
      if self.signal is None:
        self.signal = my_msgs.msg.Common_VehicleSignal()
      if self.latency_stats is None:
        self.latency_stats = my_msgs.msg.LatencyStats()
      if self.pad_msg is None:
        self.pad_msg = my_msgs.msg.PadMessage()
      if self.engage_advice is None:
        self.engage_advice = my_msgs.msg.Common_EngageAdvise()
      if self.is_in_safe_mode is None:
        self.is_in_safe_mode = False
      if self.left_turn is None:
        self.left_turn = False
      if self.right_turn is None:
        self.right_turn = False
      if self.high_beam is None:
        self.high_beam = False
      if self.low_beam is None:
        self.low_beam = False
      if self.horn is None:
        self.horn = False
      if self.turn_signal is None:
        self.turn_signal = my_msgs.msg.TurnSignal()
      if self.LatencyStatus is None:
        self.LatencyStatus = my_msgs.msg.LatencyStats()
      if self.debug is None:
        self.debug = my_msgs.msg.Debug()
    else:
      self.header = my_msgs.msg.Header()
      self.throttle = 0.
      self.brake = 0.
      self.steering_rate = 0.
      self.steering_target = 0.
      self.parking_brake = False
      self.speed = 0.
      self.acceleration = 0.
      self.reset_model = False
      self.engine_on_off = False
      self.gear_location = 0
      self.trajectory_fraction = 0.
      self.driving_mode = my_msgs.msg.Chassis_DrivingMode()
      self.gear_position = my_msgs.msg.Chassis_GearPosition()
      self.signal = my_msgs.msg.Common_VehicleSignal()
      self.latency_stats = my_msgs.msg.LatencyStats()
      self.pad_msg = my_msgs.msg.PadMessage()
      self.engage_advice = my_msgs.msg.Common_EngageAdvise()
      self.is_in_safe_mode = False
      self.left_turn = False
      self.right_turn = False
      self.high_beam = False
      self.low_beam = False
      self.horn = False
      self.turn_signal = my_msgs.msg.TurnSignal()
      self.LatencyStatus = my_msgs.msg.LatencyStats()
      self.debug = my_msgs.msg.Debug()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Ii4dB2d2Bid15i4Bd.pack(_x.header.sequence_num, _x.header.lidar_timestamp, _x.header.camera_timestamp, _x.header.radar_timestamp, _x.header.version, _x.header.status.error_code, _x.throttle, _x.brake, _x.steering_rate, _x.steering_target, _x.parking_brake, _x.speed, _x.acceleration, _x.reset_model, _x.engine_on_off, _x.gear_location, _x.trajectory_fraction, _x.driving_mode.COMPLETE_MANUAL, _x.driving_mode.COMPLETE_AUTO_DRIVE, _x.driving_mode.AUTO_STEER_ONLY, _x.driving_mode.AUTO_SPEED_ONLY, _x.driving_mode.EMERGENCY_MODE, _x.gear_position.GEAR_NEUTRAL, _x.gear_position.GEAR_DRIVE, _x.gear_position.GEAR_REVERSE, _x.gear_position.GEAR_PARKING, _x.gear_position.GEAR_LOW, _x.gear_position.GEAR_INVALID, _x.gear_position.GEAR_NONE, _x.signal.turn_signal.TURN_NONE, _x.signal.turn_signal.TURN_LEFT, _x.signal.turn_signal.TURN_RIGHT, _x.signal.high_beam, _x.signal.low_beam, _x.signal.horn, _x.signal.emergency_light, _x.latency_stats.total_time_ms))
      length = len(self.latency_stats.controller_time_ms)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.latency_stats.controller_time_ms))
      _x = self
      buff.write(_struct_Bd.pack(_x.latency_stats.total_time_exceeded, _x.pad_msg.header.timestamp_sec))
      _x = self.pad_msg.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5I9iB.pack(_x.pad_msg.header.sequence_num, _x.pad_msg.header.lidar_timestamp, _x.pad_msg.header.camera_timestamp, _x.pad_msg.header.radar_timestamp, _x.pad_msg.header.version, _x.pad_msg.header.status.error_code, _x.pad_msg.driving_mode.COMPLETE_MANUAL, _x.pad_msg.driving_mode.COMPLETE_AUTO_DRIVE, _x.pad_msg.driving_mode.AUTO_STEER_ONLY, _x.pad_msg.driving_mode.AUTO_SPEED_ONLY, _x.pad_msg.driving_mode.EMERGENCY_MODE, _x.pad_msg.action.STOP, _x.pad_msg.action.START, _x.pad_msg.action.RESET, _x.engage_advice.advice))
      _x = self.engage_advice.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6B3id.pack(_x.is_in_safe_mode, _x.left_turn, _x.right_turn, _x.high_beam, _x.low_beam, _x.horn, _x.turn_signal.TURN_NONE, _x.turn_signal.TURN_LEFT, _x.turn_signal.TURN_RIGHT, _x.LatencyStatus.total_time_ms))
      length = len(self.LatencyStatus.controller_time_ms)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.LatencyStatus.controller_time_ms))
      _x = self
      buff.write(_struct_B17dB21d.pack(_x.LatencyStatus.total_time_exceeded, _x.debug.simple_lon_debug.station_reference, _x.debug.simple_lon_debug.station_error, _x.debug.simple_lon_debug.station_error_limited, _x.debug.simple_lon_debug.preview_station_error, _x.debug.simple_lon_debug.speed_reference, _x.debug.simple_lon_debug.speed_error, _x.debug.simple_lon_debug.speed_controller_input_limited, _x.debug.simple_lon_debug.preview_speed_reference, _x.debug.simple_lon_debug.preview_speed_error, _x.debug.simple_lon_debug.preview_acceleration_reference, _x.debug.simple_lon_debug.acceleration_cmd_closeloop, _x.debug.simple_lon_debug.acceleration_cmd, _x.debug.simple_lon_debug.acceleration_lookup, _x.debug.simple_lon_debug.speed_lookup, _x.debug.simple_lon_debug.calibration_value, _x.debug.simple_lon_debug.throttle_cmd, _x.debug.simple_lon_debug.brake_cmd, _x.debug.simple_lon_debug.is_full_stop, _x.debug.simple_lon_debug.slope_offset_compensation, _x.debug.simple_lon_debug.current_station, _x.debug.simple_lon_debug.path_remain, _x.debug.simple_lat_debug.lateral_error, _x.debug.simple_lat_debug.ref_heading, _x.debug.simple_lat_debug.heading, _x.debug.simple_lat_debug.heading_error, _x.debug.simple_lat_debug.heading_error_rate, _x.debug.simple_lat_debug.lateral_error_rate, _x.debug.simple_lat_debug.curvature, _x.debug.simple_lat_debug.steer_angle, _x.debug.simple_lat_debug.steer_angle_feedforward, _x.debug.simple_lat_debug.steer_angle_lateral_contribution, _x.debug.simple_lat_debug.steer_angle_lateral_rate_contribution, _x.debug.simple_lat_debug.steer_angle_heading_contribution, _x.debug.simple_lat_debug.steer_angle_heading_rate_contribution, _x.debug.simple_lat_debug.steer_angle_feedback, _x.debug.simple_lat_debug.steering_position, _x.debug.simple_lat_debug.ref_speed, _x.debug.simple_lat_debug.steer_angle_limited, _x.debug.input_debug.localization_header.timestamp_sec))
      _x = self.debug.input_debug.localization_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid.pack(_x.debug.input_debug.localization_header.sequence_num, _x.debug.input_debug.localization_header.lidar_timestamp, _x.debug.input_debug.localization_header.camera_timestamp, _x.debug.input_debug.localization_header.radar_timestamp, _x.debug.input_debug.localization_header.version, _x.debug.input_debug.localization_header.status.error_code, _x.debug.input_debug.canbus_header.timestamp_sec))
      _x = self.debug.input_debug.canbus_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid.pack(_x.debug.input_debug.canbus_header.sequence_num, _x.debug.input_debug.canbus_header.lidar_timestamp, _x.debug.input_debug.canbus_header.camera_timestamp, _x.debug.input_debug.canbus_header.radar_timestamp, _x.debug.input_debug.canbus_header.version, _x.debug.input_debug.canbus_header.status.error_code, _x.debug.input_debug.trajectory_header.timestamp_sec))
      _x = self.debug.input_debug.trajectory_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Ii22dB7d.pack(_x.debug.input_debug.trajectory_header.sequence_num, _x.debug.input_debug.trajectory_header.lidar_timestamp, _x.debug.input_debug.trajectory_header.camera_timestamp, _x.debug.input_debug.trajectory_header.radar_timestamp, _x.debug.input_debug.trajectory_header.version, _x.debug.input_debug.trajectory_header.status.error_code, _x.debug.simple_mpc_debug.lateral_error, _x.debug.simple_mpc_debug.ref_heading, _x.debug.simple_mpc_debug.heading, _x.debug.simple_mpc_debug.heading_error, _x.debug.simple_mpc_debug.heading_error_rate, _x.debug.simple_mpc_debug.lateral_error_rate, _x.debug.simple_mpc_debug.curvature, _x.debug.simple_mpc_debug.steer_angle, _x.debug.simple_mpc_debug.steer_angle_feedforward, _x.debug.simple_mpc_debug.steer_angle_lateral_contribution, _x.debug.simple_mpc_debug.steer_angle_lateral_rate_contribution, _x.debug.simple_mpc_debug.steer_angle_heading_contribution, _x.debug.simple_mpc_debug.steer_angle_heading_rate_contribution, _x.debug.simple_mpc_debug.steer_angle_feedback, _x.debug.simple_mpc_debug.steering_position, _x.debug.simple_mpc_debug.ref_speed, _x.debug.simple_mpc_debug.steer_angle_limited, _x.debug.simple_mpc_debug.station_reference, _x.debug.simple_mpc_debug.station_error, _x.debug.simple_mpc_debug.speed_reference, _x.debug.simple_mpc_debug.speed_error, _x.debug.simple_mpc_debug.acceleration_reference, _x.debug.simple_mpc_debug.is_full_stop, _x.debug.simple_mpc_debug.station_feedback, _x.debug.simple_mpc_debug.speed_feedback, _x.debug.simple_mpc_debug.acceleration_cmd_closeloop, _x.debug.simple_mpc_debug.acceleration_cmd, _x.debug.simple_mpc_debug.acceleration_lookup, _x.debug.simple_mpc_debug.speed_lookup, _x.debug.simple_mpc_debug.calibration_value))
      length = len(self.debug.simple_mpc_debug.matrix_q_updated)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.debug.simple_mpc_debug.matrix_q_updated))
      length = len(self.debug.simple_mpc_debug.matrix_r_updated)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.debug.simple_mpc_debug.matrix_r_updated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = my_msgs.msg.Header()
      if self.driving_mode is None:
        self.driving_mode = my_msgs.msg.Chassis_DrivingMode()
      if self.gear_position is None:
        self.gear_position = my_msgs.msg.Chassis_GearPosition()
      if self.signal is None:
        self.signal = my_msgs.msg.Common_VehicleSignal()
      if self.latency_stats is None:
        self.latency_stats = my_msgs.msg.LatencyStats()
      if self.pad_msg is None:
        self.pad_msg = my_msgs.msg.PadMessage()
      if self.engage_advice is None:
        self.engage_advice = my_msgs.msg.Common_EngageAdvise()
      if self.turn_signal is None:
        self.turn_signal = my_msgs.msg.TurnSignal()
      if self.LatencyStatus is None:
        self.LatencyStatus = my_msgs.msg.LatencyStats()
      if self.debug is None:
        self.debug = my_msgs.msg.Debug()
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      _x = self
      start = end
      end += 159
      (_x.header.sequence_num, _x.header.lidar_timestamp, _x.header.camera_timestamp, _x.header.radar_timestamp, _x.header.version, _x.header.status.error_code, _x.throttle, _x.brake, _x.steering_rate, _x.steering_target, _x.parking_brake, _x.speed, _x.acceleration, _x.reset_model, _x.engine_on_off, _x.gear_location, _x.trajectory_fraction, _x.driving_mode.COMPLETE_MANUAL, _x.driving_mode.COMPLETE_AUTO_DRIVE, _x.driving_mode.AUTO_STEER_ONLY, _x.driving_mode.AUTO_SPEED_ONLY, _x.driving_mode.EMERGENCY_MODE, _x.gear_position.GEAR_NEUTRAL, _x.gear_position.GEAR_DRIVE, _x.gear_position.GEAR_REVERSE, _x.gear_position.GEAR_PARKING, _x.gear_position.GEAR_LOW, _x.gear_position.GEAR_INVALID, _x.gear_position.GEAR_NONE, _x.signal.turn_signal.TURN_NONE, _x.signal.turn_signal.TURN_LEFT, _x.signal.turn_signal.TURN_RIGHT, _x.signal.high_beam, _x.signal.low_beam, _x.signal.horn, _x.signal.emergency_light, _x.latency_stats.total_time_ms,) = _struct_5Ii4dB2d2Bid15i4Bd.unpack(str[start:end])
      self.parking_brake = bool(self.parking_brake)
      self.reset_model = bool(self.reset_model)
      self.engine_on_off = bool(self.engine_on_off)
      self.signal.high_beam = bool(self.signal.high_beam)
      self.signal.low_beam = bool(self.signal.low_beam)
      self.signal.horn = bool(self.signal.horn)
      self.signal.emergency_light = bool(self.signal.emergency_light)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.latency_stats.controller_time_ms = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 9
      (_x.latency_stats.total_time_exceeded, _x.pad_msg.header.timestamp_sec,) = _struct_Bd.unpack(str[start:end])
      self.latency_stats.total_time_exceeded = bool(self.latency_stats.total_time_exceeded)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pad_msg.header.module_name = str[start:end].decode('utf-8')
      else:
        self.pad_msg.header.module_name = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.pad_msg.header.sequence_num, _x.pad_msg.header.lidar_timestamp, _x.pad_msg.header.camera_timestamp, _x.pad_msg.header.radar_timestamp, _x.pad_msg.header.version, _x.pad_msg.header.status.error_code, _x.pad_msg.driving_mode.COMPLETE_MANUAL, _x.pad_msg.driving_mode.COMPLETE_AUTO_DRIVE, _x.pad_msg.driving_mode.AUTO_STEER_ONLY, _x.pad_msg.driving_mode.AUTO_SPEED_ONLY, _x.pad_msg.driving_mode.EMERGENCY_MODE, _x.pad_msg.action.STOP, _x.pad_msg.action.START, _x.pad_msg.action.RESET, _x.engage_advice.advice,) = _struct_5I9iB.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.engage_advice.reason = str[start:end].decode('utf-8')
      else:
        self.engage_advice.reason = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.is_in_safe_mode, _x.left_turn, _x.right_turn, _x.high_beam, _x.low_beam, _x.horn, _x.turn_signal.TURN_NONE, _x.turn_signal.TURN_LEFT, _x.turn_signal.TURN_RIGHT, _x.LatencyStatus.total_time_ms,) = _struct_6B3id.unpack(str[start:end])
      self.is_in_safe_mode = bool(self.is_in_safe_mode)
      self.left_turn = bool(self.left_turn)
      self.right_turn = bool(self.right_turn)
      self.high_beam = bool(self.high_beam)
      self.low_beam = bool(self.low_beam)
      self.horn = bool(self.horn)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.LatencyStatus.controller_time_ms = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 306
      (_x.LatencyStatus.total_time_exceeded, _x.debug.simple_lon_debug.station_reference, _x.debug.simple_lon_debug.station_error, _x.debug.simple_lon_debug.station_error_limited, _x.debug.simple_lon_debug.preview_station_error, _x.debug.simple_lon_debug.speed_reference, _x.debug.simple_lon_debug.speed_error, _x.debug.simple_lon_debug.speed_controller_input_limited, _x.debug.simple_lon_debug.preview_speed_reference, _x.debug.simple_lon_debug.preview_speed_error, _x.debug.simple_lon_debug.preview_acceleration_reference, _x.debug.simple_lon_debug.acceleration_cmd_closeloop, _x.debug.simple_lon_debug.acceleration_cmd, _x.debug.simple_lon_debug.acceleration_lookup, _x.debug.simple_lon_debug.speed_lookup, _x.debug.simple_lon_debug.calibration_value, _x.debug.simple_lon_debug.throttle_cmd, _x.debug.simple_lon_debug.brake_cmd, _x.debug.simple_lon_debug.is_full_stop, _x.debug.simple_lon_debug.slope_offset_compensation, _x.debug.simple_lon_debug.current_station, _x.debug.simple_lon_debug.path_remain, _x.debug.simple_lat_debug.lateral_error, _x.debug.simple_lat_debug.ref_heading, _x.debug.simple_lat_debug.heading, _x.debug.simple_lat_debug.heading_error, _x.debug.simple_lat_debug.heading_error_rate, _x.debug.simple_lat_debug.lateral_error_rate, _x.debug.simple_lat_debug.curvature, _x.debug.simple_lat_debug.steer_angle, _x.debug.simple_lat_debug.steer_angle_feedforward, _x.debug.simple_lat_debug.steer_angle_lateral_contribution, _x.debug.simple_lat_debug.steer_angle_lateral_rate_contribution, _x.debug.simple_lat_debug.steer_angle_heading_contribution, _x.debug.simple_lat_debug.steer_angle_heading_rate_contribution, _x.debug.simple_lat_debug.steer_angle_feedback, _x.debug.simple_lat_debug.steering_position, _x.debug.simple_lat_debug.ref_speed, _x.debug.simple_lat_debug.steer_angle_limited, _x.debug.input_debug.localization_header.timestamp_sec,) = _struct_B17dB21d.unpack(str[start:end])
      self.LatencyStatus.total_time_exceeded = bool(self.LatencyStatus.total_time_exceeded)
      self.debug.simple_lon_debug.is_full_stop = bool(self.debug.simple_lon_debug.is_full_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.debug.input_debug.localization_header.module_name = str[start:end].decode('utf-8')
      else:
        self.debug.input_debug.localization_header.module_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.debug.input_debug.localization_header.sequence_num, _x.debug.input_debug.localization_header.lidar_timestamp, _x.debug.input_debug.localization_header.camera_timestamp, _x.debug.input_debug.localization_header.radar_timestamp, _x.debug.input_debug.localization_header.version, _x.debug.input_debug.localization_header.status.error_code, _x.debug.input_debug.canbus_header.timestamp_sec,) = _struct_5Iid.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.debug.input_debug.canbus_header.module_name = str[start:end].decode('utf-8')
      else:
        self.debug.input_debug.canbus_header.module_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.debug.input_debug.canbus_header.sequence_num, _x.debug.input_debug.canbus_header.lidar_timestamp, _x.debug.input_debug.canbus_header.camera_timestamp, _x.debug.input_debug.canbus_header.radar_timestamp, _x.debug.input_debug.canbus_header.version, _x.debug.input_debug.canbus_header.status.error_code, _x.debug.input_debug.trajectory_header.timestamp_sec,) = _struct_5Iid.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.debug.input_debug.trajectory_header.module_name = str[start:end].decode('utf-8')
      else:
        self.debug.input_debug.trajectory_header.module_name = str[start:end]
      _x = self
      start = end
      end += 257
      (_x.debug.input_debug.trajectory_header.sequence_num, _x.debug.input_debug.trajectory_header.lidar_timestamp, _x.debug.input_debug.trajectory_header.camera_timestamp, _x.debug.input_debug.trajectory_header.radar_timestamp, _x.debug.input_debug.trajectory_header.version, _x.debug.input_debug.trajectory_header.status.error_code, _x.debug.simple_mpc_debug.lateral_error, _x.debug.simple_mpc_debug.ref_heading, _x.debug.simple_mpc_debug.heading, _x.debug.simple_mpc_debug.heading_error, _x.debug.simple_mpc_debug.heading_error_rate, _x.debug.simple_mpc_debug.lateral_error_rate, _x.debug.simple_mpc_debug.curvature, _x.debug.simple_mpc_debug.steer_angle, _x.debug.simple_mpc_debug.steer_angle_feedforward, _x.debug.simple_mpc_debug.steer_angle_lateral_contribution, _x.debug.simple_mpc_debug.steer_angle_lateral_rate_contribution, _x.debug.simple_mpc_debug.steer_angle_heading_contribution, _x.debug.simple_mpc_debug.steer_angle_heading_rate_contribution, _x.debug.simple_mpc_debug.steer_angle_feedback, _x.debug.simple_mpc_debug.steering_position, _x.debug.simple_mpc_debug.ref_speed, _x.debug.simple_mpc_debug.steer_angle_limited, _x.debug.simple_mpc_debug.station_reference, _x.debug.simple_mpc_debug.station_error, _x.debug.simple_mpc_debug.speed_reference, _x.debug.simple_mpc_debug.speed_error, _x.debug.simple_mpc_debug.acceleration_reference, _x.debug.simple_mpc_debug.is_full_stop, _x.debug.simple_mpc_debug.station_feedback, _x.debug.simple_mpc_debug.speed_feedback, _x.debug.simple_mpc_debug.acceleration_cmd_closeloop, _x.debug.simple_mpc_debug.acceleration_cmd, _x.debug.simple_mpc_debug.acceleration_lookup, _x.debug.simple_mpc_debug.speed_lookup, _x.debug.simple_mpc_debug.calibration_value,) = _struct_5Ii22dB7d.unpack(str[start:end])
      self.debug.simple_mpc_debug.is_full_stop = bool(self.debug.simple_mpc_debug.is_full_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.debug.simple_mpc_debug.matrix_q_updated = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.debug.simple_mpc_debug.matrix_r_updated = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Ii4dB2d2Bid15i4Bd.pack(_x.header.sequence_num, _x.header.lidar_timestamp, _x.header.camera_timestamp, _x.header.radar_timestamp, _x.header.version, _x.header.status.error_code, _x.throttle, _x.brake, _x.steering_rate, _x.steering_target, _x.parking_brake, _x.speed, _x.acceleration, _x.reset_model, _x.engine_on_off, _x.gear_location, _x.trajectory_fraction, _x.driving_mode.COMPLETE_MANUAL, _x.driving_mode.COMPLETE_AUTO_DRIVE, _x.driving_mode.AUTO_STEER_ONLY, _x.driving_mode.AUTO_SPEED_ONLY, _x.driving_mode.EMERGENCY_MODE, _x.gear_position.GEAR_NEUTRAL, _x.gear_position.GEAR_DRIVE, _x.gear_position.GEAR_REVERSE, _x.gear_position.GEAR_PARKING, _x.gear_position.GEAR_LOW, _x.gear_position.GEAR_INVALID, _x.gear_position.GEAR_NONE, _x.signal.turn_signal.TURN_NONE, _x.signal.turn_signal.TURN_LEFT, _x.signal.turn_signal.TURN_RIGHT, _x.signal.high_beam, _x.signal.low_beam, _x.signal.horn, _x.signal.emergency_light, _x.latency_stats.total_time_ms))
      length = len(self.latency_stats.controller_time_ms)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.latency_stats.controller_time_ms.tostring())
      _x = self
      buff.write(_struct_Bd.pack(_x.latency_stats.total_time_exceeded, _x.pad_msg.header.timestamp_sec))
      _x = self.pad_msg.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5I9iB.pack(_x.pad_msg.header.sequence_num, _x.pad_msg.header.lidar_timestamp, _x.pad_msg.header.camera_timestamp, _x.pad_msg.header.radar_timestamp, _x.pad_msg.header.version, _x.pad_msg.header.status.error_code, _x.pad_msg.driving_mode.COMPLETE_MANUAL, _x.pad_msg.driving_mode.COMPLETE_AUTO_DRIVE, _x.pad_msg.driving_mode.AUTO_STEER_ONLY, _x.pad_msg.driving_mode.AUTO_SPEED_ONLY, _x.pad_msg.driving_mode.EMERGENCY_MODE, _x.pad_msg.action.STOP, _x.pad_msg.action.START, _x.pad_msg.action.RESET, _x.engage_advice.advice))
      _x = self.engage_advice.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6B3id.pack(_x.is_in_safe_mode, _x.left_turn, _x.right_turn, _x.high_beam, _x.low_beam, _x.horn, _x.turn_signal.TURN_NONE, _x.turn_signal.TURN_LEFT, _x.turn_signal.TURN_RIGHT, _x.LatencyStatus.total_time_ms))
      length = len(self.LatencyStatus.controller_time_ms)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.LatencyStatus.controller_time_ms.tostring())
      _x = self
      buff.write(_struct_B17dB21d.pack(_x.LatencyStatus.total_time_exceeded, _x.debug.simple_lon_debug.station_reference, _x.debug.simple_lon_debug.station_error, _x.debug.simple_lon_debug.station_error_limited, _x.debug.simple_lon_debug.preview_station_error, _x.debug.simple_lon_debug.speed_reference, _x.debug.simple_lon_debug.speed_error, _x.debug.simple_lon_debug.speed_controller_input_limited, _x.debug.simple_lon_debug.preview_speed_reference, _x.debug.simple_lon_debug.preview_speed_error, _x.debug.simple_lon_debug.preview_acceleration_reference, _x.debug.simple_lon_debug.acceleration_cmd_closeloop, _x.debug.simple_lon_debug.acceleration_cmd, _x.debug.simple_lon_debug.acceleration_lookup, _x.debug.simple_lon_debug.speed_lookup, _x.debug.simple_lon_debug.calibration_value, _x.debug.simple_lon_debug.throttle_cmd, _x.debug.simple_lon_debug.brake_cmd, _x.debug.simple_lon_debug.is_full_stop, _x.debug.simple_lon_debug.slope_offset_compensation, _x.debug.simple_lon_debug.current_station, _x.debug.simple_lon_debug.path_remain, _x.debug.simple_lat_debug.lateral_error, _x.debug.simple_lat_debug.ref_heading, _x.debug.simple_lat_debug.heading, _x.debug.simple_lat_debug.heading_error, _x.debug.simple_lat_debug.heading_error_rate, _x.debug.simple_lat_debug.lateral_error_rate, _x.debug.simple_lat_debug.curvature, _x.debug.simple_lat_debug.steer_angle, _x.debug.simple_lat_debug.steer_angle_feedforward, _x.debug.simple_lat_debug.steer_angle_lateral_contribution, _x.debug.simple_lat_debug.steer_angle_lateral_rate_contribution, _x.debug.simple_lat_debug.steer_angle_heading_contribution, _x.debug.simple_lat_debug.steer_angle_heading_rate_contribution, _x.debug.simple_lat_debug.steer_angle_feedback, _x.debug.simple_lat_debug.steering_position, _x.debug.simple_lat_debug.ref_speed, _x.debug.simple_lat_debug.steer_angle_limited, _x.debug.input_debug.localization_header.timestamp_sec))
      _x = self.debug.input_debug.localization_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid.pack(_x.debug.input_debug.localization_header.sequence_num, _x.debug.input_debug.localization_header.lidar_timestamp, _x.debug.input_debug.localization_header.camera_timestamp, _x.debug.input_debug.localization_header.radar_timestamp, _x.debug.input_debug.localization_header.version, _x.debug.input_debug.localization_header.status.error_code, _x.debug.input_debug.canbus_header.timestamp_sec))
      _x = self.debug.input_debug.canbus_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid.pack(_x.debug.input_debug.canbus_header.sequence_num, _x.debug.input_debug.canbus_header.lidar_timestamp, _x.debug.input_debug.canbus_header.camera_timestamp, _x.debug.input_debug.canbus_header.radar_timestamp, _x.debug.input_debug.canbus_header.version, _x.debug.input_debug.canbus_header.status.error_code, _x.debug.input_debug.trajectory_header.timestamp_sec))
      _x = self.debug.input_debug.trajectory_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Ii22dB7d.pack(_x.debug.input_debug.trajectory_header.sequence_num, _x.debug.input_debug.trajectory_header.lidar_timestamp, _x.debug.input_debug.trajectory_header.camera_timestamp, _x.debug.input_debug.trajectory_header.radar_timestamp, _x.debug.input_debug.trajectory_header.version, _x.debug.input_debug.trajectory_header.status.error_code, _x.debug.simple_mpc_debug.lateral_error, _x.debug.simple_mpc_debug.ref_heading, _x.debug.simple_mpc_debug.heading, _x.debug.simple_mpc_debug.heading_error, _x.debug.simple_mpc_debug.heading_error_rate, _x.debug.simple_mpc_debug.lateral_error_rate, _x.debug.simple_mpc_debug.curvature, _x.debug.simple_mpc_debug.steer_angle, _x.debug.simple_mpc_debug.steer_angle_feedforward, _x.debug.simple_mpc_debug.steer_angle_lateral_contribution, _x.debug.simple_mpc_debug.steer_angle_lateral_rate_contribution, _x.debug.simple_mpc_debug.steer_angle_heading_contribution, _x.debug.simple_mpc_debug.steer_angle_heading_rate_contribution, _x.debug.simple_mpc_debug.steer_angle_feedback, _x.debug.simple_mpc_debug.steering_position, _x.debug.simple_mpc_debug.ref_speed, _x.debug.simple_mpc_debug.steer_angle_limited, _x.debug.simple_mpc_debug.station_reference, _x.debug.simple_mpc_debug.station_error, _x.debug.simple_mpc_debug.speed_reference, _x.debug.simple_mpc_debug.speed_error, _x.debug.simple_mpc_debug.acceleration_reference, _x.debug.simple_mpc_debug.is_full_stop, _x.debug.simple_mpc_debug.station_feedback, _x.debug.simple_mpc_debug.speed_feedback, _x.debug.simple_mpc_debug.acceleration_cmd_closeloop, _x.debug.simple_mpc_debug.acceleration_cmd, _x.debug.simple_mpc_debug.acceleration_lookup, _x.debug.simple_mpc_debug.speed_lookup, _x.debug.simple_mpc_debug.calibration_value))
      length = len(self.debug.simple_mpc_debug.matrix_q_updated)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.debug.simple_mpc_debug.matrix_q_updated.tostring())
      length = len(self.debug.simple_mpc_debug.matrix_r_updated)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.debug.simple_mpc_debug.matrix_r_updated.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = my_msgs.msg.Header()
      if self.driving_mode is None:
        self.driving_mode = my_msgs.msg.Chassis_DrivingMode()
      if self.gear_position is None:
        self.gear_position = my_msgs.msg.Chassis_GearPosition()
      if self.signal is None:
        self.signal = my_msgs.msg.Common_VehicleSignal()
      if self.latency_stats is None:
        self.latency_stats = my_msgs.msg.LatencyStats()
      if self.pad_msg is None:
        self.pad_msg = my_msgs.msg.PadMessage()
      if self.engage_advice is None:
        self.engage_advice = my_msgs.msg.Common_EngageAdvise()
      if self.turn_signal is None:
        self.turn_signal = my_msgs.msg.TurnSignal()
      if self.LatencyStatus is None:
        self.LatencyStatus = my_msgs.msg.LatencyStats()
      if self.debug is None:
        self.debug = my_msgs.msg.Debug()
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      _x = self
      start = end
      end += 159
      (_x.header.sequence_num, _x.header.lidar_timestamp, _x.header.camera_timestamp, _x.header.radar_timestamp, _x.header.version, _x.header.status.error_code, _x.throttle, _x.brake, _x.steering_rate, _x.steering_target, _x.parking_brake, _x.speed, _x.acceleration, _x.reset_model, _x.engine_on_off, _x.gear_location, _x.trajectory_fraction, _x.driving_mode.COMPLETE_MANUAL, _x.driving_mode.COMPLETE_AUTO_DRIVE, _x.driving_mode.AUTO_STEER_ONLY, _x.driving_mode.AUTO_SPEED_ONLY, _x.driving_mode.EMERGENCY_MODE, _x.gear_position.GEAR_NEUTRAL, _x.gear_position.GEAR_DRIVE, _x.gear_position.GEAR_REVERSE, _x.gear_position.GEAR_PARKING, _x.gear_position.GEAR_LOW, _x.gear_position.GEAR_INVALID, _x.gear_position.GEAR_NONE, _x.signal.turn_signal.TURN_NONE, _x.signal.turn_signal.TURN_LEFT, _x.signal.turn_signal.TURN_RIGHT, _x.signal.high_beam, _x.signal.low_beam, _x.signal.horn, _x.signal.emergency_light, _x.latency_stats.total_time_ms,) = _struct_5Ii4dB2d2Bid15i4Bd.unpack(str[start:end])
      self.parking_brake = bool(self.parking_brake)
      self.reset_model = bool(self.reset_model)
      self.engine_on_off = bool(self.engine_on_off)
      self.signal.high_beam = bool(self.signal.high_beam)
      self.signal.low_beam = bool(self.signal.low_beam)
      self.signal.horn = bool(self.signal.horn)
      self.signal.emergency_light = bool(self.signal.emergency_light)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.latency_stats.controller_time_ms = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 9
      (_x.latency_stats.total_time_exceeded, _x.pad_msg.header.timestamp_sec,) = _struct_Bd.unpack(str[start:end])
      self.latency_stats.total_time_exceeded = bool(self.latency_stats.total_time_exceeded)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pad_msg.header.module_name = str[start:end].decode('utf-8')
      else:
        self.pad_msg.header.module_name = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.pad_msg.header.sequence_num, _x.pad_msg.header.lidar_timestamp, _x.pad_msg.header.camera_timestamp, _x.pad_msg.header.radar_timestamp, _x.pad_msg.header.version, _x.pad_msg.header.status.error_code, _x.pad_msg.driving_mode.COMPLETE_MANUAL, _x.pad_msg.driving_mode.COMPLETE_AUTO_DRIVE, _x.pad_msg.driving_mode.AUTO_STEER_ONLY, _x.pad_msg.driving_mode.AUTO_SPEED_ONLY, _x.pad_msg.driving_mode.EMERGENCY_MODE, _x.pad_msg.action.STOP, _x.pad_msg.action.START, _x.pad_msg.action.RESET, _x.engage_advice.advice,) = _struct_5I9iB.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.engage_advice.reason = str[start:end].decode('utf-8')
      else:
        self.engage_advice.reason = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.is_in_safe_mode, _x.left_turn, _x.right_turn, _x.high_beam, _x.low_beam, _x.horn, _x.turn_signal.TURN_NONE, _x.turn_signal.TURN_LEFT, _x.turn_signal.TURN_RIGHT, _x.LatencyStatus.total_time_ms,) = _struct_6B3id.unpack(str[start:end])
      self.is_in_safe_mode = bool(self.is_in_safe_mode)
      self.left_turn = bool(self.left_turn)
      self.right_turn = bool(self.right_turn)
      self.high_beam = bool(self.high_beam)
      self.low_beam = bool(self.low_beam)
      self.horn = bool(self.horn)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.LatencyStatus.controller_time_ms = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 306
      (_x.LatencyStatus.total_time_exceeded, _x.debug.simple_lon_debug.station_reference, _x.debug.simple_lon_debug.station_error, _x.debug.simple_lon_debug.station_error_limited, _x.debug.simple_lon_debug.preview_station_error, _x.debug.simple_lon_debug.speed_reference, _x.debug.simple_lon_debug.speed_error, _x.debug.simple_lon_debug.speed_controller_input_limited, _x.debug.simple_lon_debug.preview_speed_reference, _x.debug.simple_lon_debug.preview_speed_error, _x.debug.simple_lon_debug.preview_acceleration_reference, _x.debug.simple_lon_debug.acceleration_cmd_closeloop, _x.debug.simple_lon_debug.acceleration_cmd, _x.debug.simple_lon_debug.acceleration_lookup, _x.debug.simple_lon_debug.speed_lookup, _x.debug.simple_lon_debug.calibration_value, _x.debug.simple_lon_debug.throttle_cmd, _x.debug.simple_lon_debug.brake_cmd, _x.debug.simple_lon_debug.is_full_stop, _x.debug.simple_lon_debug.slope_offset_compensation, _x.debug.simple_lon_debug.current_station, _x.debug.simple_lon_debug.path_remain, _x.debug.simple_lat_debug.lateral_error, _x.debug.simple_lat_debug.ref_heading, _x.debug.simple_lat_debug.heading, _x.debug.simple_lat_debug.heading_error, _x.debug.simple_lat_debug.heading_error_rate, _x.debug.simple_lat_debug.lateral_error_rate, _x.debug.simple_lat_debug.curvature, _x.debug.simple_lat_debug.steer_angle, _x.debug.simple_lat_debug.steer_angle_feedforward, _x.debug.simple_lat_debug.steer_angle_lateral_contribution, _x.debug.simple_lat_debug.steer_angle_lateral_rate_contribution, _x.debug.simple_lat_debug.steer_angle_heading_contribution, _x.debug.simple_lat_debug.steer_angle_heading_rate_contribution, _x.debug.simple_lat_debug.steer_angle_feedback, _x.debug.simple_lat_debug.steering_position, _x.debug.simple_lat_debug.ref_speed, _x.debug.simple_lat_debug.steer_angle_limited, _x.debug.input_debug.localization_header.timestamp_sec,) = _struct_B17dB21d.unpack(str[start:end])
      self.LatencyStatus.total_time_exceeded = bool(self.LatencyStatus.total_time_exceeded)
      self.debug.simple_lon_debug.is_full_stop = bool(self.debug.simple_lon_debug.is_full_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.debug.input_debug.localization_header.module_name = str[start:end].decode('utf-8')
      else:
        self.debug.input_debug.localization_header.module_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.debug.input_debug.localization_header.sequence_num, _x.debug.input_debug.localization_header.lidar_timestamp, _x.debug.input_debug.localization_header.camera_timestamp, _x.debug.input_debug.localization_header.radar_timestamp, _x.debug.input_debug.localization_header.version, _x.debug.input_debug.localization_header.status.error_code, _x.debug.input_debug.canbus_header.timestamp_sec,) = _struct_5Iid.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.debug.input_debug.canbus_header.module_name = str[start:end].decode('utf-8')
      else:
        self.debug.input_debug.canbus_header.module_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.debug.input_debug.canbus_header.sequence_num, _x.debug.input_debug.canbus_header.lidar_timestamp, _x.debug.input_debug.canbus_header.camera_timestamp, _x.debug.input_debug.canbus_header.radar_timestamp, _x.debug.input_debug.canbus_header.version, _x.debug.input_debug.canbus_header.status.error_code, _x.debug.input_debug.trajectory_header.timestamp_sec,) = _struct_5Iid.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.debug.input_debug.trajectory_header.module_name = str[start:end].decode('utf-8')
      else:
        self.debug.input_debug.trajectory_header.module_name = str[start:end]
      _x = self
      start = end
      end += 257
      (_x.debug.input_debug.trajectory_header.sequence_num, _x.debug.input_debug.trajectory_header.lidar_timestamp, _x.debug.input_debug.trajectory_header.camera_timestamp, _x.debug.input_debug.trajectory_header.radar_timestamp, _x.debug.input_debug.trajectory_header.version, _x.debug.input_debug.trajectory_header.status.error_code, _x.debug.simple_mpc_debug.lateral_error, _x.debug.simple_mpc_debug.ref_heading, _x.debug.simple_mpc_debug.heading, _x.debug.simple_mpc_debug.heading_error, _x.debug.simple_mpc_debug.heading_error_rate, _x.debug.simple_mpc_debug.lateral_error_rate, _x.debug.simple_mpc_debug.curvature, _x.debug.simple_mpc_debug.steer_angle, _x.debug.simple_mpc_debug.steer_angle_feedforward, _x.debug.simple_mpc_debug.steer_angle_lateral_contribution, _x.debug.simple_mpc_debug.steer_angle_lateral_rate_contribution, _x.debug.simple_mpc_debug.steer_angle_heading_contribution, _x.debug.simple_mpc_debug.steer_angle_heading_rate_contribution, _x.debug.simple_mpc_debug.steer_angle_feedback, _x.debug.simple_mpc_debug.steering_position, _x.debug.simple_mpc_debug.ref_speed, _x.debug.simple_mpc_debug.steer_angle_limited, _x.debug.simple_mpc_debug.station_reference, _x.debug.simple_mpc_debug.station_error, _x.debug.simple_mpc_debug.speed_reference, _x.debug.simple_mpc_debug.speed_error, _x.debug.simple_mpc_debug.acceleration_reference, _x.debug.simple_mpc_debug.is_full_stop, _x.debug.simple_mpc_debug.station_feedback, _x.debug.simple_mpc_debug.speed_feedback, _x.debug.simple_mpc_debug.acceleration_cmd_closeloop, _x.debug.simple_mpc_debug.acceleration_cmd, _x.debug.simple_mpc_debug.acceleration_lookup, _x.debug.simple_mpc_debug.speed_lookup, _x.debug.simple_mpc_debug.calibration_value,) = _struct_5Ii22dB7d.unpack(str[start:end])
      self.debug.simple_mpc_debug.is_full_stop = bool(self.debug.simple_mpc_debug.is_full_stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.debug.simple_mpc_debug.matrix_q_updated = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.debug.simple_mpc_debug.matrix_r_updated = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bd = struct.Struct("<Bd")
_struct_5Iid = struct.Struct("<5Iid")
_struct_d = struct.Struct("<d")
_struct_5I9iB = struct.Struct("<5I9iB")
_struct_6B3id = struct.Struct("<6B3id")
_struct_5Ii22dB7d = struct.Struct("<5Ii22dB7d")
_struct_5Ii4dB2d2Bid15i4Bd = struct.Struct("<5Ii4dB2d2Bid15i4Bd")
_struct_B17dB21d = struct.Struct("<B17dB21d")
