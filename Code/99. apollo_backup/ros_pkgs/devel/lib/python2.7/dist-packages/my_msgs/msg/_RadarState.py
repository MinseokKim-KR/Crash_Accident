# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/RadarState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_msgs.msg

class RadarState(genpy.Message):
  _md5sum = "11d67e3fb949b69732d767f94cf5dbab"
  _type = "my_msgs/RadarState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 max_distance
int32 radar_power
my_msgs/Conti_Radar_OutputType output_type
my_msgs/Conti_Radar_RcsThreshold rcs_threshold
bool send_quality
bool send_ext_info
================================================================================
MSG: my_msgs/Conti_Radar_OutputType
int32 OUTPUT_TYPE_NONE
int32 OUTPUT_TYPE_OBJECTS
int32 OUTPUT_TYPE_CLUSTERS
int32 OUTPUT_TYPE_ERROR
================================================================================
MSG: my_msgs/Conti_Radar_RcsThreshold
int32 RCS_THRESHOLD_STANDARD
int32 RCS_THRESHOLD_HIGH_SENSITIVITY
int32 RCS_THRESHOLD_ERROR"""
  __slots__ = ['max_distance','radar_power','output_type','rcs_threshold','send_quality','send_ext_info']
  _slot_types = ['int32','int32','my_msgs/Conti_Radar_OutputType','my_msgs/Conti_Radar_RcsThreshold','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       max_distance,radar_power,output_type,rcs_threshold,send_quality,send_ext_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RadarState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.max_distance is None:
        self.max_distance = 0
      if self.radar_power is None:
        self.radar_power = 0
      if self.output_type is None:
        self.output_type = my_msgs.msg.Conti_Radar_OutputType()
      if self.rcs_threshold is None:
        self.rcs_threshold = my_msgs.msg.Conti_Radar_RcsThreshold()
      if self.send_quality is None:
        self.send_quality = False
      if self.send_ext_info is None:
        self.send_ext_info = False
    else:
      self.max_distance = 0
      self.radar_power = 0
      self.output_type = my_msgs.msg.Conti_Radar_OutputType()
      self.rcs_threshold = my_msgs.msg.Conti_Radar_RcsThreshold()
      self.send_quality = False
      self.send_ext_info = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9i2B.pack(_x.max_distance, _x.radar_power, _x.output_type.OUTPUT_TYPE_NONE, _x.output_type.OUTPUT_TYPE_OBJECTS, _x.output_type.OUTPUT_TYPE_CLUSTERS, _x.output_type.OUTPUT_TYPE_ERROR, _x.rcs_threshold.RCS_THRESHOLD_STANDARD, _x.rcs_threshold.RCS_THRESHOLD_HIGH_SENSITIVITY, _x.rcs_threshold.RCS_THRESHOLD_ERROR, _x.send_quality, _x.send_ext_info))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.output_type is None:
        self.output_type = my_msgs.msg.Conti_Radar_OutputType()
      if self.rcs_threshold is None:
        self.rcs_threshold = my_msgs.msg.Conti_Radar_RcsThreshold()
      end = 0
      _x = self
      start = end
      end += 38
      (_x.max_distance, _x.radar_power, _x.output_type.OUTPUT_TYPE_NONE, _x.output_type.OUTPUT_TYPE_OBJECTS, _x.output_type.OUTPUT_TYPE_CLUSTERS, _x.output_type.OUTPUT_TYPE_ERROR, _x.rcs_threshold.RCS_THRESHOLD_STANDARD, _x.rcs_threshold.RCS_THRESHOLD_HIGH_SENSITIVITY, _x.rcs_threshold.RCS_THRESHOLD_ERROR, _x.send_quality, _x.send_ext_info,) = _struct_9i2B.unpack(str[start:end])
      self.send_quality = bool(self.send_quality)
      self.send_ext_info = bool(self.send_ext_info)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9i2B.pack(_x.max_distance, _x.radar_power, _x.output_type.OUTPUT_TYPE_NONE, _x.output_type.OUTPUT_TYPE_OBJECTS, _x.output_type.OUTPUT_TYPE_CLUSTERS, _x.output_type.OUTPUT_TYPE_ERROR, _x.rcs_threshold.RCS_THRESHOLD_STANDARD, _x.rcs_threshold.RCS_THRESHOLD_HIGH_SENSITIVITY, _x.rcs_threshold.RCS_THRESHOLD_ERROR, _x.send_quality, _x.send_ext_info))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.output_type is None:
        self.output_type = my_msgs.msg.Conti_Radar_OutputType()
      if self.rcs_threshold is None:
        self.rcs_threshold = my_msgs.msg.Conti_Radar_RcsThreshold()
      end = 0
      _x = self
      start = end
      end += 38
      (_x.max_distance, _x.radar_power, _x.output_type.OUTPUT_TYPE_NONE, _x.output_type.OUTPUT_TYPE_OBJECTS, _x.output_type.OUTPUT_TYPE_CLUSTERS, _x.output_type.OUTPUT_TYPE_ERROR, _x.rcs_threshold.RCS_THRESHOLD_STANDARD, _x.rcs_threshold.RCS_THRESHOLD_HIGH_SENSITIVITY, _x.rcs_threshold.RCS_THRESHOLD_ERROR, _x.send_quality, _x.send_ext_info,) = _struct_9i2B.unpack(str[start:end])
      self.send_quality = bool(self.send_quality)
      self.send_ext_info = bool(self.send_ext_info)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9i2B = struct.Struct("<9i2B")
