# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/InputDebug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_msgs.msg

class InputDebug(genpy.Message):
  _md5sum = "31af8a71bf5ba4d087d20172a8a5d8cd"
  _type = "my_msgs/InputDebug"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """my_msgs/Header localization_header
my_msgs/Header canbus_header
my_msgs/Header trajectory_header
================================================================================
MSG: my_msgs/Header
float64 timestamp_sec
string module_name
uint32 sequence_num
uint32 lidar_timestamp
uint32 camera_timestamp
uint32 radar_timestamp
uint32 version
my_msgs/Status status

================================================================================
MSG: my_msgs/Status
int32 error_code
"""
  __slots__ = ['localization_header','canbus_header','trajectory_header']
  _slot_types = ['my_msgs/Header','my_msgs/Header','my_msgs/Header']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       localization_header,canbus_header,trajectory_header

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InputDebug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.localization_header is None:
        self.localization_header = my_msgs.msg.Header()
      if self.canbus_header is None:
        self.canbus_header = my_msgs.msg.Header()
      if self.trajectory_header is None:
        self.trajectory_header = my_msgs.msg.Header()
    else:
      self.localization_header = my_msgs.msg.Header()
      self.canbus_header = my_msgs.msg.Header()
      self.trajectory_header = my_msgs.msg.Header()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.localization_header.timestamp_sec))
      _x = self.localization_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid.pack(_x.localization_header.sequence_num, _x.localization_header.lidar_timestamp, _x.localization_header.camera_timestamp, _x.localization_header.radar_timestamp, _x.localization_header.version, _x.localization_header.status.error_code, _x.canbus_header.timestamp_sec))
      _x = self.canbus_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid.pack(_x.canbus_header.sequence_num, _x.canbus_header.lidar_timestamp, _x.canbus_header.camera_timestamp, _x.canbus_header.radar_timestamp, _x.canbus_header.version, _x.canbus_header.status.error_code, _x.trajectory_header.timestamp_sec))
      _x = self.trajectory_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Ii.pack(_x.trajectory_header.sequence_num, _x.trajectory_header.lidar_timestamp, _x.trajectory_header.camera_timestamp, _x.trajectory_header.radar_timestamp, _x.trajectory_header.version, _x.trajectory_header.status.error_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.localization_header is None:
        self.localization_header = my_msgs.msg.Header()
      if self.canbus_header is None:
        self.canbus_header = my_msgs.msg.Header()
      if self.trajectory_header is None:
        self.trajectory_header = my_msgs.msg.Header()
      end = 0
      start = end
      end += 8
      (self.localization_header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localization_header.module_name = str[start:end].decode('utf-8')
      else:
        self.localization_header.module_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.localization_header.sequence_num, _x.localization_header.lidar_timestamp, _x.localization_header.camera_timestamp, _x.localization_header.radar_timestamp, _x.localization_header.version, _x.localization_header.status.error_code, _x.canbus_header.timestamp_sec,) = _struct_5Iid.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.canbus_header.module_name = str[start:end].decode('utf-8')
      else:
        self.canbus_header.module_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.canbus_header.sequence_num, _x.canbus_header.lidar_timestamp, _x.canbus_header.camera_timestamp, _x.canbus_header.radar_timestamp, _x.canbus_header.version, _x.canbus_header.status.error_code, _x.trajectory_header.timestamp_sec,) = _struct_5Iid.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory_header.module_name = str[start:end].decode('utf-8')
      else:
        self.trajectory_header.module_name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.trajectory_header.sequence_num, _x.trajectory_header.lidar_timestamp, _x.trajectory_header.camera_timestamp, _x.trajectory_header.radar_timestamp, _x.trajectory_header.version, _x.trajectory_header.status.error_code,) = _struct_5Ii.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.localization_header.timestamp_sec))
      _x = self.localization_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid.pack(_x.localization_header.sequence_num, _x.localization_header.lidar_timestamp, _x.localization_header.camera_timestamp, _x.localization_header.radar_timestamp, _x.localization_header.version, _x.localization_header.status.error_code, _x.canbus_header.timestamp_sec))
      _x = self.canbus_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid.pack(_x.canbus_header.sequence_num, _x.canbus_header.lidar_timestamp, _x.canbus_header.camera_timestamp, _x.canbus_header.radar_timestamp, _x.canbus_header.version, _x.canbus_header.status.error_code, _x.trajectory_header.timestamp_sec))
      _x = self.trajectory_header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Ii.pack(_x.trajectory_header.sequence_num, _x.trajectory_header.lidar_timestamp, _x.trajectory_header.camera_timestamp, _x.trajectory_header.radar_timestamp, _x.trajectory_header.version, _x.trajectory_header.status.error_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.localization_header is None:
        self.localization_header = my_msgs.msg.Header()
      if self.canbus_header is None:
        self.canbus_header = my_msgs.msg.Header()
      if self.trajectory_header is None:
        self.trajectory_header = my_msgs.msg.Header()
      end = 0
      start = end
      end += 8
      (self.localization_header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.localization_header.module_name = str[start:end].decode('utf-8')
      else:
        self.localization_header.module_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.localization_header.sequence_num, _x.localization_header.lidar_timestamp, _x.localization_header.camera_timestamp, _x.localization_header.radar_timestamp, _x.localization_header.version, _x.localization_header.status.error_code, _x.canbus_header.timestamp_sec,) = _struct_5Iid.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.canbus_header.module_name = str[start:end].decode('utf-8')
      else:
        self.canbus_header.module_name = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.canbus_header.sequence_num, _x.canbus_header.lidar_timestamp, _x.canbus_header.camera_timestamp, _x.canbus_header.radar_timestamp, _x.canbus_header.version, _x.canbus_header.status.error_code, _x.trajectory_header.timestamp_sec,) = _struct_5Iid.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory_header.module_name = str[start:end].decode('utf-8')
      else:
        self.trajectory_header.module_name = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.trajectory_header.sequence_num, _x.trajectory_header.lidar_timestamp, _x.trajectory_header.camera_timestamp, _x.trajectory_header.radar_timestamp, _x.trajectory_header.version, _x.trajectory_header.status.error_code,) = _struct_5Ii.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5Ii = struct.Struct("<5Ii")
_struct_5Iid = struct.Struct("<5Iid")
_struct_d = struct.Struct("<d")
