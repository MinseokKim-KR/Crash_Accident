# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/SimpleLongitudinalDebug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SimpleLongitudinalDebug(genpy.Message):
  _md5sum = "816ee0d341e7fdc6bd862d8053d5c529"
  _type = "my_msgs/SimpleLongitudinalDebug"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 station_reference
float64 station_error
float64 station_error_limited
float64 preview_station_error
float64 speed_reference
float64 speed_error
float64 speed_controller_input_limited
float64 preview_speed_reference
float64 preview_speed_error
float64 preview_acceleration_reference
float64 acceleration_cmd_closeloop
float64 acceleration_cmd
float64 acceleration_lookup
float64 speed_lookup
float64 calibration_value
float64 throttle_cmd
float64 brake_cmd
bool is_full_stop
float64 slope_offset_compensation
float64 current_station
float64 path_remain"""
  __slots__ = ['station_reference','station_error','station_error_limited','preview_station_error','speed_reference','speed_error','speed_controller_input_limited','preview_speed_reference','preview_speed_error','preview_acceleration_reference','acceleration_cmd_closeloop','acceleration_cmd','acceleration_lookup','speed_lookup','calibration_value','throttle_cmd','brake_cmd','is_full_stop','slope_offset_compensation','current_station','path_remain']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','bool','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       station_reference,station_error,station_error_limited,preview_station_error,speed_reference,speed_error,speed_controller_input_limited,preview_speed_reference,preview_speed_error,preview_acceleration_reference,acceleration_cmd_closeloop,acceleration_cmd,acceleration_lookup,speed_lookup,calibration_value,throttle_cmd,brake_cmd,is_full_stop,slope_offset_compensation,current_station,path_remain

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimpleLongitudinalDebug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.station_reference is None:
        self.station_reference = 0.
      if self.station_error is None:
        self.station_error = 0.
      if self.station_error_limited is None:
        self.station_error_limited = 0.
      if self.preview_station_error is None:
        self.preview_station_error = 0.
      if self.speed_reference is None:
        self.speed_reference = 0.
      if self.speed_error is None:
        self.speed_error = 0.
      if self.speed_controller_input_limited is None:
        self.speed_controller_input_limited = 0.
      if self.preview_speed_reference is None:
        self.preview_speed_reference = 0.
      if self.preview_speed_error is None:
        self.preview_speed_error = 0.
      if self.preview_acceleration_reference is None:
        self.preview_acceleration_reference = 0.
      if self.acceleration_cmd_closeloop is None:
        self.acceleration_cmd_closeloop = 0.
      if self.acceleration_cmd is None:
        self.acceleration_cmd = 0.
      if self.acceleration_lookup is None:
        self.acceleration_lookup = 0.
      if self.speed_lookup is None:
        self.speed_lookup = 0.
      if self.calibration_value is None:
        self.calibration_value = 0.
      if self.throttle_cmd is None:
        self.throttle_cmd = 0.
      if self.brake_cmd is None:
        self.brake_cmd = 0.
      if self.is_full_stop is None:
        self.is_full_stop = False
      if self.slope_offset_compensation is None:
        self.slope_offset_compensation = 0.
      if self.current_station is None:
        self.current_station = 0.
      if self.path_remain is None:
        self.path_remain = 0.
    else:
      self.station_reference = 0.
      self.station_error = 0.
      self.station_error_limited = 0.
      self.preview_station_error = 0.
      self.speed_reference = 0.
      self.speed_error = 0.
      self.speed_controller_input_limited = 0.
      self.preview_speed_reference = 0.
      self.preview_speed_error = 0.
      self.preview_acceleration_reference = 0.
      self.acceleration_cmd_closeloop = 0.
      self.acceleration_cmd = 0.
      self.acceleration_lookup = 0.
      self.speed_lookup = 0.
      self.calibration_value = 0.
      self.throttle_cmd = 0.
      self.brake_cmd = 0.
      self.is_full_stop = False
      self.slope_offset_compensation = 0.
      self.current_station = 0.
      self.path_remain = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_17dB3d.pack(_x.station_reference, _x.station_error, _x.station_error_limited, _x.preview_station_error, _x.speed_reference, _x.speed_error, _x.speed_controller_input_limited, _x.preview_speed_reference, _x.preview_speed_error, _x.preview_acceleration_reference, _x.acceleration_cmd_closeloop, _x.acceleration_cmd, _x.acceleration_lookup, _x.speed_lookup, _x.calibration_value, _x.throttle_cmd, _x.brake_cmd, _x.is_full_stop, _x.slope_offset_compensation, _x.current_station, _x.path_remain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 161
      (_x.station_reference, _x.station_error, _x.station_error_limited, _x.preview_station_error, _x.speed_reference, _x.speed_error, _x.speed_controller_input_limited, _x.preview_speed_reference, _x.preview_speed_error, _x.preview_acceleration_reference, _x.acceleration_cmd_closeloop, _x.acceleration_cmd, _x.acceleration_lookup, _x.speed_lookup, _x.calibration_value, _x.throttle_cmd, _x.brake_cmd, _x.is_full_stop, _x.slope_offset_compensation, _x.current_station, _x.path_remain,) = _struct_17dB3d.unpack(str[start:end])
      self.is_full_stop = bool(self.is_full_stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_17dB3d.pack(_x.station_reference, _x.station_error, _x.station_error_limited, _x.preview_station_error, _x.speed_reference, _x.speed_error, _x.speed_controller_input_limited, _x.preview_speed_reference, _x.preview_speed_error, _x.preview_acceleration_reference, _x.acceleration_cmd_closeloop, _x.acceleration_cmd, _x.acceleration_lookup, _x.speed_lookup, _x.calibration_value, _x.throttle_cmd, _x.brake_cmd, _x.is_full_stop, _x.slope_offset_compensation, _x.current_station, _x.path_remain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 161
      (_x.station_reference, _x.station_error, _x.station_error_limited, _x.preview_station_error, _x.speed_reference, _x.speed_error, _x.speed_controller_input_limited, _x.preview_speed_reference, _x.preview_speed_error, _x.preview_acceleration_reference, _x.acceleration_cmd_closeloop, _x.acceleration_cmd, _x.acceleration_lookup, _x.speed_lookup, _x.calibration_value, _x.throttle_cmd, _x.brake_cmd, _x.is_full_stop, _x.slope_offset_compensation, _x.current_station, _x.path_remain,) = _struct_17dB3d.unpack(str[start:end])
      self.is_full_stop = bool(self.is_full_stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_17dB3d = struct.Struct("<17dB3d")
