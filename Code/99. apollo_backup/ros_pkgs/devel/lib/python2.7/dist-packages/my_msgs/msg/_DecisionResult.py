# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/DecisionResult.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_msgs.msg

class DecisionResult(genpy.Message):
  _md5sum = "f37dbb84fce27588f65f8ab03e7a784d"
  _type = "my_msgs/DecisionResult"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """my_msgs/MainDecision main_decision
my_msgs/ObjectDecisions object_decision
my_msgs/Common_VehicleSignal vehicle_signal
================================================================================
MSG: my_msgs/MainDecision
my_msgs/MainMissionComplete mission_complete
my_msgs/MainNotReady not_ready
my_msgs/MainParking parking
================================================================================
MSG: my_msgs/MainMissionComplete
my_msgs/PointENU stop_point32
float64 stop_heading
================================================================================
MSG: my_msgs/PointENU
float64 x
float64 y
float64 z

================================================================================
MSG: my_msgs/MainNotReady
string reason
================================================================================
MSG: my_msgs/MainParking

================================================================================
MSG: my_msgs/ObjectDecisions
my_msgs/ObjectDecision[] decisions
================================================================================
MSG: my_msgs/ObjectDecision
string id
int32 perception_id
my_msgs/ObjectDecisionType object_decision
================================================================================
MSG: my_msgs/ObjectDecisionType
my_msgs/ObjectIgnore ignore
my_msgs/ObjectStop stop
my_msgs/ObjectFollow follow
my_msgs/ObjectYield Yield
my_msgs/ObjectOvertake overtake
my_msgs/ObjectNudge nudge
my_msgs/ObjectSidePass sidepass
my_msgs/ObjectAvoid avoid
================================================================================
MSG: my_msgs/ObjectIgnore

================================================================================
MSG: my_msgs/ObjectStop
my_msgs/StopReasonCode reason_code
float64 distance_s
my_msgs/PointENU stop_point32
float64 stop_heading
byte[] wait_for_obstacle
================================================================================
MSG: my_msgs/StopReasonCode
int32 STOP_REASON_HEAD_VEHICLE
int32 STOP_REASON_DESTINATION
int32 STOP_REASON_PEDESTRIAN
int32 STOP_REASON_OBSTACLE
int32 STOP_REASON_PREPARKING
int32 STOP_REASON_SIGNAL
int32 STOP_REASON_STOP_SIGN
int32 STOP_REASON_YIELD_SIGN
int32 STOP_REASON_CLEAR_ZONE
int32 STOP_REASON_CROSSWALK
int32 STOP_REASON_CREEPER
int32 STOP_REASON_REFERENCE_END
int32 STOP_REASON_YELLOW_SIGNAL
int32 STOP_REASON_PULL_OVER
================================================================================
MSG: my_msgs/ObjectFollow
float64 distance_s
my_msgs/PointENU fence_point32
float64 fence_heading
================================================================================
MSG: my_msgs/ObjectYield
float64 distance_s
my_msgs/PointENU fence_point32
float64 fence_heading
float64 time_buffer
================================================================================
MSG: my_msgs/ObjectOvertake
float64 distance_s
my_msgs/PointENU fence_point32
float64 fence_heading
float64 time_buffer
================================================================================
MSG: my_msgs/ObjectNudge
my_msgs/NudgeType type
float64 distance_l
================================================================================
MSG: my_msgs/NudgeType
int32 LEFT_NUDGE
int32 RIGHT_NUDGE
int32 NO_NUDGE
================================================================================
MSG: my_msgs/ObjectSidePass
my_msgs/SidePassType type
================================================================================
MSG: my_msgs/SidePassType
int32 LEFT
int32 RIGHT
================================================================================
MSG: my_msgs/ObjectAvoid

================================================================================
MSG: my_msgs/Common_VehicleSignal
my_msgs/TurnSignal turn_signal
bool high_beam
bool low_beam
bool horn
bool emergency_light
================================================================================
MSG: my_msgs/TurnSignal
int32 TURN_NONE
int32 TURN_LEFT
int32 TURN_RIGHT"""
  __slots__ = ['main_decision','object_decision','vehicle_signal']
  _slot_types = ['my_msgs/MainDecision','my_msgs/ObjectDecisions','my_msgs/Common_VehicleSignal']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       main_decision,object_decision,vehicle_signal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DecisionResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.main_decision is None:
        self.main_decision = my_msgs.msg.MainDecision()
      if self.object_decision is None:
        self.object_decision = my_msgs.msg.ObjectDecisions()
      if self.vehicle_signal is None:
        self.vehicle_signal = my_msgs.msg.Common_VehicleSignal()
    else:
      self.main_decision = my_msgs.msg.MainDecision()
      self.object_decision = my_msgs.msg.ObjectDecisions()
      self.vehicle_signal = my_msgs.msg.Common_VehicleSignal()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4d.pack(_x.main_decision.mission_complete.stop_point32.x, _x.main_decision.mission_complete.stop_point32.y, _x.main_decision.mission_complete.stop_point32.z, _x.main_decision.mission_complete.stop_heading))
      _x = self.main_decision.not_ready.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.object_decision.decisions)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_decision.decisions:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.perception_id))
        _v1 = val1.object_decision
        _v2 = _v1.ignore
        pass
        _v3 = _v1.stop
        _v4 = _v3.reason_code
        _x = _v4
        buff.write(_struct_14i.pack(_x.STOP_REASON_HEAD_VEHICLE, _x.STOP_REASON_DESTINATION, _x.STOP_REASON_PEDESTRIAN, _x.STOP_REASON_OBSTACLE, _x.STOP_REASON_PREPARKING, _x.STOP_REASON_SIGNAL, _x.STOP_REASON_STOP_SIGN, _x.STOP_REASON_YIELD_SIGN, _x.STOP_REASON_CLEAR_ZONE, _x.STOP_REASON_CROSSWALK, _x.STOP_REASON_CREEPER, _x.STOP_REASON_REFERENCE_END, _x.STOP_REASON_YELLOW_SIGNAL, _x.STOP_REASON_PULL_OVER))
        buff.write(_struct_d.pack(_v3.distance_s))
        _v5 = _v3.stop_point32
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(_v3.stop_heading))
        length = len(_v3.wait_for_obstacle)
        buff.write(_struct_I.pack(length))
        pattern = '<%sb'%length
        buff.write(struct.pack(pattern, *_v3.wait_for_obstacle))
        _v6 = _v1.follow
        buff.write(_struct_d.pack(_v6.distance_s))
        _v7 = _v6.fence_point32
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(_v6.fence_heading))
        _v8 = _v1.Yield
        buff.write(_struct_d.pack(_v8.distance_s))
        _v9 = _v8.fence_point32
        _x = _v9
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v8
        buff.write(_struct_2d.pack(_x.fence_heading, _x.time_buffer))
        _v10 = _v1.overtake
        buff.write(_struct_d.pack(_v10.distance_s))
        _v11 = _v10.fence_point32
        _x = _v11
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v10
        buff.write(_struct_2d.pack(_x.fence_heading, _x.time_buffer))
        _v12 = _v1.nudge
        _v13 = _v12.type
        _x = _v13
        buff.write(_struct_3i.pack(_x.LEFT_NUDGE, _x.RIGHT_NUDGE, _x.NO_NUDGE))
        buff.write(_struct_d.pack(_v12.distance_l))
        _v14 = _v1.sidepass
        _v15 = _v14.type
        _x = _v15
        buff.write(_struct_2i.pack(_x.LEFT, _x.RIGHT))
        _v16 = _v1.avoid
        pass
      _x = self
      buff.write(_struct_3i4B.pack(_x.vehicle_signal.turn_signal.TURN_NONE, _x.vehicle_signal.turn_signal.TURN_LEFT, _x.vehicle_signal.turn_signal.TURN_RIGHT, _x.vehicle_signal.high_beam, _x.vehicle_signal.low_beam, _x.vehicle_signal.horn, _x.vehicle_signal.emergency_light))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.main_decision is None:
        self.main_decision = my_msgs.msg.MainDecision()
      if self.object_decision is None:
        self.object_decision = my_msgs.msg.ObjectDecisions()
      if self.vehicle_signal is None:
        self.vehicle_signal = my_msgs.msg.Common_VehicleSignal()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.main_decision.mission_complete.stop_point32.x, _x.main_decision.mission_complete.stop_point32.y, _x.main_decision.mission_complete.stop_point32.z, _x.main_decision.mission_complete.stop_heading,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.not_ready.reason = str[start:end].decode('utf-8')
      else:
        self.main_decision.not_ready.reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_decision.decisions = []
      for i in range(0, length):
        val1 = my_msgs.msg.ObjectDecision()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (val1.perception_id,) = _struct_i.unpack(str[start:end])
        _v17 = val1.object_decision
        _v18 = _v17.ignore
        _v19 = _v17.stop
        _v20 = _v19.reason_code
        _x = _v20
        start = end
        end += 56
        (_x.STOP_REASON_HEAD_VEHICLE, _x.STOP_REASON_DESTINATION, _x.STOP_REASON_PEDESTRIAN, _x.STOP_REASON_OBSTACLE, _x.STOP_REASON_PREPARKING, _x.STOP_REASON_SIGNAL, _x.STOP_REASON_STOP_SIGN, _x.STOP_REASON_YIELD_SIGN, _x.STOP_REASON_CLEAR_ZONE, _x.STOP_REASON_CROSSWALK, _x.STOP_REASON_CREEPER, _x.STOP_REASON_REFERENCE_END, _x.STOP_REASON_YELLOW_SIGNAL, _x.STOP_REASON_PULL_OVER,) = _struct_14i.unpack(str[start:end])
        start = end
        end += 8
        (_v19.distance_s,) = _struct_d.unpack(str[start:end])
        _v21 = _v19.stop_point32
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (_v19.stop_heading,) = _struct_d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sb'%length
        start = end
        end += struct.calcsize(pattern)
        _v19.wait_for_obstacle = struct.unpack(pattern, str[start:end])
        _v22 = _v17.follow
        start = end
        end += 8
        (_v22.distance_s,) = _struct_d.unpack(str[start:end])
        _v23 = _v22.fence_point32
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (_v22.fence_heading,) = _struct_d.unpack(str[start:end])
        _v24 = _v17.Yield
        start = end
        end += 8
        (_v24.distance_s,) = _struct_d.unpack(str[start:end])
        _v25 = _v24.fence_point32
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v24
        start = end
        end += 16
        (_x.fence_heading, _x.time_buffer,) = _struct_2d.unpack(str[start:end])
        _v26 = _v17.overtake
        start = end
        end += 8
        (_v26.distance_s,) = _struct_d.unpack(str[start:end])
        _v27 = _v26.fence_point32
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v26
        start = end
        end += 16
        (_x.fence_heading, _x.time_buffer,) = _struct_2d.unpack(str[start:end])
        _v28 = _v17.nudge
        _v29 = _v28.type
        _x = _v29
        start = end
        end += 12
        (_x.LEFT_NUDGE, _x.RIGHT_NUDGE, _x.NO_NUDGE,) = _struct_3i.unpack(str[start:end])
        start = end
        end += 8
        (_v28.distance_l,) = _struct_d.unpack(str[start:end])
        _v30 = _v17.sidepass
        _v31 = _v30.type
        _x = _v31
        start = end
        end += 8
        (_x.LEFT, _x.RIGHT,) = _struct_2i.unpack(str[start:end])
        _v32 = _v17.avoid
        self.object_decision.decisions.append(val1)
      _x = self
      start = end
      end += 16
      (_x.vehicle_signal.turn_signal.TURN_NONE, _x.vehicle_signal.turn_signal.TURN_LEFT, _x.vehicle_signal.turn_signal.TURN_RIGHT, _x.vehicle_signal.high_beam, _x.vehicle_signal.low_beam, _x.vehicle_signal.horn, _x.vehicle_signal.emergency_light,) = _struct_3i4B.unpack(str[start:end])
      self.vehicle_signal.high_beam = bool(self.vehicle_signal.high_beam)
      self.vehicle_signal.low_beam = bool(self.vehicle_signal.low_beam)
      self.vehicle_signal.horn = bool(self.vehicle_signal.horn)
      self.vehicle_signal.emergency_light = bool(self.vehicle_signal.emergency_light)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4d.pack(_x.main_decision.mission_complete.stop_point32.x, _x.main_decision.mission_complete.stop_point32.y, _x.main_decision.mission_complete.stop_point32.z, _x.main_decision.mission_complete.stop_heading))
      _x = self.main_decision.not_ready.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.object_decision.decisions)
      buff.write(_struct_I.pack(length))
      for val1 in self.object_decision.decisions:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.perception_id))
        _v33 = val1.object_decision
        _v34 = _v33.ignore
        pass
        _v35 = _v33.stop
        _v36 = _v35.reason_code
        _x = _v36
        buff.write(_struct_14i.pack(_x.STOP_REASON_HEAD_VEHICLE, _x.STOP_REASON_DESTINATION, _x.STOP_REASON_PEDESTRIAN, _x.STOP_REASON_OBSTACLE, _x.STOP_REASON_PREPARKING, _x.STOP_REASON_SIGNAL, _x.STOP_REASON_STOP_SIGN, _x.STOP_REASON_YIELD_SIGN, _x.STOP_REASON_CLEAR_ZONE, _x.STOP_REASON_CROSSWALK, _x.STOP_REASON_CREEPER, _x.STOP_REASON_REFERENCE_END, _x.STOP_REASON_YELLOW_SIGNAL, _x.STOP_REASON_PULL_OVER))
        buff.write(_struct_d.pack(_v35.distance_s))
        _v37 = _v35.stop_point32
        _x = _v37
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(_v35.stop_heading))
        length = len(_v35.wait_for_obstacle)
        buff.write(_struct_I.pack(length))
        pattern = '<%sb'%length
        buff.write(_v35.wait_for_obstacle.tostring())
        _v38 = _v33.follow
        buff.write(_struct_d.pack(_v38.distance_s))
        _v39 = _v38.fence_point32
        _x = _v39
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(_v38.fence_heading))
        _v40 = _v33.Yield
        buff.write(_struct_d.pack(_v40.distance_s))
        _v41 = _v40.fence_point32
        _x = _v41
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v40
        buff.write(_struct_2d.pack(_x.fence_heading, _x.time_buffer))
        _v42 = _v33.overtake
        buff.write(_struct_d.pack(_v42.distance_s))
        _v43 = _v42.fence_point32
        _x = _v43
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v42
        buff.write(_struct_2d.pack(_x.fence_heading, _x.time_buffer))
        _v44 = _v33.nudge
        _v45 = _v44.type
        _x = _v45
        buff.write(_struct_3i.pack(_x.LEFT_NUDGE, _x.RIGHT_NUDGE, _x.NO_NUDGE))
        buff.write(_struct_d.pack(_v44.distance_l))
        _v46 = _v33.sidepass
        _v47 = _v46.type
        _x = _v47
        buff.write(_struct_2i.pack(_x.LEFT, _x.RIGHT))
        _v48 = _v33.avoid
        pass
      _x = self
      buff.write(_struct_3i4B.pack(_x.vehicle_signal.turn_signal.TURN_NONE, _x.vehicle_signal.turn_signal.TURN_LEFT, _x.vehicle_signal.turn_signal.TURN_RIGHT, _x.vehicle_signal.high_beam, _x.vehicle_signal.low_beam, _x.vehicle_signal.horn, _x.vehicle_signal.emergency_light))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.main_decision is None:
        self.main_decision = my_msgs.msg.MainDecision()
      if self.object_decision is None:
        self.object_decision = my_msgs.msg.ObjectDecisions()
      if self.vehicle_signal is None:
        self.vehicle_signal = my_msgs.msg.Common_VehicleSignal()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.main_decision.mission_complete.stop_point32.x, _x.main_decision.mission_complete.stop_point32.y, _x.main_decision.mission_complete.stop_point32.z, _x.main_decision.mission_complete.stop_heading,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.main_decision.not_ready.reason = str[start:end].decode('utf-8')
      else:
        self.main_decision.not_ready.reason = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object_decision.decisions = []
      for i in range(0, length):
        val1 = my_msgs.msg.ObjectDecision()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (val1.perception_id,) = _struct_i.unpack(str[start:end])
        _v49 = val1.object_decision
        _v50 = _v49.ignore
        _v51 = _v49.stop
        _v52 = _v51.reason_code
        _x = _v52
        start = end
        end += 56
        (_x.STOP_REASON_HEAD_VEHICLE, _x.STOP_REASON_DESTINATION, _x.STOP_REASON_PEDESTRIAN, _x.STOP_REASON_OBSTACLE, _x.STOP_REASON_PREPARKING, _x.STOP_REASON_SIGNAL, _x.STOP_REASON_STOP_SIGN, _x.STOP_REASON_YIELD_SIGN, _x.STOP_REASON_CLEAR_ZONE, _x.STOP_REASON_CROSSWALK, _x.STOP_REASON_CREEPER, _x.STOP_REASON_REFERENCE_END, _x.STOP_REASON_YELLOW_SIGNAL, _x.STOP_REASON_PULL_OVER,) = _struct_14i.unpack(str[start:end])
        start = end
        end += 8
        (_v51.distance_s,) = _struct_d.unpack(str[start:end])
        _v53 = _v51.stop_point32
        _x = _v53
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (_v51.stop_heading,) = _struct_d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sb'%length
        start = end
        end += struct.calcsize(pattern)
        _v51.wait_for_obstacle = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
        _v54 = _v49.follow
        start = end
        end += 8
        (_v54.distance_s,) = _struct_d.unpack(str[start:end])
        _v55 = _v54.fence_point32
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (_v54.fence_heading,) = _struct_d.unpack(str[start:end])
        _v56 = _v49.Yield
        start = end
        end += 8
        (_v56.distance_s,) = _struct_d.unpack(str[start:end])
        _v57 = _v56.fence_point32
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v56
        start = end
        end += 16
        (_x.fence_heading, _x.time_buffer,) = _struct_2d.unpack(str[start:end])
        _v58 = _v49.overtake
        start = end
        end += 8
        (_v58.distance_s,) = _struct_d.unpack(str[start:end])
        _v59 = _v58.fence_point32
        _x = _v59
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v58
        start = end
        end += 16
        (_x.fence_heading, _x.time_buffer,) = _struct_2d.unpack(str[start:end])
        _v60 = _v49.nudge
        _v61 = _v60.type
        _x = _v61
        start = end
        end += 12
        (_x.LEFT_NUDGE, _x.RIGHT_NUDGE, _x.NO_NUDGE,) = _struct_3i.unpack(str[start:end])
        start = end
        end += 8
        (_v60.distance_l,) = _struct_d.unpack(str[start:end])
        _v62 = _v49.sidepass
        _v63 = _v62.type
        _x = _v63
        start = end
        end += 8
        (_x.LEFT, _x.RIGHT,) = _struct_2i.unpack(str[start:end])
        _v64 = _v49.avoid
        self.object_decision.decisions.append(val1)
      _x = self
      start = end
      end += 16
      (_x.vehicle_signal.turn_signal.TURN_NONE, _x.vehicle_signal.turn_signal.TURN_LEFT, _x.vehicle_signal.turn_signal.TURN_RIGHT, _x.vehicle_signal.high_beam, _x.vehicle_signal.low_beam, _x.vehicle_signal.horn, _x.vehicle_signal.emergency_light,) = _struct_3i4B.unpack(str[start:end])
      self.vehicle_signal.high_beam = bool(self.vehicle_signal.high_beam)
      self.vehicle_signal.low_beam = bool(self.vehicle_signal.low_beam)
      self.vehicle_signal.horn = bool(self.vehicle_signal.horn)
      self.vehicle_signal.emergency_light = bool(self.vehicle_signal.emergency_light)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
_struct_i = struct.Struct("<i")
_struct_3i4B = struct.Struct("<3i4B")
_struct_2d = struct.Struct("<2d")
_struct_3i = struct.Struct("<3i")
_struct_4d = struct.Struct("<4d")
_struct_14i = struct.Struct("<14i")
_struct_2i = struct.Struct("<2i")
_struct_3d = struct.Struct("<3d")
