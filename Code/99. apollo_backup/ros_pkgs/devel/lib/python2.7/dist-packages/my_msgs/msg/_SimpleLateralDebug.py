# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/SimpleLateralDebug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SimpleLateralDebug(genpy.Message):
  _md5sum = "23e212db97358a0e29dd3551fc581635"
  _type = "my_msgs/SimpleLateralDebug"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 lateral_error
float64 ref_heading
float64 heading
float64 heading_error
float64 heading_error_rate
float64 lateral_error_rate
float64 curvature
float64 steer_angle
float64 steer_angle_feedforward
float64 steer_angle_lateral_contribution
float64 steer_angle_lateral_rate_contribution
float64 steer_angle_heading_contribution
float64 steer_angle_heading_rate_contribution
float64 steer_angle_feedback
float64 steering_position
float64 ref_speed
float64 steer_angle_limited   """
  __slots__ = ['lateral_error','ref_heading','heading','heading_error','heading_error_rate','lateral_error_rate','curvature','steer_angle','steer_angle_feedforward','steer_angle_lateral_contribution','steer_angle_lateral_rate_contribution','steer_angle_heading_contribution','steer_angle_heading_rate_contribution','steer_angle_feedback','steering_position','ref_speed','steer_angle_limited']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lateral_error,ref_heading,heading,heading_error,heading_error_rate,lateral_error_rate,curvature,steer_angle,steer_angle_feedforward,steer_angle_lateral_contribution,steer_angle_lateral_rate_contribution,steer_angle_heading_contribution,steer_angle_heading_rate_contribution,steer_angle_feedback,steering_position,ref_speed,steer_angle_limited

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimpleLateralDebug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lateral_error is None:
        self.lateral_error = 0.
      if self.ref_heading is None:
        self.ref_heading = 0.
      if self.heading is None:
        self.heading = 0.
      if self.heading_error is None:
        self.heading_error = 0.
      if self.heading_error_rate is None:
        self.heading_error_rate = 0.
      if self.lateral_error_rate is None:
        self.lateral_error_rate = 0.
      if self.curvature is None:
        self.curvature = 0.
      if self.steer_angle is None:
        self.steer_angle = 0.
      if self.steer_angle_feedforward is None:
        self.steer_angle_feedforward = 0.
      if self.steer_angle_lateral_contribution is None:
        self.steer_angle_lateral_contribution = 0.
      if self.steer_angle_lateral_rate_contribution is None:
        self.steer_angle_lateral_rate_contribution = 0.
      if self.steer_angle_heading_contribution is None:
        self.steer_angle_heading_contribution = 0.
      if self.steer_angle_heading_rate_contribution is None:
        self.steer_angle_heading_rate_contribution = 0.
      if self.steer_angle_feedback is None:
        self.steer_angle_feedback = 0.
      if self.steering_position is None:
        self.steering_position = 0.
      if self.ref_speed is None:
        self.ref_speed = 0.
      if self.steer_angle_limited is None:
        self.steer_angle_limited = 0.
    else:
      self.lateral_error = 0.
      self.ref_heading = 0.
      self.heading = 0.
      self.heading_error = 0.
      self.heading_error_rate = 0.
      self.lateral_error_rate = 0.
      self.curvature = 0.
      self.steer_angle = 0.
      self.steer_angle_feedforward = 0.
      self.steer_angle_lateral_contribution = 0.
      self.steer_angle_lateral_rate_contribution = 0.
      self.steer_angle_heading_contribution = 0.
      self.steer_angle_heading_rate_contribution = 0.
      self.steer_angle_feedback = 0.
      self.steering_position = 0.
      self.ref_speed = 0.
      self.steer_angle_limited = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_17d.pack(_x.lateral_error, _x.ref_heading, _x.heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error_rate, _x.curvature, _x.steer_angle, _x.steer_angle_feedforward, _x.steer_angle_lateral_contribution, _x.steer_angle_lateral_rate_contribution, _x.steer_angle_heading_contribution, _x.steer_angle_heading_rate_contribution, _x.steer_angle_feedback, _x.steering_position, _x.ref_speed, _x.steer_angle_limited))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 136
      (_x.lateral_error, _x.ref_heading, _x.heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error_rate, _x.curvature, _x.steer_angle, _x.steer_angle_feedforward, _x.steer_angle_lateral_contribution, _x.steer_angle_lateral_rate_contribution, _x.steer_angle_heading_contribution, _x.steer_angle_heading_rate_contribution, _x.steer_angle_feedback, _x.steering_position, _x.ref_speed, _x.steer_angle_limited,) = _struct_17d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_17d.pack(_x.lateral_error, _x.ref_heading, _x.heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error_rate, _x.curvature, _x.steer_angle, _x.steer_angle_feedforward, _x.steer_angle_lateral_contribution, _x.steer_angle_lateral_rate_contribution, _x.steer_angle_heading_contribution, _x.steer_angle_heading_rate_contribution, _x.steer_angle_feedback, _x.steering_position, _x.ref_speed, _x.steer_angle_limited))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 136
      (_x.lateral_error, _x.ref_heading, _x.heading, _x.heading_error, _x.heading_error_rate, _x.lateral_error_rate, _x.curvature, _x.steer_angle, _x.steer_angle_feedforward, _x.steer_angle_lateral_contribution, _x.steer_angle_lateral_rate_contribution, _x.steer_angle_heading_contribution, _x.steer_angle_heading_rate_contribution, _x.steer_angle_feedback, _x.steering_position, _x.ref_speed, _x.steer_angle_limited,) = _struct_17d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_17d = struct.Struct("<17d")
