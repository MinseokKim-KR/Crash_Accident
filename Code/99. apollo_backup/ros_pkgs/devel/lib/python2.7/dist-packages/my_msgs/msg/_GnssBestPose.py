# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/GnssBestPose.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_msgs.msg

class GnssBestPose(genpy.Message):
  _md5sum = "d02b4f3ffdb7dda965124b9a452cacfc"
  _type = "my_msgs/GnssBestPose"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """my_msgs/Header header
float64 measurement_time
int32 sol_status
int32 sol_type
float64 latitude 
float64 longitude
float64 height_msl
float64 undulation 
int32 datum_id
float64 latitude_std_dev
float64 longitude_std_dev
float64 height_std_dev 
string base_station_id 
float64 differential_age 
float64 solution_age  
int32 num_sats_tracked 
int32 num_sats_in_solution 
int32 num_sats_l1
int32 num_sats_multi  
int32 reserved 
int32 extended_solution_status 
int32 galileo_beidou_used_mask
int32 gps_glonass_used_mask
================================================================================
MSG: my_msgs/Header
float64 timestamp_sec
string module_name
uint32 sequence_num
uint32 lidar_timestamp
uint32 camera_timestamp
uint32 radar_timestamp
uint32 version
my_msgs/Status status

================================================================================
MSG: my_msgs/Status
int32 error_code
"""
  __slots__ = ['header','measurement_time','sol_status','sol_type','latitude','longitude','height_msl','undulation','datum_id','latitude_std_dev','longitude_std_dev','height_std_dev','base_station_id','differential_age','solution_age','num_sats_tracked','num_sats_in_solution','num_sats_l1','num_sats_multi','reserved','extended_solution_status','galileo_beidou_used_mask','gps_glonass_used_mask']
  _slot_types = ['my_msgs/Header','float64','int32','int32','float64','float64','float64','float64','int32','float64','float64','float64','string','float64','float64','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,measurement_time,sol_status,sol_type,latitude,longitude,height_msl,undulation,datum_id,latitude_std_dev,longitude_std_dev,height_std_dev,base_station_id,differential_age,solution_age,num_sats_tracked,num_sats_in_solution,num_sats_l1,num_sats_multi,reserved,extended_solution_status,galileo_beidou_used_mask,gps_glonass_used_mask

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GnssBestPose, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = my_msgs.msg.Header()
      if self.measurement_time is None:
        self.measurement_time = 0.
      if self.sol_status is None:
        self.sol_status = 0
      if self.sol_type is None:
        self.sol_type = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.height_msl is None:
        self.height_msl = 0.
      if self.undulation is None:
        self.undulation = 0.
      if self.datum_id is None:
        self.datum_id = 0
      if self.latitude_std_dev is None:
        self.latitude_std_dev = 0.
      if self.longitude_std_dev is None:
        self.longitude_std_dev = 0.
      if self.height_std_dev is None:
        self.height_std_dev = 0.
      if self.base_station_id is None:
        self.base_station_id = ''
      if self.differential_age is None:
        self.differential_age = 0.
      if self.solution_age is None:
        self.solution_age = 0.
      if self.num_sats_tracked is None:
        self.num_sats_tracked = 0
      if self.num_sats_in_solution is None:
        self.num_sats_in_solution = 0
      if self.num_sats_l1 is None:
        self.num_sats_l1 = 0
      if self.num_sats_multi is None:
        self.num_sats_multi = 0
      if self.reserved is None:
        self.reserved = 0
      if self.extended_solution_status is None:
        self.extended_solution_status = 0
      if self.galileo_beidou_used_mask is None:
        self.galileo_beidou_used_mask = 0
      if self.gps_glonass_used_mask is None:
        self.gps_glonass_used_mask = 0
    else:
      self.header = my_msgs.msg.Header()
      self.measurement_time = 0.
      self.sol_status = 0
      self.sol_type = 0
      self.latitude = 0.
      self.longitude = 0.
      self.height_msl = 0.
      self.undulation = 0.
      self.datum_id = 0
      self.latitude_std_dev = 0.
      self.longitude_std_dev = 0.
      self.height_std_dev = 0.
      self.base_station_id = ''
      self.differential_age = 0.
      self.solution_age = 0.
      self.num_sats_tracked = 0
      self.num_sats_in_solution = 0
      self.num_sats_l1 = 0
      self.num_sats_multi = 0
      self.reserved = 0
      self.extended_solution_status = 0
      self.galileo_beidou_used_mask = 0
      self.gps_glonass_used_mask = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid2i4di3d.pack(_x.header.sequence_num, _x.header.lidar_timestamp, _x.header.camera_timestamp, _x.header.radar_timestamp, _x.header.version, _x.header.status.error_code, _x.measurement_time, _x.sol_status, _x.sol_type, _x.latitude, _x.longitude, _x.height_msl, _x.undulation, _x.datum_id, _x.latitude_std_dev, _x.longitude_std_dev, _x.height_std_dev))
      _x = self.base_station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d8i.pack(_x.differential_age, _x.solution_age, _x.num_sats_tracked, _x.num_sats_in_solution, _x.num_sats_l1, _x.num_sats_multi, _x.reserved, _x.extended_solution_status, _x.galileo_beidou_used_mask, _x.gps_glonass_used_mask))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = my_msgs.msg.Header()
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.header.sequence_num, _x.header.lidar_timestamp, _x.header.camera_timestamp, _x.header.radar_timestamp, _x.header.version, _x.header.status.error_code, _x.measurement_time, _x.sol_status, _x.sol_type, _x.latitude, _x.longitude, _x.height_msl, _x.undulation, _x.datum_id, _x.latitude_std_dev, _x.longitude_std_dev, _x.height_std_dev,) = _struct_5Iid2i4di3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_station_id = str[start:end].decode('utf-8')
      else:
        self.base_station_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.differential_age, _x.solution_age, _x.num_sats_tracked, _x.num_sats_in_solution, _x.num_sats_l1, _x.num_sats_multi, _x.reserved, _x.extended_solution_status, _x.galileo_beidou_used_mask, _x.gps_glonass_used_mask,) = _struct_2d8i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.header.timestamp_sec))
      _x = self.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Iid2i4di3d.pack(_x.header.sequence_num, _x.header.lidar_timestamp, _x.header.camera_timestamp, _x.header.radar_timestamp, _x.header.version, _x.header.status.error_code, _x.measurement_time, _x.sol_status, _x.sol_type, _x.latitude, _x.longitude, _x.height_msl, _x.undulation, _x.datum_id, _x.latitude_std_dev, _x.longitude_std_dev, _x.height_std_dev))
      _x = self.base_station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2d8i.pack(_x.differential_age, _x.solution_age, _x.num_sats_tracked, _x.num_sats_in_solution, _x.num_sats_l1, _x.num_sats_multi, _x.reserved, _x.extended_solution_status, _x.galileo_beidou_used_mask, _x.gps_glonass_used_mask))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = my_msgs.msg.Header()
      end = 0
      start = end
      end += 8
      (self.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.module_name = str[start:end].decode('utf-8')
      else:
        self.header.module_name = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.header.sequence_num, _x.header.lidar_timestamp, _x.header.camera_timestamp, _x.header.radar_timestamp, _x.header.version, _x.header.status.error_code, _x.measurement_time, _x.sol_status, _x.sol_type, _x.latitude, _x.longitude, _x.height_msl, _x.undulation, _x.datum_id, _x.latitude_std_dev, _x.longitude_std_dev, _x.height_std_dev,) = _struct_5Iid2i4di3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_station_id = str[start:end].decode('utf-8')
      else:
        self.base_station_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.differential_age, _x.solution_age, _x.num_sats_tracked, _x.num_sats_in_solution, _x.num_sats_l1, _x.num_sats_multi, _x.reserved, _x.extended_solution_status, _x.galileo_beidou_used_mask, _x.gps_glonass_used_mask,) = _struct_2d8i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5Iid2i4di3d = struct.Struct("<5Iid2i4di3d")
_struct_d = struct.Struct("<d")
_struct_2d8i = struct.Struct("<2d8i")
