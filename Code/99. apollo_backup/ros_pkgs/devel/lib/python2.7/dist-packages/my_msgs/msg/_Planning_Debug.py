# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/Planning_Debug.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_msgs.msg

class Planning_Debug(genpy.Message):
  _md5sum = "94aa46f221d13d08e87fbfabcf6289ee"
  _type = "my_msgs/Planning_Debug"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """my_msgs/PlanningData planning_data
================================================================================
MSG: my_msgs/PlanningData
my_msgs/LocalizationEstimate adc_position
my_msgs/Chassis chassis
my_msgs/TrajectoryPoint init_point


================================================================================
MSG: my_msgs/LocalizationEstimate
my_msgs/Header header
my_msgs/Pose pose
float64 measurement_time
================================================================================
MSG: my_msgs/Header
float64 timestamp_sec
string module_name
uint32 sequence_num
uint32 lidar_timestamp
uint32 camera_timestamp
uint32 radar_timestamp
uint32 version
my_msgs/Status status

================================================================================
MSG: my_msgs/Status
int32 error_code

================================================================================
MSG: my_msgs/Pose
my_msgs/PointENU position
my_msgs/Quaternion orientation
my_msgs/Point3D linear_velocity
my_msgs/Point3D linear_accelration
my_msgs/Point3D angular_velocity
float64 heading
my_msgs/Point3D linear_acceleration_vrf
my_msgs/Point3D angular_velocity_vrf
my_msgs/Point3D euler_angles
================================================================================
MSG: my_msgs/PointENU
float64 x
float64 y
float64 z

================================================================================
MSG: my_msgs/Quaternion
float64 qx
float64 qy
float64 qz
float64 qw
================================================================================
MSG: my_msgs/Point3D
float64 x
float64 y
float64 z
================================================================================
MSG: my_msgs/Chassis
bool engine_started
float64 engine_rpm
float64 speed_mps
float64 odometer_m
int32 fuel_range_m
float64 throttle_percentage
float64 brake_percentage
float64 steering_percentage
float64 steering_torque_nm
bool parking_brake
bool high_beam_signal
bool low_beam_signal
bool left_turn_signal
bool right_turn_signal
bool horn
bool wiper
bool disengage_status
uint8 driving_mode 
uint8 error_code  
uint8 gear_location  
float64 steering_timestamp
my_msgs/Header header
int32 chassis_error_mask
my_msgs/Common_VehicleSignal signal  
my_msgs/Chassis_ChassisGPS chassis_gps  
my_msgs/Common_EngageAdvise engage_advice  
================================================================================
MSG: my_msgs/Common_VehicleSignal
my_msgs/TurnSignal turn_signal
bool high_beam
bool low_beam
bool horn
bool emergency_light
================================================================================
MSG: my_msgs/TurnSignal
int32 TURN_NONE
int32 TURN_LEFT
int32 TURN_RIGHT
================================================================================
MSG: my_msgs/Chassis_ChassisGPS
float64 latitude
float64 longitude
bool gps_valid
int32 year
int32 month
int32 day
int32 hours
int32 minutes
int32 seconds
float64 compass_direction
float64 pdop
bool is_gps_fault
bool is_inferred
float64 altitude
float64 heading
float64 hdop
float64 vdop
uint8 quality
int32 num_satellites
float64 gps_speed
================================================================================
MSG: my_msgs/Common_EngageAdvise
uint8 advice
string reason
================================================================================
MSG: my_msgs/TrajectoryPoint
my_msgs/PathPoint path_point
float64 v
float64 a
float64 relative_time
================================================================================
MSG: my_msgs/PathPoint
float64 x
float64 y
float64 z
float64 theta
float64 kappa
float64 s
float64 dkappa
float64 ddkappa
string  lane_id
float64 x_derivative
float64 y_derivative"""
  __slots__ = ['planning_data']
  _slot_types = ['my_msgs/PlanningData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       planning_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Planning_Debug, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.planning_data is None:
        self.planning_data = my_msgs.msg.PlanningData()
    else:
      self.planning_data = my_msgs.msg.PlanningData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.planning_data.adc_position.header.timestamp_sec))
      _x = self.planning_data.adc_position.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Ii27dB3di4d11B2d.pack(_x.planning_data.adc_position.header.sequence_num, _x.planning_data.adc_position.header.lidar_timestamp, _x.planning_data.adc_position.header.camera_timestamp, _x.planning_data.adc_position.header.radar_timestamp, _x.planning_data.adc_position.header.version, _x.planning_data.adc_position.header.status.error_code, _x.planning_data.adc_position.pose.position.x, _x.planning_data.adc_position.pose.position.y, _x.planning_data.adc_position.pose.position.z, _x.planning_data.adc_position.pose.orientation.qx, _x.planning_data.adc_position.pose.orientation.qy, _x.planning_data.adc_position.pose.orientation.qz, _x.planning_data.adc_position.pose.orientation.qw, _x.planning_data.adc_position.pose.linear_velocity.x, _x.planning_data.adc_position.pose.linear_velocity.y, _x.planning_data.adc_position.pose.linear_velocity.z, _x.planning_data.adc_position.pose.linear_accelration.x, _x.planning_data.adc_position.pose.linear_accelration.y, _x.planning_data.adc_position.pose.linear_accelration.z, _x.planning_data.adc_position.pose.angular_velocity.x, _x.planning_data.adc_position.pose.angular_velocity.y, _x.planning_data.adc_position.pose.angular_velocity.z, _x.planning_data.adc_position.pose.heading, _x.planning_data.adc_position.pose.linear_acceleration_vrf.x, _x.planning_data.adc_position.pose.linear_acceleration_vrf.y, _x.planning_data.adc_position.pose.linear_acceleration_vrf.z, _x.planning_data.adc_position.pose.angular_velocity_vrf.x, _x.planning_data.adc_position.pose.angular_velocity_vrf.y, _x.planning_data.adc_position.pose.angular_velocity_vrf.z, _x.planning_data.adc_position.pose.euler_angles.x, _x.planning_data.adc_position.pose.euler_angles.y, _x.planning_data.adc_position.pose.euler_angles.z, _x.planning_data.adc_position.measurement_time, _x.planning_data.chassis.engine_started, _x.planning_data.chassis.engine_rpm, _x.planning_data.chassis.speed_mps, _x.planning_data.chassis.odometer_m, _x.planning_data.chassis.fuel_range_m, _x.planning_data.chassis.throttle_percentage, _x.planning_data.chassis.brake_percentage, _x.planning_data.chassis.steering_percentage, _x.planning_data.chassis.steering_torque_nm, _x.planning_data.chassis.parking_brake, _x.planning_data.chassis.high_beam_signal, _x.planning_data.chassis.low_beam_signal, _x.planning_data.chassis.left_turn_signal, _x.planning_data.chassis.right_turn_signal, _x.planning_data.chassis.horn, _x.planning_data.chassis.wiper, _x.planning_data.chassis.disengage_status, _x.planning_data.chassis.driving_mode, _x.planning_data.chassis.error_code, _x.planning_data.chassis.gear_location, _x.planning_data.chassis.steering_timestamp, _x.planning_data.chassis.header.timestamp_sec))
      _x = self.planning_data.chassis.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5I5i4B2dB6i2d2B4dBidB.pack(_x.planning_data.chassis.header.sequence_num, _x.planning_data.chassis.header.lidar_timestamp, _x.planning_data.chassis.header.camera_timestamp, _x.planning_data.chassis.header.radar_timestamp, _x.planning_data.chassis.header.version, _x.planning_data.chassis.header.status.error_code, _x.planning_data.chassis.chassis_error_mask, _x.planning_data.chassis.signal.turn_signal.TURN_NONE, _x.planning_data.chassis.signal.turn_signal.TURN_LEFT, _x.planning_data.chassis.signal.turn_signal.TURN_RIGHT, _x.planning_data.chassis.signal.high_beam, _x.planning_data.chassis.signal.low_beam, _x.planning_data.chassis.signal.horn, _x.planning_data.chassis.signal.emergency_light, _x.planning_data.chassis.chassis_gps.latitude, _x.planning_data.chassis.chassis_gps.longitude, _x.planning_data.chassis.chassis_gps.gps_valid, _x.planning_data.chassis.chassis_gps.year, _x.planning_data.chassis.chassis_gps.month, _x.planning_data.chassis.chassis_gps.day, _x.planning_data.chassis.chassis_gps.hours, _x.planning_data.chassis.chassis_gps.minutes, _x.planning_data.chassis.chassis_gps.seconds, _x.planning_data.chassis.chassis_gps.compass_direction, _x.planning_data.chassis.chassis_gps.pdop, _x.planning_data.chassis.chassis_gps.is_gps_fault, _x.planning_data.chassis.chassis_gps.is_inferred, _x.planning_data.chassis.chassis_gps.altitude, _x.planning_data.chassis.chassis_gps.heading, _x.planning_data.chassis.chassis_gps.hdop, _x.planning_data.chassis.chassis_gps.vdop, _x.planning_data.chassis.chassis_gps.quality, _x.planning_data.chassis.chassis_gps.num_satellites, _x.planning_data.chassis.chassis_gps.gps_speed, _x.planning_data.chassis.engage_advice.advice))
      _x = self.planning_data.chassis.engage_advice.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8d.pack(_x.planning_data.init_point.path_point.x, _x.planning_data.init_point.path_point.y, _x.planning_data.init_point.path_point.z, _x.planning_data.init_point.path_point.theta, _x.planning_data.init_point.path_point.kappa, _x.planning_data.init_point.path_point.s, _x.planning_data.init_point.path_point.dkappa, _x.planning_data.init_point.path_point.ddkappa))
      _x = self.planning_data.init_point.path_point.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5d.pack(_x.planning_data.init_point.path_point.x_derivative, _x.planning_data.init_point.path_point.y_derivative, _x.planning_data.init_point.v, _x.planning_data.init_point.a, _x.planning_data.init_point.relative_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.planning_data is None:
        self.planning_data = my_msgs.msg.PlanningData()
      end = 0
      start = end
      end += 8
      (self.planning_data.adc_position.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_data.adc_position.header.module_name = str[start:end].decode('utf-8')
      else:
        self.planning_data.adc_position.header.module_name = str[start:end]
      _x = self
      start = end
      end += 328
      (_x.planning_data.adc_position.header.sequence_num, _x.planning_data.adc_position.header.lidar_timestamp, _x.planning_data.adc_position.header.camera_timestamp, _x.planning_data.adc_position.header.radar_timestamp, _x.planning_data.adc_position.header.version, _x.planning_data.adc_position.header.status.error_code, _x.planning_data.adc_position.pose.position.x, _x.planning_data.adc_position.pose.position.y, _x.planning_data.adc_position.pose.position.z, _x.planning_data.adc_position.pose.orientation.qx, _x.planning_data.adc_position.pose.orientation.qy, _x.planning_data.adc_position.pose.orientation.qz, _x.planning_data.adc_position.pose.orientation.qw, _x.planning_data.adc_position.pose.linear_velocity.x, _x.planning_data.adc_position.pose.linear_velocity.y, _x.planning_data.adc_position.pose.linear_velocity.z, _x.planning_data.adc_position.pose.linear_accelration.x, _x.planning_data.adc_position.pose.linear_accelration.y, _x.planning_data.adc_position.pose.linear_accelration.z, _x.planning_data.adc_position.pose.angular_velocity.x, _x.planning_data.adc_position.pose.angular_velocity.y, _x.planning_data.adc_position.pose.angular_velocity.z, _x.planning_data.adc_position.pose.heading, _x.planning_data.adc_position.pose.linear_acceleration_vrf.x, _x.planning_data.adc_position.pose.linear_acceleration_vrf.y, _x.planning_data.adc_position.pose.linear_acceleration_vrf.z, _x.planning_data.adc_position.pose.angular_velocity_vrf.x, _x.planning_data.adc_position.pose.angular_velocity_vrf.y, _x.planning_data.adc_position.pose.angular_velocity_vrf.z, _x.planning_data.adc_position.pose.euler_angles.x, _x.planning_data.adc_position.pose.euler_angles.y, _x.planning_data.adc_position.pose.euler_angles.z, _x.planning_data.adc_position.measurement_time, _x.planning_data.chassis.engine_started, _x.planning_data.chassis.engine_rpm, _x.planning_data.chassis.speed_mps, _x.planning_data.chassis.odometer_m, _x.planning_data.chassis.fuel_range_m, _x.planning_data.chassis.throttle_percentage, _x.planning_data.chassis.brake_percentage, _x.planning_data.chassis.steering_percentage, _x.planning_data.chassis.steering_torque_nm, _x.planning_data.chassis.parking_brake, _x.planning_data.chassis.high_beam_signal, _x.planning_data.chassis.low_beam_signal, _x.planning_data.chassis.left_turn_signal, _x.planning_data.chassis.right_turn_signal, _x.planning_data.chassis.horn, _x.planning_data.chassis.wiper, _x.planning_data.chassis.disengage_status, _x.planning_data.chassis.driving_mode, _x.planning_data.chassis.error_code, _x.planning_data.chassis.gear_location, _x.planning_data.chassis.steering_timestamp, _x.planning_data.chassis.header.timestamp_sec,) = _struct_5Ii27dB3di4d11B2d.unpack(str[start:end])
      self.planning_data.chassis.engine_started = bool(self.planning_data.chassis.engine_started)
      self.planning_data.chassis.parking_brake = bool(self.planning_data.chassis.parking_brake)
      self.planning_data.chassis.high_beam_signal = bool(self.planning_data.chassis.high_beam_signal)
      self.planning_data.chassis.low_beam_signal = bool(self.planning_data.chassis.low_beam_signal)
      self.planning_data.chassis.left_turn_signal = bool(self.planning_data.chassis.left_turn_signal)
      self.planning_data.chassis.right_turn_signal = bool(self.planning_data.chassis.right_turn_signal)
      self.planning_data.chassis.horn = bool(self.planning_data.chassis.horn)
      self.planning_data.chassis.wiper = bool(self.planning_data.chassis.wiper)
      self.planning_data.chassis.disengage_status = bool(self.planning_data.chassis.disengage_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_data.chassis.header.module_name = str[start:end].decode('utf-8')
      else:
        self.planning_data.chassis.header.module_name = str[start:end]
      _x = self
      start = end
      end += 149
      (_x.planning_data.chassis.header.sequence_num, _x.planning_data.chassis.header.lidar_timestamp, _x.planning_data.chassis.header.camera_timestamp, _x.planning_data.chassis.header.radar_timestamp, _x.planning_data.chassis.header.version, _x.planning_data.chassis.header.status.error_code, _x.planning_data.chassis.chassis_error_mask, _x.planning_data.chassis.signal.turn_signal.TURN_NONE, _x.planning_data.chassis.signal.turn_signal.TURN_LEFT, _x.planning_data.chassis.signal.turn_signal.TURN_RIGHT, _x.planning_data.chassis.signal.high_beam, _x.planning_data.chassis.signal.low_beam, _x.planning_data.chassis.signal.horn, _x.planning_data.chassis.signal.emergency_light, _x.planning_data.chassis.chassis_gps.latitude, _x.planning_data.chassis.chassis_gps.longitude, _x.planning_data.chassis.chassis_gps.gps_valid, _x.planning_data.chassis.chassis_gps.year, _x.planning_data.chassis.chassis_gps.month, _x.planning_data.chassis.chassis_gps.day, _x.planning_data.chassis.chassis_gps.hours, _x.planning_data.chassis.chassis_gps.minutes, _x.planning_data.chassis.chassis_gps.seconds, _x.planning_data.chassis.chassis_gps.compass_direction, _x.planning_data.chassis.chassis_gps.pdop, _x.planning_data.chassis.chassis_gps.is_gps_fault, _x.planning_data.chassis.chassis_gps.is_inferred, _x.planning_data.chassis.chassis_gps.altitude, _x.planning_data.chassis.chassis_gps.heading, _x.planning_data.chassis.chassis_gps.hdop, _x.planning_data.chassis.chassis_gps.vdop, _x.planning_data.chassis.chassis_gps.quality, _x.planning_data.chassis.chassis_gps.num_satellites, _x.planning_data.chassis.chassis_gps.gps_speed, _x.planning_data.chassis.engage_advice.advice,) = _struct_5I5i4B2dB6i2d2B4dBidB.unpack(str[start:end])
      self.planning_data.chassis.signal.high_beam = bool(self.planning_data.chassis.signal.high_beam)
      self.planning_data.chassis.signal.low_beam = bool(self.planning_data.chassis.signal.low_beam)
      self.planning_data.chassis.signal.horn = bool(self.planning_data.chassis.signal.horn)
      self.planning_data.chassis.signal.emergency_light = bool(self.planning_data.chassis.signal.emergency_light)
      self.planning_data.chassis.chassis_gps.gps_valid = bool(self.planning_data.chassis.chassis_gps.gps_valid)
      self.planning_data.chassis.chassis_gps.is_gps_fault = bool(self.planning_data.chassis.chassis_gps.is_gps_fault)
      self.planning_data.chassis.chassis_gps.is_inferred = bool(self.planning_data.chassis.chassis_gps.is_inferred)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_data.chassis.engage_advice.reason = str[start:end].decode('utf-8')
      else:
        self.planning_data.chassis.engage_advice.reason = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.planning_data.init_point.path_point.x, _x.planning_data.init_point.path_point.y, _x.planning_data.init_point.path_point.z, _x.planning_data.init_point.path_point.theta, _x.planning_data.init_point.path_point.kappa, _x.planning_data.init_point.path_point.s, _x.planning_data.init_point.path_point.dkappa, _x.planning_data.init_point.path_point.ddkappa,) = _struct_8d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_data.init_point.path_point.lane_id = str[start:end].decode('utf-8')
      else:
        self.planning_data.init_point.path_point.lane_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.planning_data.init_point.path_point.x_derivative, _x.planning_data.init_point.path_point.y_derivative, _x.planning_data.init_point.v, _x.planning_data.init_point.a, _x.planning_data.init_point.relative_time,) = _struct_5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.planning_data.adc_position.header.timestamp_sec))
      _x = self.planning_data.adc_position.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5Ii27dB3di4d11B2d.pack(_x.planning_data.adc_position.header.sequence_num, _x.planning_data.adc_position.header.lidar_timestamp, _x.planning_data.adc_position.header.camera_timestamp, _x.planning_data.adc_position.header.radar_timestamp, _x.planning_data.adc_position.header.version, _x.planning_data.adc_position.header.status.error_code, _x.planning_data.adc_position.pose.position.x, _x.planning_data.adc_position.pose.position.y, _x.planning_data.adc_position.pose.position.z, _x.planning_data.adc_position.pose.orientation.qx, _x.planning_data.adc_position.pose.orientation.qy, _x.planning_data.adc_position.pose.orientation.qz, _x.planning_data.adc_position.pose.orientation.qw, _x.planning_data.adc_position.pose.linear_velocity.x, _x.planning_data.adc_position.pose.linear_velocity.y, _x.planning_data.adc_position.pose.linear_velocity.z, _x.planning_data.adc_position.pose.linear_accelration.x, _x.planning_data.adc_position.pose.linear_accelration.y, _x.planning_data.adc_position.pose.linear_accelration.z, _x.planning_data.adc_position.pose.angular_velocity.x, _x.planning_data.adc_position.pose.angular_velocity.y, _x.planning_data.adc_position.pose.angular_velocity.z, _x.planning_data.adc_position.pose.heading, _x.planning_data.adc_position.pose.linear_acceleration_vrf.x, _x.planning_data.adc_position.pose.linear_acceleration_vrf.y, _x.planning_data.adc_position.pose.linear_acceleration_vrf.z, _x.planning_data.adc_position.pose.angular_velocity_vrf.x, _x.planning_data.adc_position.pose.angular_velocity_vrf.y, _x.planning_data.adc_position.pose.angular_velocity_vrf.z, _x.planning_data.adc_position.pose.euler_angles.x, _x.planning_data.adc_position.pose.euler_angles.y, _x.planning_data.adc_position.pose.euler_angles.z, _x.planning_data.adc_position.measurement_time, _x.planning_data.chassis.engine_started, _x.planning_data.chassis.engine_rpm, _x.planning_data.chassis.speed_mps, _x.planning_data.chassis.odometer_m, _x.planning_data.chassis.fuel_range_m, _x.planning_data.chassis.throttle_percentage, _x.planning_data.chassis.brake_percentage, _x.planning_data.chassis.steering_percentage, _x.planning_data.chassis.steering_torque_nm, _x.planning_data.chassis.parking_brake, _x.planning_data.chassis.high_beam_signal, _x.planning_data.chassis.low_beam_signal, _x.planning_data.chassis.left_turn_signal, _x.planning_data.chassis.right_turn_signal, _x.planning_data.chassis.horn, _x.planning_data.chassis.wiper, _x.planning_data.chassis.disengage_status, _x.planning_data.chassis.driving_mode, _x.planning_data.chassis.error_code, _x.planning_data.chassis.gear_location, _x.planning_data.chassis.steering_timestamp, _x.planning_data.chassis.header.timestamp_sec))
      _x = self.planning_data.chassis.header.module_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5I5i4B2dB6i2d2B4dBidB.pack(_x.planning_data.chassis.header.sequence_num, _x.planning_data.chassis.header.lidar_timestamp, _x.planning_data.chassis.header.camera_timestamp, _x.planning_data.chassis.header.radar_timestamp, _x.planning_data.chassis.header.version, _x.planning_data.chassis.header.status.error_code, _x.planning_data.chassis.chassis_error_mask, _x.planning_data.chassis.signal.turn_signal.TURN_NONE, _x.planning_data.chassis.signal.turn_signal.TURN_LEFT, _x.planning_data.chassis.signal.turn_signal.TURN_RIGHT, _x.planning_data.chassis.signal.high_beam, _x.planning_data.chassis.signal.low_beam, _x.planning_data.chassis.signal.horn, _x.planning_data.chassis.signal.emergency_light, _x.planning_data.chassis.chassis_gps.latitude, _x.planning_data.chassis.chassis_gps.longitude, _x.planning_data.chassis.chassis_gps.gps_valid, _x.planning_data.chassis.chassis_gps.year, _x.planning_data.chassis.chassis_gps.month, _x.planning_data.chassis.chassis_gps.day, _x.planning_data.chassis.chassis_gps.hours, _x.planning_data.chassis.chassis_gps.minutes, _x.planning_data.chassis.chassis_gps.seconds, _x.planning_data.chassis.chassis_gps.compass_direction, _x.planning_data.chassis.chassis_gps.pdop, _x.planning_data.chassis.chassis_gps.is_gps_fault, _x.planning_data.chassis.chassis_gps.is_inferred, _x.planning_data.chassis.chassis_gps.altitude, _x.planning_data.chassis.chassis_gps.heading, _x.planning_data.chassis.chassis_gps.hdop, _x.planning_data.chassis.chassis_gps.vdop, _x.planning_data.chassis.chassis_gps.quality, _x.planning_data.chassis.chassis_gps.num_satellites, _x.planning_data.chassis.chassis_gps.gps_speed, _x.planning_data.chassis.engage_advice.advice))
      _x = self.planning_data.chassis.engage_advice.reason
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8d.pack(_x.planning_data.init_point.path_point.x, _x.planning_data.init_point.path_point.y, _x.planning_data.init_point.path_point.z, _x.planning_data.init_point.path_point.theta, _x.planning_data.init_point.path_point.kappa, _x.planning_data.init_point.path_point.s, _x.planning_data.init_point.path_point.dkappa, _x.planning_data.init_point.path_point.ddkappa))
      _x = self.planning_data.init_point.path_point.lane_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5d.pack(_x.planning_data.init_point.path_point.x_derivative, _x.planning_data.init_point.path_point.y_derivative, _x.planning_data.init_point.v, _x.planning_data.init_point.a, _x.planning_data.init_point.relative_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.planning_data is None:
        self.planning_data = my_msgs.msg.PlanningData()
      end = 0
      start = end
      end += 8
      (self.planning_data.adc_position.header.timestamp_sec,) = _struct_d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_data.adc_position.header.module_name = str[start:end].decode('utf-8')
      else:
        self.planning_data.adc_position.header.module_name = str[start:end]
      _x = self
      start = end
      end += 328
      (_x.planning_data.adc_position.header.sequence_num, _x.planning_data.adc_position.header.lidar_timestamp, _x.planning_data.adc_position.header.camera_timestamp, _x.planning_data.adc_position.header.radar_timestamp, _x.planning_data.adc_position.header.version, _x.planning_data.adc_position.header.status.error_code, _x.planning_data.adc_position.pose.position.x, _x.planning_data.adc_position.pose.position.y, _x.planning_data.adc_position.pose.position.z, _x.planning_data.adc_position.pose.orientation.qx, _x.planning_data.adc_position.pose.orientation.qy, _x.planning_data.adc_position.pose.orientation.qz, _x.planning_data.adc_position.pose.orientation.qw, _x.planning_data.adc_position.pose.linear_velocity.x, _x.planning_data.adc_position.pose.linear_velocity.y, _x.planning_data.adc_position.pose.linear_velocity.z, _x.planning_data.adc_position.pose.linear_accelration.x, _x.planning_data.adc_position.pose.linear_accelration.y, _x.planning_data.adc_position.pose.linear_accelration.z, _x.planning_data.adc_position.pose.angular_velocity.x, _x.planning_data.adc_position.pose.angular_velocity.y, _x.planning_data.adc_position.pose.angular_velocity.z, _x.planning_data.adc_position.pose.heading, _x.planning_data.adc_position.pose.linear_acceleration_vrf.x, _x.planning_data.adc_position.pose.linear_acceleration_vrf.y, _x.planning_data.adc_position.pose.linear_acceleration_vrf.z, _x.planning_data.adc_position.pose.angular_velocity_vrf.x, _x.planning_data.adc_position.pose.angular_velocity_vrf.y, _x.planning_data.adc_position.pose.angular_velocity_vrf.z, _x.planning_data.adc_position.pose.euler_angles.x, _x.planning_data.adc_position.pose.euler_angles.y, _x.planning_data.adc_position.pose.euler_angles.z, _x.planning_data.adc_position.measurement_time, _x.planning_data.chassis.engine_started, _x.planning_data.chassis.engine_rpm, _x.planning_data.chassis.speed_mps, _x.planning_data.chassis.odometer_m, _x.planning_data.chassis.fuel_range_m, _x.planning_data.chassis.throttle_percentage, _x.planning_data.chassis.brake_percentage, _x.planning_data.chassis.steering_percentage, _x.planning_data.chassis.steering_torque_nm, _x.planning_data.chassis.parking_brake, _x.planning_data.chassis.high_beam_signal, _x.planning_data.chassis.low_beam_signal, _x.planning_data.chassis.left_turn_signal, _x.planning_data.chassis.right_turn_signal, _x.planning_data.chassis.horn, _x.planning_data.chassis.wiper, _x.planning_data.chassis.disengage_status, _x.planning_data.chassis.driving_mode, _x.planning_data.chassis.error_code, _x.planning_data.chassis.gear_location, _x.planning_data.chassis.steering_timestamp, _x.planning_data.chassis.header.timestamp_sec,) = _struct_5Ii27dB3di4d11B2d.unpack(str[start:end])
      self.planning_data.chassis.engine_started = bool(self.planning_data.chassis.engine_started)
      self.planning_data.chassis.parking_brake = bool(self.planning_data.chassis.parking_brake)
      self.planning_data.chassis.high_beam_signal = bool(self.planning_data.chassis.high_beam_signal)
      self.planning_data.chassis.low_beam_signal = bool(self.planning_data.chassis.low_beam_signal)
      self.planning_data.chassis.left_turn_signal = bool(self.planning_data.chassis.left_turn_signal)
      self.planning_data.chassis.right_turn_signal = bool(self.planning_data.chassis.right_turn_signal)
      self.planning_data.chassis.horn = bool(self.planning_data.chassis.horn)
      self.planning_data.chassis.wiper = bool(self.planning_data.chassis.wiper)
      self.planning_data.chassis.disengage_status = bool(self.planning_data.chassis.disengage_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_data.chassis.header.module_name = str[start:end].decode('utf-8')
      else:
        self.planning_data.chassis.header.module_name = str[start:end]
      _x = self
      start = end
      end += 149
      (_x.planning_data.chassis.header.sequence_num, _x.planning_data.chassis.header.lidar_timestamp, _x.planning_data.chassis.header.camera_timestamp, _x.planning_data.chassis.header.radar_timestamp, _x.planning_data.chassis.header.version, _x.planning_data.chassis.header.status.error_code, _x.planning_data.chassis.chassis_error_mask, _x.planning_data.chassis.signal.turn_signal.TURN_NONE, _x.planning_data.chassis.signal.turn_signal.TURN_LEFT, _x.planning_data.chassis.signal.turn_signal.TURN_RIGHT, _x.planning_data.chassis.signal.high_beam, _x.planning_data.chassis.signal.low_beam, _x.planning_data.chassis.signal.horn, _x.planning_data.chassis.signal.emergency_light, _x.planning_data.chassis.chassis_gps.latitude, _x.planning_data.chassis.chassis_gps.longitude, _x.planning_data.chassis.chassis_gps.gps_valid, _x.planning_data.chassis.chassis_gps.year, _x.planning_data.chassis.chassis_gps.month, _x.planning_data.chassis.chassis_gps.day, _x.planning_data.chassis.chassis_gps.hours, _x.planning_data.chassis.chassis_gps.minutes, _x.planning_data.chassis.chassis_gps.seconds, _x.planning_data.chassis.chassis_gps.compass_direction, _x.planning_data.chassis.chassis_gps.pdop, _x.planning_data.chassis.chassis_gps.is_gps_fault, _x.planning_data.chassis.chassis_gps.is_inferred, _x.planning_data.chassis.chassis_gps.altitude, _x.planning_data.chassis.chassis_gps.heading, _x.planning_data.chassis.chassis_gps.hdop, _x.planning_data.chassis.chassis_gps.vdop, _x.planning_data.chassis.chassis_gps.quality, _x.planning_data.chassis.chassis_gps.num_satellites, _x.planning_data.chassis.chassis_gps.gps_speed, _x.planning_data.chassis.engage_advice.advice,) = _struct_5I5i4B2dB6i2d2B4dBidB.unpack(str[start:end])
      self.planning_data.chassis.signal.high_beam = bool(self.planning_data.chassis.signal.high_beam)
      self.planning_data.chassis.signal.low_beam = bool(self.planning_data.chassis.signal.low_beam)
      self.planning_data.chassis.signal.horn = bool(self.planning_data.chassis.signal.horn)
      self.planning_data.chassis.signal.emergency_light = bool(self.planning_data.chassis.signal.emergency_light)
      self.planning_data.chassis.chassis_gps.gps_valid = bool(self.planning_data.chassis.chassis_gps.gps_valid)
      self.planning_data.chassis.chassis_gps.is_gps_fault = bool(self.planning_data.chassis.chassis_gps.is_gps_fault)
      self.planning_data.chassis.chassis_gps.is_inferred = bool(self.planning_data.chassis.chassis_gps.is_inferred)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_data.chassis.engage_advice.reason = str[start:end].decode('utf-8')
      else:
        self.planning_data.chassis.engage_advice.reason = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.planning_data.init_point.path_point.x, _x.planning_data.init_point.path_point.y, _x.planning_data.init_point.path_point.z, _x.planning_data.init_point.path_point.theta, _x.planning_data.init_point.path_point.kappa, _x.planning_data.init_point.path_point.s, _x.planning_data.init_point.path_point.dkappa, _x.planning_data.init_point.path_point.ddkappa,) = _struct_8d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planning_data.init_point.path_point.lane_id = str[start:end].decode('utf-8')
      else:
        self.planning_data.init_point.path_point.lane_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.planning_data.init_point.path_point.x_derivative, _x.planning_data.init_point.path_point.y_derivative, _x.planning_data.init_point.v, _x.planning_data.init_point.a, _x.planning_data.init_point.relative_time,) = _struct_5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5Ii27dB3di4d11B2d = struct.Struct("<5Ii27dB3di4d11B2d")
_struct_5d = struct.Struct("<5d")
_struct_d = struct.Struct("<d")
_struct_8d = struct.Struct("<8d")
_struct_5I5i4B2dB6i2d2B4dBidB = struct.Struct("<5I5i4B2dB6i2d2B4dBidB")
